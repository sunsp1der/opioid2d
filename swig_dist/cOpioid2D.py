# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cOpioid2D', [dirname(__file__)])
        except ImportError:
            import _cOpioid2D
            return _cOpioid2D
        if fp is not None:
            try:
                _mod = imp.load_module('_cOpioid2D', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cOpioid2D = swig_import_helper()
    del swig_import_helper
else:
    import _cOpioid2D
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cOpioid2D.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _cOpioid2D.SwigPyIterator_value(self)
    def incr(self, n = 1): return _cOpioid2D.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _cOpioid2D.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _cOpioid2D.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _cOpioid2D.SwigPyIterator_equal(self, *args)
    def copy(self): return _cOpioid2D.SwigPyIterator_copy(self)
    def next(self): return _cOpioid2D.SwigPyIterator_next(self)
    def __next__(self): return _cOpioid2D.SwigPyIterator___next__(self)
    def previous(self): return _cOpioid2D.SwigPyIterator_previous(self)
    def advance(self, *args): return _cOpioid2D.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _cOpioid2D.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _cOpioid2D.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _cOpioid2D.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _cOpioid2D.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _cOpioid2D.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _cOpioid2D.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _cOpioid2D.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class LayerList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayerList, name)
    __repr__ = _swig_repr
    def iterator(self): return _cOpioid2D.LayerList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _cOpioid2D.LayerList___nonzero__(self)
    def __bool__(self): return _cOpioid2D.LayerList___bool__(self)
    def __len__(self): return _cOpioid2D.LayerList___len__(self)
    def pop(self): return _cOpioid2D.LayerList_pop(self)
    def __getslice__(self, *args): return _cOpioid2D.LayerList___getslice__(self, *args)
    def __setslice__(self, *args): return _cOpioid2D.LayerList___setslice__(self, *args)
    def __delslice__(self, *args): return _cOpioid2D.LayerList___delslice__(self, *args)
    def __delitem__(self, *args): return _cOpioid2D.LayerList___delitem__(self, *args)
    def __getitem__(self, *args): return _cOpioid2D.LayerList___getitem__(self, *args)
    def __setitem__(self, *args): return _cOpioid2D.LayerList___setitem__(self, *args)
    def append(self, *args): return _cOpioid2D.LayerList_append(self, *args)
    def empty(self): return _cOpioid2D.LayerList_empty(self)
    def size(self): return _cOpioid2D.LayerList_size(self)
    def clear(self): return _cOpioid2D.LayerList_clear(self)
    def swap(self, *args): return _cOpioid2D.LayerList_swap(self, *args)
    def get_allocator(self): return _cOpioid2D.LayerList_get_allocator(self)
    def begin(self): return _cOpioid2D.LayerList_begin(self)
    def end(self): return _cOpioid2D.LayerList_end(self)
    def rbegin(self): return _cOpioid2D.LayerList_rbegin(self)
    def rend(self): return _cOpioid2D.LayerList_rend(self)
    def pop_back(self): return _cOpioid2D.LayerList_pop_back(self)
    def erase(self, *args): return _cOpioid2D.LayerList_erase(self, *args)
    def __init__(self, *args): 
        this = _cOpioid2D.new_LayerList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _cOpioid2D.LayerList_push_back(self, *args)
    def front(self): return _cOpioid2D.LayerList_front(self)
    def back(self): return _cOpioid2D.LayerList_back(self)
    def assign(self, *args): return _cOpioid2D.LayerList_assign(self, *args)
    def resize(self, *args): return _cOpioid2D.LayerList_resize(self, *args)
    def insert(self, *args): return _cOpioid2D.LayerList_insert(self, *args)
    def pop_front(self): return _cOpioid2D.LayerList_pop_front(self)
    def push_front(self, *args): return _cOpioid2D.LayerList_push_front(self, *args)
    def remove(self, *args): return _cOpioid2D.LayerList_remove(self, *args)
    def unique(self): return _cOpioid2D.LayerList_unique(self)
    def reverse(self): return _cOpioid2D.LayerList_reverse(self)
    def sort(self): return _cOpioid2D.LayerList_sort(self)
    def merge(self, *args): return _cOpioid2D.LayerList_merge(self, *args)
    __swig_destroy__ = _cOpioid2D.delete_LayerList
    __del__ = lambda self : None;
LayerList_swigregister = _cOpioid2D.LayerList_swigregister
LayerList_swigregister(LayerList)

class NodeList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeList, name)
    __repr__ = _swig_repr
    def iterator(self): return _cOpioid2D.NodeList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _cOpioid2D.NodeList___nonzero__(self)
    def __bool__(self): return _cOpioid2D.NodeList___bool__(self)
    def __len__(self): return _cOpioid2D.NodeList___len__(self)
    def pop(self): return _cOpioid2D.NodeList_pop(self)
    def __getslice__(self, *args): return _cOpioid2D.NodeList___getslice__(self, *args)
    def __setslice__(self, *args): return _cOpioid2D.NodeList___setslice__(self, *args)
    def __delslice__(self, *args): return _cOpioid2D.NodeList___delslice__(self, *args)
    def __delitem__(self, *args): return _cOpioid2D.NodeList___delitem__(self, *args)
    def __getitem__(self, *args): return _cOpioid2D.NodeList___getitem__(self, *args)
    def __setitem__(self, *args): return _cOpioid2D.NodeList___setitem__(self, *args)
    def append(self, *args): return _cOpioid2D.NodeList_append(self, *args)
    def empty(self): return _cOpioid2D.NodeList_empty(self)
    def size(self): return _cOpioid2D.NodeList_size(self)
    def clear(self): return _cOpioid2D.NodeList_clear(self)
    def swap(self, *args): return _cOpioid2D.NodeList_swap(self, *args)
    def get_allocator(self): return _cOpioid2D.NodeList_get_allocator(self)
    def begin(self): return _cOpioid2D.NodeList_begin(self)
    def end(self): return _cOpioid2D.NodeList_end(self)
    def rbegin(self): return _cOpioid2D.NodeList_rbegin(self)
    def rend(self): return _cOpioid2D.NodeList_rend(self)
    def pop_back(self): return _cOpioid2D.NodeList_pop_back(self)
    def erase(self, *args): return _cOpioid2D.NodeList_erase(self, *args)
    def __init__(self, *args): 
        this = _cOpioid2D.new_NodeList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _cOpioid2D.NodeList_push_back(self, *args)
    def front(self): return _cOpioid2D.NodeList_front(self)
    def back(self): return _cOpioid2D.NodeList_back(self)
    def assign(self, *args): return _cOpioid2D.NodeList_assign(self, *args)
    def resize(self, *args): return _cOpioid2D.NodeList_resize(self, *args)
    def insert(self, *args): return _cOpioid2D.NodeList_insert(self, *args)
    def pop_front(self): return _cOpioid2D.NodeList_pop_front(self)
    def push_front(self, *args): return _cOpioid2D.NodeList_push_front(self, *args)
    def remove(self, *args): return _cOpioid2D.NodeList_remove(self, *args)
    def unique(self): return _cOpioid2D.NodeList_unique(self)
    def reverse(self): return _cOpioid2D.NodeList_reverse(self)
    def sort(self): return _cOpioid2D.NodeList_sort(self)
    def merge(self, *args): return _cOpioid2D.NodeList_merge(self, *args)
    __swig_destroy__ = _cOpioid2D.delete_NodeList
    __del__ = lambda self : None;
NodeList_swigregister = _cOpioid2D.NodeList_swigregister
NodeList_swigregister(NodeList)

class SpriteList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpriteList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpriteList, name)
    __repr__ = _swig_repr
    def iterator(self): return _cOpioid2D.SpriteList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _cOpioid2D.SpriteList___nonzero__(self)
    def __bool__(self): return _cOpioid2D.SpriteList___bool__(self)
    def __len__(self): return _cOpioid2D.SpriteList___len__(self)
    def pop(self): return _cOpioid2D.SpriteList_pop(self)
    def __getslice__(self, *args): return _cOpioid2D.SpriteList___getslice__(self, *args)
    def __setslice__(self, *args): return _cOpioid2D.SpriteList___setslice__(self, *args)
    def __delslice__(self, *args): return _cOpioid2D.SpriteList___delslice__(self, *args)
    def __delitem__(self, *args): return _cOpioid2D.SpriteList___delitem__(self, *args)
    def __getitem__(self, *args): return _cOpioid2D.SpriteList___getitem__(self, *args)
    def __setitem__(self, *args): return _cOpioid2D.SpriteList___setitem__(self, *args)
    def append(self, *args): return _cOpioid2D.SpriteList_append(self, *args)
    def empty(self): return _cOpioid2D.SpriteList_empty(self)
    def size(self): return _cOpioid2D.SpriteList_size(self)
    def clear(self): return _cOpioid2D.SpriteList_clear(self)
    def swap(self, *args): return _cOpioid2D.SpriteList_swap(self, *args)
    def get_allocator(self): return _cOpioid2D.SpriteList_get_allocator(self)
    def begin(self): return _cOpioid2D.SpriteList_begin(self)
    def end(self): return _cOpioid2D.SpriteList_end(self)
    def rbegin(self): return _cOpioid2D.SpriteList_rbegin(self)
    def rend(self): return _cOpioid2D.SpriteList_rend(self)
    def pop_back(self): return _cOpioid2D.SpriteList_pop_back(self)
    def erase(self, *args): return _cOpioid2D.SpriteList_erase(self, *args)
    def __init__(self, *args): 
        this = _cOpioid2D.new_SpriteList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _cOpioid2D.SpriteList_push_back(self, *args)
    def front(self): return _cOpioid2D.SpriteList_front(self)
    def back(self): return _cOpioid2D.SpriteList_back(self)
    def assign(self, *args): return _cOpioid2D.SpriteList_assign(self, *args)
    def resize(self, *args): return _cOpioid2D.SpriteList_resize(self, *args)
    def insert(self, *args): return _cOpioid2D.SpriteList_insert(self, *args)
    def reserve(self, *args): return _cOpioid2D.SpriteList_reserve(self, *args)
    def capacity(self): return _cOpioid2D.SpriteList_capacity(self)
    __swig_destroy__ = _cOpioid2D.delete_SpriteList
    __del__ = lambda self : None;
SpriteList_swigregister = _cOpioid2D.SpriteList_swigregister
SpriteList_swigregister(SpriteList)


def InitOpioid2D():
  return _cOpioid2D.InitOpioid2D()
InitOpioid2D = _cOpioid2D.InitOpioid2D

def QuitOpioid2D():
  return _cOpioid2D.QuitOpioid2D()
QuitOpioid2D = _cOpioid2D.QuitOpioid2D
class DeleteCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeleteCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeleteCallback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == DeleteCallback:
            _self = None
        else:
            _self = self
        this = _cOpioid2D.new_DeleteCallback(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_DeleteCallback
    __del__ = lambda self : None;
    def OnDelete(self, *args): return _cOpioid2D.DeleteCallback_OnDelete(self, *args)
    def __disown__(self):
        self.this.disown()
        _cOpioid2D.disown_DeleteCallback(self)
        return weakref_proxy(self)
DeleteCallback_swigregister = _cOpioid2D.DeleteCallback_swigregister
DeleteCallback_swigregister(DeleteCallback)

class Identified(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Identified, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Identified, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cOpioid2D.new_Identified()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_Identified
    __del__ = lambda self : None;
    def GetID(self): return _cOpioid2D.Identified_GetID(self)
    def ReUse(self): return _cOpioid2D.Identified_ReUse(self)
    def SetManaged(self, *args): return _cOpioid2D.Identified_SetManaged(self, *args)
    def Delete(self): return _cOpioid2D.Identified_Delete(self)
    def IsDeleted(self): return _cOpioid2D.Identified_IsDeleted(self)
    __swig_getmethods__["SetDeleteCallback"] = lambda x: _cOpioid2D.Identified_SetDeleteCallback
    if _newclass:SetDeleteCallback = staticmethod(_cOpioid2D.Identified_SetDeleteCallback)
Identified_swigregister = _cOpioid2D.Identified_swigregister
Identified_swigregister(Identified)

def Identified_SetDeleteCallback(*args):
  return _cOpioid2D.Identified_SetDeleteCallback(*args)
Identified_SetDeleteCallback = _cOpioid2D.Identified_SetDeleteCallback

class Vec2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _cOpioid2D.Vec2_x_set
    __swig_getmethods__["x"] = _cOpioid2D.Vec2_x_get
    if _newclass:x = _swig_property(_cOpioid2D.Vec2_x_get, _cOpioid2D.Vec2_x_set)
    __swig_setmethods__["y"] = _cOpioid2D.Vec2_y_set
    __swig_getmethods__["y"] = _cOpioid2D.Vec2_y_get
    if _newclass:y = _swig_property(_cOpioid2D.Vec2_y_get, _cOpioid2D.Vec2_y_set)
    def __init__(self, *args): 
        this = _cOpioid2D.new_Vec2(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args): return _cOpioid2D.Vec2_set(self, *args)
    def add(self, *args): return _cOpioid2D.Vec2_add(self, *args)
    def mul(self, *args): return _cOpioid2D.Vec2_mul(self, *args)
    def __iadd__(self, *args): return _cOpioid2D.Vec2___iadd__(self, *args)
    def __isub__(self, *args): return _cOpioid2D.Vec2___isub__(self, *args)
    def __imul__(self, *args): return _cOpioid2D.Vec2___imul__(self, *args)
    def __add__(self, *args): return _cOpioid2D.Vec2___add__(self, *args)
    def __sub__(self, *args): return _cOpioid2D.Vec2___sub__(self, *args)
    def __mul__(self, *args): return _cOpioid2D.Vec2___mul__(self, *args)
    def dot(self, *args): return _cOpioid2D.Vec2_dot(self, *args)
    def rad2xy(self): return _cOpioid2D.Vec2_rad2xy(self)
    def xy2rad(self): return _cOpioid2D.Vec2_xy2rad(self)
    def set_radial(self, *args): return _cOpioid2D.Vec2_set_radial(self, *args)
    def length(self): return _cOpioid2D.Vec2_length(self)
    def direction(self): return _cOpioid2D.Vec2_direction(self)
    def set_length(self, *args): return _cOpioid2D.Vec2_set_length(self, *args)
    def set_direction(self, *args): return _cOpioid2D.Vec2_set_direction(self, *args)
    def unitvec(self): return _cOpioid2D.Vec2_unitvec(self)
    def ortho(self): return _cOpioid2D.Vec2_ortho(self)
    def orthounit(self): return _cOpioid2D.Vec2_orthounit(self)
    def angle(self, *args): return _cOpioid2D.Vec2_angle(self, *args)
    __swig_destroy__ = _cOpioid2D.delete_Vec2
    __del__ = lambda self : None;
Vec2_swigregister = _cOpioid2D.Vec2_swigregister
Vec2_swigregister(Vec2)

class Mat9(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mat9, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mat9, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _cOpioid2D.Mat9_value_set
    __swig_getmethods__["value"] = _cOpioid2D.Mat9_value_get
    if _newclass:value = _swig_property(_cOpioid2D.Mat9_value_get, _cOpioid2D.Mat9_value_set)
    def __init__(self, *args): 
        this = _cOpioid2D.new_Mat9(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(self, *args): return _cOpioid2D.Mat9_get(self, *args)
    def set(self, *args): return _cOpioid2D.Mat9_set(self, *args)
    def mul(self, *args): return _cOpioid2D.Mat9_mul(self, *args)
    def translate(self, *args): return _cOpioid2D.Mat9_translate(self, *args)
    def scale(self, *args): return _cOpioid2D.Mat9_scale(self, *args)
    def rotate(self, *args): return _cOpioid2D.Mat9_rotate(self, *args)
    def transform(self, *args): return _cOpioid2D.Mat9_transform(self, *args)
    def identity(self): return _cOpioid2D.Mat9_identity(self)
    def inversed(self): return _cOpioid2D.Mat9_inversed(self)
    __swig_destroy__ = _cOpioid2D.delete_Mat9
    __del__ = lambda self : None;
Mat9_swigregister = _cOpioid2D.Mat9_swigregister
Mat9_swigregister(Mat9)

class Rect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["topleft"] = _cOpioid2D.Rect_topleft_set
    __swig_getmethods__["topleft"] = _cOpioid2D.Rect_topleft_get
    if _newclass:topleft = _swig_property(_cOpioid2D.Rect_topleft_get, _cOpioid2D.Rect_topleft_set)
    __swig_setmethods__["size"] = _cOpioid2D.Rect_size_set
    __swig_getmethods__["size"] = _cOpioid2D.Rect_size_get
    if _newclass:size = _swig_property(_cOpioid2D.Rect_size_get, _cOpioid2D.Rect_size_set)
    def __init__(self, *args): 
        this = _cOpioid2D.new_Rect(*args)
        try: self.this.append(this)
        except: self.this = this
    def contains(self, *args): return _cOpioid2D.Rect_contains(self, *args)
    __swig_destroy__ = _cOpioid2D.delete_Rect
    __del__ = lambda self : None;
Rect_swigregister = _cOpioid2D.Rect_swigregister
Rect_swigregister(Rect)

class FreeRect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FreeRect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FreeRect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["points"] = _cOpioid2D.FreeRect_points_set
    __swig_getmethods__["points"] = _cOpioid2D.FreeRect_points_get
    if _newclass:points = _swig_property(_cOpioid2D.FreeRect_points_get, _cOpioid2D.FreeRect_points_set)
    def __init__(self, *args): 
        this = _cOpioid2D.new_FreeRect(*args)
        try: self.this.append(this)
        except: self.this = this
    def contains(self, *args): return _cOpioid2D.FreeRect_contains(self, *args)
    __swig_destroy__ = _cOpioid2D.delete_FreeRect
    __del__ = lambda self : None;
FreeRect_swigregister = _cOpioid2D.FreeRect_swigregister
FreeRect_swigregister(FreeRect)

class Color(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr
    __swig_setmethods__["red"] = _cOpioid2D.Color_red_set
    __swig_getmethods__["red"] = _cOpioid2D.Color_red_get
    if _newclass:red = _swig_property(_cOpioid2D.Color_red_get, _cOpioid2D.Color_red_set)
    __swig_setmethods__["green"] = _cOpioid2D.Color_green_set
    __swig_getmethods__["green"] = _cOpioid2D.Color_green_get
    if _newclass:green = _swig_property(_cOpioid2D.Color_green_get, _cOpioid2D.Color_green_set)
    __swig_setmethods__["blue"] = _cOpioid2D.Color_blue_set
    __swig_getmethods__["blue"] = _cOpioid2D.Color_blue_get
    if _newclass:blue = _swig_property(_cOpioid2D.Color_blue_get, _cOpioid2D.Color_blue_set)
    __swig_setmethods__["alpha"] = _cOpioid2D.Color_alpha_set
    __swig_getmethods__["alpha"] = _cOpioid2D.Color_alpha_get
    if _newclass:alpha = _swig_property(_cOpioid2D.Color_alpha_get, _cOpioid2D.Color_alpha_set)
    def __init__(self, *args): 
        this = _cOpioid2D.new_Color(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, red = 1.0, green = 1.0, blue = 1.0, alpha = 1.0): return _cOpioid2D.Color_set(self, red, green, blue, alpha)
    def __mul__(self, *args): return _cOpioid2D.Color___mul__(self, *args)
    def __imul__(self, *args): return _cOpioid2D.Color___imul__(self, *args)
    def __add__(self, *args): return _cOpioid2D.Color___add__(self, *args)
    def __sub__(self, *args): return _cOpioid2D.Color___sub__(self, *args)
    def Apply(self): return _cOpioid2D.Color_Apply(self)
    __swig_destroy__ = _cOpioid2D.delete_Color
    __del__ = lambda self : None;
Color_swigregister = _cOpioid2D.Color_swigregister
Color_swigregister(Color)

class Ticker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ticker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ticker, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["now"] = _cOpioid2D.Ticker_now_set
    __swig_getmethods__["now"] = _cOpioid2D.Ticker_now_get
    if _newclass:now = _swig_property(_cOpioid2D.Ticker_now_get, _cOpioid2D.Ticker_now_set)
    __swig_setmethods__["prevReal"] = _cOpioid2D.Ticker_prevReal_set
    __swig_getmethods__["prevReal"] = _cOpioid2D.Ticker_prevReal_get
    if _newclass:prevReal = _swig_property(_cOpioid2D.Ticker_prevReal_get, _cOpioid2D.Ticker_prevReal_set)
    __swig_setmethods__["nextReal"] = _cOpioid2D.Ticker_nextReal_set
    __swig_getmethods__["nextReal"] = _cOpioid2D.Ticker_nextReal_get
    if _newclass:nextReal = _swig_property(_cOpioid2D.Ticker_nextReal_get, _cOpioid2D.Ticker_nextReal_set)
    __swig_setmethods__["realSpan"] = _cOpioid2D.Ticker_realSpan_set
    __swig_getmethods__["realSpan"] = _cOpioid2D.Ticker_realSpan_get
    if _newclass:realSpan = _swig_property(_cOpioid2D.Ticker_realSpan_get, _cOpioid2D.Ticker_realSpan_set)
    __swig_setmethods__["delta"] = _cOpioid2D.Ticker_delta_set
    __swig_getmethods__["delta"] = _cOpioid2D.Ticker_delta_get
    if _newclass:delta = _swig_property(_cOpioid2D.Ticker_delta_get, _cOpioid2D.Ticker_delta_set)
    __swig_setmethods__["sinceReal"] = _cOpioid2D.Ticker_sinceReal_set
    __swig_getmethods__["sinceReal"] = _cOpioid2D.Ticker_sinceReal_get
    if _newclass:sinceReal = _swig_property(_cOpioid2D.Ticker_sinceReal_get, _cOpioid2D.Ticker_sinceReal_set)
    __swig_setmethods__["realTick"] = _cOpioid2D.Ticker_realTick_set
    __swig_getmethods__["realTick"] = _cOpioid2D.Ticker_realTick_get
    if _newclass:realTick = _swig_property(_cOpioid2D.Ticker_realTick_get, _cOpioid2D.Ticker_realTick_set)
    __swig_destroy__ = _cOpioid2D.delete_Ticker
    __del__ = lambda self : None;
Ticker_swigregister = _cOpioid2D.Ticker_swigregister
Ticker_swigregister(Ticker)

class Texture(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Texture, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Texture, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_Texture(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_Texture
    __del__ = lambda self : None;
    def WriteBytes(self, *args): return _cOpioid2D.Texture_WriteBytes(self, *args)
    def GetTexID(self): return _cOpioid2D.Texture_GetTexID(self)
Texture_swigregister = _cOpioid2D.Texture_swigregister
Texture_swigregister(Texture)

class Image(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Image, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_Image(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_Image
    __del__ = lambda self : None;
    def AddCollisionNode(self, *args): return _cOpioid2D.Image_AddCollisionNode(self, *args)
    def ClearCollisionNodes(self): return _cOpioid2D.Image_ClearCollisionNodes(self)
    __swig_setmethods__["texid"] = _cOpioid2D.Image_texid_set
    __swig_getmethods__["texid"] = _cOpioid2D.Image_texid_get
    if _newclass:texid = _swig_property(_cOpioid2D.Image_texid_get, _cOpioid2D.Image_texid_set)
    __swig_setmethods__["w"] = _cOpioid2D.Image_w_set
    __swig_getmethods__["w"] = _cOpioid2D.Image_w_get
    if _newclass:w = _swig_property(_cOpioid2D.Image_w_get, _cOpioid2D.Image_w_set)
    __swig_setmethods__["h"] = _cOpioid2D.Image_h_set
    __swig_getmethods__["h"] = _cOpioid2D.Image_h_get
    if _newclass:h = _swig_property(_cOpioid2D.Image_h_get, _cOpioid2D.Image_h_set)
    __swig_setmethods__["tx"] = _cOpioid2D.Image_tx_set
    __swig_getmethods__["tx"] = _cOpioid2D.Image_tx_get
    if _newclass:tx = _swig_property(_cOpioid2D.Image_tx_get, _cOpioid2D.Image_tx_set)
    __swig_setmethods__["ty"] = _cOpioid2D.Image_ty_set
    __swig_getmethods__["ty"] = _cOpioid2D.Image_ty_get
    if _newclass:ty = _swig_property(_cOpioid2D.Image_ty_get, _cOpioid2D.Image_ty_set)
    __swig_setmethods__["txx"] = _cOpioid2D.Image_txx_set
    __swig_getmethods__["txx"] = _cOpioid2D.Image_txx_get
    if _newclass:txx = _swig_property(_cOpioid2D.Image_txx_get, _cOpioid2D.Image_txx_set)
    __swig_setmethods__["tyy"] = _cOpioid2D.Image_tyy_set
    __swig_getmethods__["tyy"] = _cOpioid2D.Image_tyy_get
    if _newclass:tyy = _swig_property(_cOpioid2D.Image_tyy_get, _cOpioid2D.Image_tyy_set)
    __swig_setmethods__["hotspot"] = _cOpioid2D.Image_hotspot_set
    __swig_getmethods__["hotspot"] = _cOpioid2D.Image_hotspot_get
    if _newclass:hotspot = _swig_property(_cOpioid2D.Image_hotspot_get, _cOpioid2D.Image_hotspot_set)
Image_swigregister = _cOpioid2D.Image_swigregister
Image_swigregister(Image)

class GridImage(Image):
    __swig_setmethods__ = {}
    for _s in [Image]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridImage, name, value)
    __swig_getmethods__ = {}
    for _s in [Image]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GridImage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_GridImage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_GridImage
    __del__ = lambda self : None;
    def AppendImage(self, *args): return _cOpioid2D.GridImage_AppendImage(self, *args)
    def SetSize(self, *args): return _cOpioid2D.GridImage_SetSize(self, *args)
GridImage_swigregister = _cOpioid2D.GridImage_swigregister
GridImage_swigregister(GridImage)

class ActionCallbacks(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActionCallbacks, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ActionCallbacks, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == ActionCallbacks:
            _self = None
        else:
            _self = self
        this = _cOpioid2D.new_ActionCallbacks(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_ActionCallbacks
    __del__ = lambda self : None;
    def End(self): return _cOpioid2D.ActionCallbacks_End(self)
    def Wake(self): return _cOpioid2D.ActionCallbacks_Wake(self)
    def __disown__(self):
        self.this.disown()
        _cOpioid2D.disown_ActionCallbacks(self)
        return weakref_proxy(self)
ActionCallbacks_swigregister = _cOpioid2D.ActionCallbacks_swigregister
ActionCallbacks_swigregister(ActionCallbacks)

class Action(Identified):
    __swig_setmethods__ = {}
    for _s in [Identified]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action, name, value)
    __swig_getmethods__ = {}
    for _s in [Identified]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Action, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cOpioid2D.new_Action()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_Action
    __del__ = lambda self : None;
    def Setup(self, *args): return _cOpioid2D.Action_Setup(self, *args)
    def SetTimeLimit(self, *args): return _cOpioid2D.Action_SetTimeLimit(self, *args)
    def Start(self): return _cOpioid2D.Action_Start(self)
    def End(self): return _cOpioid2D.Action_End(self)
    def Tick(self, *args): return _cOpioid2D.Action_Tick(self, *args)
Action_swigregister = _cOpioid2D.Action_swigregister
Action_swigregister(Action)

class Physics(Action):
    __swig_setmethods__ = {}
    for _s in [Action]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Physics, name, value)
    __swig_getmethods__ = {}
    for _s in [Action]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Physics, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cOpioid2D.new_Physics()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_Physics
    __del__ = lambda self : None;
    __swig_setmethods__["velocity"] = _cOpioid2D.Physics_velocity_set
    __swig_getmethods__["velocity"] = _cOpioid2D.Physics_velocity_get
    if _newclass:velocity = _swig_property(_cOpioid2D.Physics_velocity_get, _cOpioid2D.Physics_velocity_set)
    __swig_setmethods__["acceleration"] = _cOpioid2D.Physics_acceleration_set
    __swig_getmethods__["acceleration"] = _cOpioid2D.Physics_acceleration_get
    if _newclass:acceleration = _swig_property(_cOpioid2D.Physics_acceleration_get, _cOpioid2D.Physics_acceleration_set)
    __swig_setmethods__["friction"] = _cOpioid2D.Physics_friction_set
    __swig_getmethods__["friction"] = _cOpioid2D.Physics_friction_get
    if _newclass:friction = _swig_property(_cOpioid2D.Physics_friction_get, _cOpioid2D.Physics_friction_set)
    __swig_setmethods__["rotation"] = _cOpioid2D.Physics_rotation_set
    __swig_getmethods__["rotation"] = _cOpioid2D.Physics_rotation_get
    if _newclass:rotation = _swig_property(_cOpioid2D.Physics_rotation_get, _cOpioid2D.Physics_rotation_set)
    def SetRadialVelocity(self, *args): return _cOpioid2D.Physics_SetRadialVelocity(self, *args)
    def SetVelocityAngle(self, *args): return _cOpioid2D.Physics_SetVelocityAngle(self, *args)
    def SetVelocitySpeed(self, *args): return _cOpioid2D.Physics_SetVelocitySpeed(self, *args)
    def GetRadialVelocity(self): return _cOpioid2D.Physics_GetRadialVelocity(self)
Physics_swigregister = _cOpioid2D.Physics_swigregister
Physics_swigregister(Physics)

class IntervalAction(Action):
    __swig_setmethods__ = {}
    for _s in [Action]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntervalAction, name, value)
    __swig_getmethods__ = {}
    for _s in [Action]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntervalAction, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cOpioid2D.new_IntervalAction()
        try: self.this.append(this)
        except: self.this = this
    def SetInterval(self, *args): return _cOpioid2D.IntervalAction_SetInterval(self, *args)
    def SetSmoothing(self, *args): return _cOpioid2D.IntervalAction_SetSmoothing(self, *args)
    __swig_setmethods__["interval_time"] = _cOpioid2D.IntervalAction_interval_time_set
    __swig_getmethods__["interval_time"] = _cOpioid2D.IntervalAction_interval_time_get
    if _newclass:interval_time = _swig_property(_cOpioid2D.IntervalAction_interval_time_get, _cOpioid2D.IntervalAction_interval_time_set)
    __swig_setmethods__["repeat_mode"] = _cOpioid2D.IntervalAction_repeat_mode_set
    __swig_getmethods__["repeat_mode"] = _cOpioid2D.IntervalAction_repeat_mode_get
    if _newclass:repeat_mode = _swig_property(_cOpioid2D.IntervalAction_repeat_mode_get, _cOpioid2D.IntervalAction_repeat_mode_set)
    __swig_destroy__ = _cOpioid2D.delete_IntervalAction
    __del__ = lambda self : None;
IntervalAction_swigregister = _cOpioid2D.IntervalAction_swigregister
IntervalAction_swigregister(IntervalAction)

class MoveDelta(IntervalAction):
    __swig_setmethods__ = {}
    for _s in [IntervalAction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MoveDelta, name, value)
    __swig_getmethods__ = {}
    for _s in [IntervalAction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MoveDelta, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_MoveDelta(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_MoveDelta
    __del__ = lambda self : None;
MoveDelta_swigregister = _cOpioid2D.MoveDelta_swigregister
MoveDelta_swigregister(MoveDelta)

class MoveTo(MoveDelta):
    __swig_setmethods__ = {}
    for _s in [MoveDelta]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MoveTo, name, value)
    __swig_getmethods__ = {}
    for _s in [MoveDelta]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MoveTo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_MoveTo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_MoveTo
    __del__ = lambda self : None;
MoveTo_swigregister = _cOpioid2D.MoveTo_swigregister
MoveTo_swigregister(MoveTo)

class Move(Action):
    __swig_setmethods__ = {}
    for _s in [Action]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Move, name, value)
    __swig_getmethods__ = {}
    for _s in [Action]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Move, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_Move(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_Move
    __del__ = lambda self : None;
Move_swigregister = _cOpioid2D.Move_swigregister
Move_swigregister(Move)

class Delay(Action):
    __swig_setmethods__ = {}
    for _s in [Action]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Delay, name, value)
    __swig_getmethods__ = {}
    for _s in [Action]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Delay, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_Delay(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_Delay
    __del__ = lambda self : None;
Delay_swigregister = _cOpioid2D.Delay_swigregister
Delay_swigregister(Delay)

class AlphaFade(IntervalAction):
    __swig_setmethods__ = {}
    for _s in [IntervalAction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AlphaFade, name, value)
    __swig_getmethods__ = {}
    for _s in [IntervalAction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AlphaFade, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_AlphaFade(*args)
        try: self.this.append(this)
        except: self.this = this
    def Start(self): return _cOpioid2D.AlphaFade_Start(self)
    __swig_destroy__ = _cOpioid2D.delete_AlphaFade
    __del__ = lambda self : None;
AlphaFade_swigregister = _cOpioid2D.AlphaFade_swigregister
AlphaFade_swigregister(AlphaFade)

class ColorFade(IntervalAction):
    __swig_setmethods__ = {}
    for _s in [IntervalAction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorFade, name, value)
    __swig_getmethods__ = {}
    for _s in [IntervalAction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorFade, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_ColorFade(*args)
        try: self.this.append(this)
        except: self.this = this
    def Start(self): return _cOpioid2D.ColorFade_Start(self)
    __swig_destroy__ = _cOpioid2D.delete_ColorFade
    __del__ = lambda self : None;
ColorFade_swigregister = _cOpioid2D.ColorFade_swigregister
ColorFade_swigregister(ColorFade)

class RotateDelta(IntervalAction):
    __swig_setmethods__ = {}
    for _s in [IntervalAction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RotateDelta, name, value)
    __swig_getmethods__ = {}
    for _s in [IntervalAction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotateDelta, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_RotateDelta(*args)
        try: self.this.append(this)
        except: self.this = this
    def Start(self): return _cOpioid2D.RotateDelta_Start(self)
    __swig_destroy__ = _cOpioid2D.delete_RotateDelta
    __del__ = lambda self : None;
RotateDelta_swigregister = _cOpioid2D.RotateDelta_swigregister
RotateDelta_swigregister(RotateDelta)

class Rotate(Action):
    __swig_setmethods__ = {}
    for _s in [Action]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rotate, name, value)
    __swig_getmethods__ = {}
    for _s in [Action]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rotate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_Rotate(*args)
        try: self.this.append(this)
        except: self.this = this
    def Start(self): return _cOpioid2D.Rotate_Start(self)
    __swig_destroy__ = _cOpioid2D.delete_Rotate
    __del__ = lambda self : None;
Rotate_swigregister = _cOpioid2D.Rotate_swigregister
Rotate_swigregister(Rotate)

class Scale(Action):
    __swig_setmethods__ = {}
    for _s in [Action]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scale, name, value)
    __swig_getmethods__ = {}
    for _s in [Action]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Scale, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_Scale(*args)
        try: self.this.append(this)
        except: self.this = this
    def Tick(self, *args): return _cOpioid2D.Scale_Tick(self, *args)
    __swig_destroy__ = _cOpioid2D.delete_Scale
    __del__ = lambda self : None;
Scale_swigregister = _cOpioid2D.Scale_swigregister
Scale_swigregister(Scale)

class ScaleTo(IntervalAction):
    __swig_setmethods__ = {}
    for _s in [IntervalAction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScaleTo, name, value)
    __swig_getmethods__ = {}
    for _s in [IntervalAction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScaleTo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_ScaleTo(*args)
        try: self.this.append(this)
        except: self.this = this
    def Start(self): return _cOpioid2D.ScaleTo_Start(self)
    __swig_destroy__ = _cOpioid2D.delete_ScaleTo
    __del__ = lambda self : None;
ScaleTo_swigregister = _cOpioid2D.ScaleTo_swigregister
ScaleTo_swigregister(ScaleTo)

class TickFunc(Action):
    __swig_setmethods__ = {}
    for _s in [Action]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TickFunc, name, value)
    __swig_getmethods__ = {}
    for _s in [Action]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TickFunc, name)
    __repr__ = _swig_repr
    def __init__(self, realOnly = False): 
        this = _cOpioid2D.new_TickFunc(realOnly)
        try: self.this.append(this)
        except: self.this = this
    def Tick(self, *args): return _cOpioid2D.TickFunc_Tick(self, *args)
    __swig_destroy__ = _cOpioid2D.delete_TickFunc
    __del__ = lambda self : None;
TickFunc_swigregister = _cOpioid2D.TickFunc_swigregister
TickFunc_swigregister(TickFunc)

class FollowPath(Action):
    __swig_setmethods__ = {}
    for _s in [Action]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FollowPath, name, value)
    __swig_getmethods__ = {}
    for _s in [Action]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FollowPath, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_FollowPath(*args)
        try: self.this.append(this)
        except: self.this = this
    def Start(self): return _cOpioid2D.FollowPath_Start(self)
    def Tick(self, *args): return _cOpioid2D.FollowPath_Tick(self, *args)
    def SetPoint(self, *args): return _cOpioid2D.FollowPath_SetPoint(self, *args)
    def SetSpeed(self, *args): return _cOpioid2D.FollowPath_SetSpeed(self, *args)
    __swig_destroy__ = _cOpioid2D.delete_FollowPath
    __del__ = lambda self : None;
FollowPath_swigregister = _cOpioid2D.FollowPath_swigregister
FollowPath_swigregister(FollowPath)

class KeepFacing(Action):
    __swig_setmethods__ = {}
    for _s in [Action]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeepFacing, name, value)
    __swig_getmethods__ = {}
    for _s in [Action]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KeepFacing, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_KeepFacing(*args)
        try: self.this.append(this)
        except: self.this = this
    def Tick(self, *args): return _cOpioid2D.KeepFacing_Tick(self, *args)
    __swig_destroy__ = _cOpioid2D.delete_KeepFacing
    __del__ = lambda self : None;
KeepFacing_swigregister = _cOpioid2D.KeepFacing_swigregister
KeepFacing_swigregister(KeepFacing)

class Animate(Action):
    __swig_setmethods__ = {}
    for _s in [Action]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Animate, name, value)
    __swig_getmethods__ = {}
    for _s in [Action]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Animate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_Animate(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetDelay(self, *args): return _cOpioid2D.Animate_SetDelay(self, *args)
    def Start(self): return _cOpioid2D.Animate_Start(self)
    def Tick(self, *args): return _cOpioid2D.Animate_Tick(self, *args)
    __swig_destroy__ = _cOpioid2D.delete_Animate
    __del__ = lambda self : None;
Animate_swigregister = _cOpioid2D.Animate_swigregister
Animate_swigregister(Animate)

class OrbitAround(Action):
    __swig_setmethods__ = {}
    for _s in [Action]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrbitAround, name, value)
    __swig_getmethods__ = {}
    for _s in [Action]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrbitAround, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_OrbitAround(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_OrbitAround
    __del__ = lambda self : None;
OrbitAround_swigregister = _cOpioid2D.OrbitAround_swigregister
OrbitAround_swigregister(OrbitAround)

class Node(Identified):
    __swig_setmethods__ = {}
    for _s in [Identified]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    for _s in [Identified]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cOpioid2D.new_Node()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_Node
    __del__ = lambda self : None;
    def ReUse(self): return _cOpioid2D.Node_ReUse(self)
    def Place(self, *args): return _cOpioid2D.Node_Place(self, *args)
    def GetLayer(self): return _cOpioid2D.Node_GetLayer(self)
    def GetRootLayer(self): return _cOpioid2D.Node_GetRootLayer(self)
    def AttachTo(self, *args): return _cOpioid2D.Node_AttachTo(self, *args)
    def Detach(self): return _cOpioid2D.Node_Detach(self)
    def OnAttach(self, *args): return _cOpioid2D.Node_OnAttach(self, *args)
    def OnDetach(self, *args): return _cOpioid2D.Node_OnDetach(self, *args)
    def Traverse(self, *args): return _cOpioid2D.Node_Traverse(self, *args)
    def TraverseFree(self): return _cOpioid2D.Node_TraverseFree(self)
    def Enter(self): return _cOpioid2D.Node_Enter(self)
    def EnterFree(self): return _cOpioid2D.Node_EnterFree(self)
    def Pick(self, *args): return _cOpioid2D.Node_Pick(self, *args)
    def PickSelf(self, *args): return _cOpioid2D.Node_PickSelf(self, *args)
    def GetColor(self): return _cOpioid2D.Node_GetColor(self)
    def SetColor(self, r = 1, g = 1, b = 1, a = 1): return _cOpioid2D.Node_SetColor(self, r, g, b, a)
    def SetColorInheritance(self, *args): return _cOpioid2D.Node_SetColorInheritance(self, *args)
    def GetColorInheritance(self): return _cOpioid2D.Node_GetColorInheritance(self)
    def ToThisFrame(self, *args): return _cOpioid2D.Node_ToThisFrame(self, *args)
    def ToParentFrame(self, *args): return _cOpioid2D.Node_ToParentFrame(self, *args)
    def FromThisFrame(self, *args): return _cOpioid2D.Node_FromThisFrame(self, *args)
    def FromParentFrame(self, *args): return _cOpioid2D.Node_FromParentFrame(self, *args)
    def GetPos(self): return _cOpioid2D.Node_GetPos(self)
    def SetPos(self, *args): return _cOpioid2D.Node_SetPos(self, *args)
    def AddPos(self, *args): return _cOpioid2D.Node_AddPos(self, *args)
    def GetWorldPos(self): return _cOpioid2D.Node_GetWorldPos(self)
    def GetPosDelta(self): return _cOpioid2D.Node_GetPosDelta(self)
    def GetWorldVelocity(self): return _cOpioid2D.Node_GetWorldVelocity(self)
    def GetScale(self): return _cOpioid2D.Node_GetScale(self)
    def SetScale(self, *args): return _cOpioid2D.Node_SetScale(self, *args)
    def GetOffset(self): return _cOpioid2D.Node_GetOffset(self)
    def GetRotation(self): return _cOpioid2D.Node_GetRotation(self)
    def SetRotation(self, *args): return _cOpioid2D.Node_SetRotation(self, *args)
    __swig_setmethods__["physics"] = _cOpioid2D.Node_physics_set
    __swig_getmethods__["physics"] = _cOpioid2D.Node_physics_get
    if _newclass:physics = _swig_property(_cOpioid2D.Node_physics_get, _cOpioid2D.Node_physics_set)
Node_swigregister = _cOpioid2D.Node_swigregister
Node_swigregister(Node)

class Particle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Particle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Particle, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cOpioid2D.new_Particle()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_Particle
    __del__ = lambda self : None;
    __swig_setmethods__["pos"] = _cOpioid2D.Particle_pos_set
    __swig_getmethods__["pos"] = _cOpioid2D.Particle_pos_get
    if _newclass:pos = _swig_property(_cOpioid2D.Particle_pos_get, _cOpioid2D.Particle_pos_set)
    __swig_setmethods__["velocity"] = _cOpioid2D.Particle_velocity_set
    __swig_getmethods__["velocity"] = _cOpioid2D.Particle_velocity_get
    if _newclass:velocity = _swig_property(_cOpioid2D.Particle_velocity_get, _cOpioid2D.Particle_velocity_set)
    __swig_setmethods__["acceleration"] = _cOpioid2D.Particle_acceleration_set
    __swig_getmethods__["acceleration"] = _cOpioid2D.Particle_acceleration_get
    if _newclass:acceleration = _swig_property(_cOpioid2D.Particle_acceleration_get, _cOpioid2D.Particle_acceleration_set)
    __swig_setmethods__["friction"] = _cOpioid2D.Particle_friction_set
    __swig_getmethods__["friction"] = _cOpioid2D.Particle_friction_get
    if _newclass:friction = _swig_property(_cOpioid2D.Particle_friction_get, _cOpioid2D.Particle_friction_set)
    __swig_setmethods__["rotation"] = _cOpioid2D.Particle_rotation_set
    __swig_getmethods__["rotation"] = _cOpioid2D.Particle_rotation_get
    if _newclass:rotation = _swig_property(_cOpioid2D.Particle_rotation_get, _cOpioid2D.Particle_rotation_set)
    __swig_setmethods__["rotation_delta"] = _cOpioid2D.Particle_rotation_delta_set
    __swig_getmethods__["rotation_delta"] = _cOpioid2D.Particle_rotation_delta_get
    if _newclass:rotation_delta = _swig_property(_cOpioid2D.Particle_rotation_delta_get, _cOpioid2D.Particle_rotation_delta_set)
    __swig_setmethods__["scale"] = _cOpioid2D.Particle_scale_set
    __swig_getmethods__["scale"] = _cOpioid2D.Particle_scale_get
    if _newclass:scale = _swig_property(_cOpioid2D.Particle_scale_get, _cOpioid2D.Particle_scale_set)
    __swig_setmethods__["scale_delta"] = _cOpioid2D.Particle_scale_delta_set
    __swig_getmethods__["scale_delta"] = _cOpioid2D.Particle_scale_delta_get
    if _newclass:scale_delta = _swig_property(_cOpioid2D.Particle_scale_delta_get, _cOpioid2D.Particle_scale_delta_set)
    __swig_setmethods__["color"] = _cOpioid2D.Particle_color_set
    __swig_getmethods__["color"] = _cOpioid2D.Particle_color_get
    if _newclass:color = _swig_property(_cOpioid2D.Particle_color_get, _cOpioid2D.Particle_color_set)
    __swig_setmethods__["color_delta"] = _cOpioid2D.Particle_color_delta_set
    __swig_getmethods__["color_delta"] = _cOpioid2D.Particle_color_delta_get
    if _newclass:color_delta = _swig_property(_cOpioid2D.Particle_color_delta_get, _cOpioid2D.Particle_color_delta_set)
    __swig_setmethods__["life"] = _cOpioid2D.Particle_life_set
    __swig_getmethods__["life"] = _cOpioid2D.Particle_life_get
    if _newclass:life = _swig_property(_cOpioid2D.Particle_life_get, _cOpioid2D.Particle_life_set)
    __swig_setmethods__["fade_time"] = _cOpioid2D.Particle_fade_time_set
    __swig_getmethods__["fade_time"] = _cOpioid2D.Particle_fade_time_get
    if _newclass:fade_time = _swig_property(_cOpioid2D.Particle_fade_time_get, _cOpioid2D.Particle_fade_time_set)
    __swig_setmethods__["fade_in"] = _cOpioid2D.Particle_fade_in_set
    __swig_getmethods__["fade_in"] = _cOpioid2D.Particle_fade_in_get
    if _newclass:fade_in = _swig_property(_cOpioid2D.Particle_fade_in_get, _cOpioid2D.Particle_fade_in_set)
    __swig_setmethods__["image"] = _cOpioid2D.Particle_image_set
    __swig_getmethods__["image"] = _cOpioid2D.Particle_image_get
    if _newclass:image = _swig_property(_cOpioid2D.Particle_image_get, _cOpioid2D.Particle_image_set)
Particle_swigregister = _cOpioid2D.Particle_swigregister
Particle_swigregister(Particle)

class ParticleSystem(Node):
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleSystem, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cOpioid2D.new_ParticleSystem()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_ParticleSystem
    __del__ = lambda self : None;
    def AddParticle(self, *args): return _cOpioid2D.ParticleSystem_AddParticle(self, *args)
    def AddMutator(self, *args): return _cOpioid2D.ParticleSystem_AddMutator(self, *args)
ParticleSystem_swigregister = _cOpioid2D.ParticleSystem_swigregister
ParticleSystem_swigregister(ParticleSystem)

class EmitterParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmitterParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EmitterParameter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Evaluate(self): return _cOpioid2D.EmitterParameter_Evaluate(self)
    __swig_destroy__ = _cOpioid2D.delete_EmitterParameter
    __del__ = lambda self : None;
EmitterParameter_swigregister = _cOpioid2D.EmitterParameter_swigregister
EmitterParameter_swigregister(EmitterParameter)

class ParticleEmitter(Identified):
    __swig_setmethods__ = {}
    for _s in [Identified]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleEmitter, name, value)
    __swig_getmethods__ = {}
    for _s in [Identified]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleEmitter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cOpioid2D.new_ParticleEmitter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_ParticleEmitter
    __del__ = lambda self : None;
    def Delete(self): return _cOpioid2D.ParticleEmitter_Delete(self)
    def AttachTo(self, *args): return _cOpioid2D.ParticleEmitter_AttachTo(self, *args)
    def SetPosition(self, *args): return _cOpioid2D.ParticleEmitter_SetPosition(self, *args)
    def SetSystem(self, *args): return _cOpioid2D.ParticleEmitter_SetSystem(self, *args)
    def InitFrom(self, *args): return _cOpioid2D.ParticleEmitter_InitFrom(self, *args)
    def EmitSingle(self): return _cOpioid2D.ParticleEmitter_EmitSingle(self)
    def EmitPulse(self): return _cOpioid2D.ParticleEmitter_EmitPulse(self)
    def Start(self): return _cOpioid2D.ParticleEmitter_Start(self)
    __swig_setmethods__["image"] = _cOpioid2D.ParticleEmitter_image_set
    __swig_getmethods__["image"] = _cOpioid2D.ParticleEmitter_image_get
    if _newclass:image = _swig_property(_cOpioid2D.ParticleEmitter_image_get, _cOpioid2D.ParticleEmitter_image_set)
    __swig_setmethods__["direction"] = _cOpioid2D.ParticleEmitter_direction_set
    __swig_getmethods__["direction"] = _cOpioid2D.ParticleEmitter_direction_get
    if _newclass:direction = _swig_property(_cOpioid2D.ParticleEmitter_direction_get, _cOpioid2D.ParticleEmitter_direction_set)
    __swig_setmethods__["angle"] = _cOpioid2D.ParticleEmitter_angle_set
    __swig_getmethods__["angle"] = _cOpioid2D.ParticleEmitter_angle_get
    if _newclass:angle = _swig_property(_cOpioid2D.ParticleEmitter_angle_get, _cOpioid2D.ParticleEmitter_angle_set)
    __swig_setmethods__["speed"] = _cOpioid2D.ParticleEmitter_speed_set
    __swig_getmethods__["speed"] = _cOpioid2D.ParticleEmitter_speed_get
    if _newclass:speed = _swig_property(_cOpioid2D.ParticleEmitter_speed_get, _cOpioid2D.ParticleEmitter_speed_set)
    __swig_setmethods__["acceleration_x"] = _cOpioid2D.ParticleEmitter_acceleration_x_set
    __swig_getmethods__["acceleration_x"] = _cOpioid2D.ParticleEmitter_acceleration_x_get
    if _newclass:acceleration_x = _swig_property(_cOpioid2D.ParticleEmitter_acceleration_x_get, _cOpioid2D.ParticleEmitter_acceleration_x_set)
    __swig_setmethods__["acceleration_y"] = _cOpioid2D.ParticleEmitter_acceleration_y_set
    __swig_getmethods__["acceleration_y"] = _cOpioid2D.ParticleEmitter_acceleration_y_get
    if _newclass:acceleration_y = _swig_property(_cOpioid2D.ParticleEmitter_acceleration_y_get, _cOpioid2D.ParticleEmitter_acceleration_y_set)
    __swig_setmethods__["friction"] = _cOpioid2D.ParticleEmitter_friction_set
    __swig_getmethods__["friction"] = _cOpioid2D.ParticleEmitter_friction_get
    if _newclass:friction = _swig_property(_cOpioid2D.ParticleEmitter_friction_get, _cOpioid2D.ParticleEmitter_friction_set)
    __swig_setmethods__["rotation"] = _cOpioid2D.ParticleEmitter_rotation_set
    __swig_getmethods__["rotation"] = _cOpioid2D.ParticleEmitter_rotation_get
    if _newclass:rotation = _swig_property(_cOpioid2D.ParticleEmitter_rotation_get, _cOpioid2D.ParticleEmitter_rotation_set)
    __swig_setmethods__["rotation_delta"] = _cOpioid2D.ParticleEmitter_rotation_delta_set
    __swig_getmethods__["rotation_delta"] = _cOpioid2D.ParticleEmitter_rotation_delta_get
    if _newclass:rotation_delta = _swig_property(_cOpioid2D.ParticleEmitter_rotation_delta_get, _cOpioid2D.ParticleEmitter_rotation_delta_set)
    __swig_setmethods__["offset_x"] = _cOpioid2D.ParticleEmitter_offset_x_set
    __swig_getmethods__["offset_x"] = _cOpioid2D.ParticleEmitter_offset_x_get
    if _newclass:offset_x = _swig_property(_cOpioid2D.ParticleEmitter_offset_x_get, _cOpioid2D.ParticleEmitter_offset_x_set)
    __swig_setmethods__["offset_y"] = _cOpioid2D.ParticleEmitter_offset_y_set
    __swig_getmethods__["offset_y"] = _cOpioid2D.ParticleEmitter_offset_y_get
    if _newclass:offset_y = _swig_property(_cOpioid2D.ParticleEmitter_offset_y_get, _cOpioid2D.ParticleEmitter_offset_y_set)
    __swig_setmethods__["advance"] = _cOpioid2D.ParticleEmitter_advance_set
    __swig_getmethods__["advance"] = _cOpioid2D.ParticleEmitter_advance_get
    if _newclass:advance = _swig_property(_cOpioid2D.ParticleEmitter_advance_get, _cOpioid2D.ParticleEmitter_advance_set)
    __swig_setmethods__["scale"] = _cOpioid2D.ParticleEmitter_scale_set
    __swig_getmethods__["scale"] = _cOpioid2D.ParticleEmitter_scale_get
    if _newclass:scale = _swig_property(_cOpioid2D.ParticleEmitter_scale_get, _cOpioid2D.ParticleEmitter_scale_set)
    __swig_setmethods__["scale_delta"] = _cOpioid2D.ParticleEmitter_scale_delta_set
    __swig_getmethods__["scale_delta"] = _cOpioid2D.ParticleEmitter_scale_delta_get
    if _newclass:scale_delta = _swig_property(_cOpioid2D.ParticleEmitter_scale_delta_get, _cOpioid2D.ParticleEmitter_scale_delta_set)
    __swig_setmethods__["color_red"] = _cOpioid2D.ParticleEmitter_color_red_set
    __swig_getmethods__["color_red"] = _cOpioid2D.ParticleEmitter_color_red_get
    if _newclass:color_red = _swig_property(_cOpioid2D.ParticleEmitter_color_red_get, _cOpioid2D.ParticleEmitter_color_red_set)
    __swig_setmethods__["color_green"] = _cOpioid2D.ParticleEmitter_color_green_set
    __swig_getmethods__["color_green"] = _cOpioid2D.ParticleEmitter_color_green_get
    if _newclass:color_green = _swig_property(_cOpioid2D.ParticleEmitter_color_green_get, _cOpioid2D.ParticleEmitter_color_green_set)
    __swig_setmethods__["color_blue"] = _cOpioid2D.ParticleEmitter_color_blue_set
    __swig_getmethods__["color_blue"] = _cOpioid2D.ParticleEmitter_color_blue_get
    if _newclass:color_blue = _swig_property(_cOpioid2D.ParticleEmitter_color_blue_get, _cOpioid2D.ParticleEmitter_color_blue_set)
    __swig_setmethods__["color_alpha"] = _cOpioid2D.ParticleEmitter_color_alpha_set
    __swig_getmethods__["color_alpha"] = _cOpioid2D.ParticleEmitter_color_alpha_get
    if _newclass:color_alpha = _swig_property(_cOpioid2D.ParticleEmitter_color_alpha_get, _cOpioid2D.ParticleEmitter_color_alpha_set)
    __swig_setmethods__["color_delta_red"] = _cOpioid2D.ParticleEmitter_color_delta_red_set
    __swig_getmethods__["color_delta_red"] = _cOpioid2D.ParticleEmitter_color_delta_red_get
    if _newclass:color_delta_red = _swig_property(_cOpioid2D.ParticleEmitter_color_delta_red_get, _cOpioid2D.ParticleEmitter_color_delta_red_set)
    __swig_setmethods__["color_delta_green"] = _cOpioid2D.ParticleEmitter_color_delta_green_set
    __swig_getmethods__["color_delta_green"] = _cOpioid2D.ParticleEmitter_color_delta_green_get
    if _newclass:color_delta_green = _swig_property(_cOpioid2D.ParticleEmitter_color_delta_green_get, _cOpioid2D.ParticleEmitter_color_delta_green_set)
    __swig_setmethods__["color_delta_blue"] = _cOpioid2D.ParticleEmitter_color_delta_blue_set
    __swig_getmethods__["color_delta_blue"] = _cOpioid2D.ParticleEmitter_color_delta_blue_get
    if _newclass:color_delta_blue = _swig_property(_cOpioid2D.ParticleEmitter_color_delta_blue_get, _cOpioid2D.ParticleEmitter_color_delta_blue_set)
    __swig_setmethods__["color_delta_alpha"] = _cOpioid2D.ParticleEmitter_color_delta_alpha_set
    __swig_getmethods__["color_delta_alpha"] = _cOpioid2D.ParticleEmitter_color_delta_alpha_get
    if _newclass:color_delta_alpha = _swig_property(_cOpioid2D.ParticleEmitter_color_delta_alpha_get, _cOpioid2D.ParticleEmitter_color_delta_alpha_set)
    __swig_setmethods__["color_target_red"] = _cOpioid2D.ParticleEmitter_color_target_red_set
    __swig_getmethods__["color_target_red"] = _cOpioid2D.ParticleEmitter_color_target_red_get
    if _newclass:color_target_red = _swig_property(_cOpioid2D.ParticleEmitter_color_target_red_get, _cOpioid2D.ParticleEmitter_color_target_red_set)
    __swig_setmethods__["color_target_green"] = _cOpioid2D.ParticleEmitter_color_target_green_set
    __swig_getmethods__["color_target_green"] = _cOpioid2D.ParticleEmitter_color_target_green_get
    if _newclass:color_target_green = _swig_property(_cOpioid2D.ParticleEmitter_color_target_green_get, _cOpioid2D.ParticleEmitter_color_target_green_set)
    __swig_setmethods__["color_target_blue"] = _cOpioid2D.ParticleEmitter_color_target_blue_set
    __swig_getmethods__["color_target_blue"] = _cOpioid2D.ParticleEmitter_color_target_blue_get
    if _newclass:color_target_blue = _swig_property(_cOpioid2D.ParticleEmitter_color_target_blue_get, _cOpioid2D.ParticleEmitter_color_target_blue_set)
    __swig_setmethods__["color_target_alpha"] = _cOpioid2D.ParticleEmitter_color_target_alpha_set
    __swig_getmethods__["color_target_alpha"] = _cOpioid2D.ParticleEmitter_color_target_alpha_get
    if _newclass:color_target_alpha = _swig_property(_cOpioid2D.ParticleEmitter_color_target_alpha_get, _cOpioid2D.ParticleEmitter_color_target_alpha_set)
    __swig_setmethods__["life"] = _cOpioid2D.ParticleEmitter_life_set
    __swig_getmethods__["life"] = _cOpioid2D.ParticleEmitter_life_get
    if _newclass:life = _swig_property(_cOpioid2D.ParticleEmitter_life_get, _cOpioid2D.ParticleEmitter_life_set)
    __swig_setmethods__["fade_time"] = _cOpioid2D.ParticleEmitter_fade_time_set
    __swig_getmethods__["fade_time"] = _cOpioid2D.ParticleEmitter_fade_time_get
    if _newclass:fade_time = _swig_property(_cOpioid2D.ParticleEmitter_fade_time_get, _cOpioid2D.ParticleEmitter_fade_time_set)
    __swig_setmethods__["fade_delay"] = _cOpioid2D.ParticleEmitter_fade_delay_set
    __swig_getmethods__["fade_delay"] = _cOpioid2D.ParticleEmitter_fade_delay_get
    if _newclass:fade_delay = _swig_property(_cOpioid2D.ParticleEmitter_fade_delay_get, _cOpioid2D.ParticleEmitter_fade_delay_set)
    __swig_setmethods__["fade_in"] = _cOpioid2D.ParticleEmitter_fade_in_set
    __swig_getmethods__["fade_in"] = _cOpioid2D.ParticleEmitter_fade_in_get
    if _newclass:fade_in = _swig_property(_cOpioid2D.ParticleEmitter_fade_in_get, _cOpioid2D.ParticleEmitter_fade_in_set)
    __swig_setmethods__["num_emits"] = _cOpioid2D.ParticleEmitter_num_emits_set
    __swig_getmethods__["num_emits"] = _cOpioid2D.ParticleEmitter_num_emits_get
    if _newclass:num_emits = _swig_property(_cOpioid2D.ParticleEmitter_num_emits_get, _cOpioid2D.ParticleEmitter_num_emits_set)
    __swig_setmethods__["num_particles"] = _cOpioid2D.ParticleEmitter_num_particles_set
    __swig_getmethods__["num_particles"] = _cOpioid2D.ParticleEmitter_num_particles_get
    if _newclass:num_particles = _swig_property(_cOpioid2D.ParticleEmitter_num_particles_get, _cOpioid2D.ParticleEmitter_num_particles_set)
    __swig_setmethods__["emit_delay"] = _cOpioid2D.ParticleEmitter_emit_delay_set
    __swig_getmethods__["emit_delay"] = _cOpioid2D.ParticleEmitter_emit_delay_get
    if _newclass:emit_delay = _swig_property(_cOpioid2D.ParticleEmitter_emit_delay_get, _cOpioid2D.ParticleEmitter_emit_delay_set)
    __swig_setmethods__["emits_per_sec"] = _cOpioid2D.ParticleEmitter_emits_per_sec_set
    __swig_getmethods__["emits_per_sec"] = _cOpioid2D.ParticleEmitter_emits_per_sec_get
    if _newclass:emits_per_sec = _swig_property(_cOpioid2D.ParticleEmitter_emits_per_sec_get, _cOpioid2D.ParticleEmitter_emits_per_sec_set)
    __swig_setmethods__["duration"] = _cOpioid2D.ParticleEmitter_duration_set
    __swig_getmethods__["duration"] = _cOpioid2D.ParticleEmitter_duration_get
    if _newclass:duration = _swig_property(_cOpioid2D.ParticleEmitter_duration_get, _cOpioid2D.ParticleEmitter_duration_set)
    __swig_setmethods__["node_velocity"] = _cOpioid2D.ParticleEmitter_node_velocity_set
    __swig_getmethods__["node_velocity"] = _cOpioid2D.ParticleEmitter_node_velocity_get
    if _newclass:node_velocity = _swig_property(_cOpioid2D.ParticleEmitter_node_velocity_get, _cOpioid2D.ParticleEmitter_node_velocity_set)
    __swig_setmethods__["align_to_direction"] = _cOpioid2D.ParticleEmitter_align_to_direction_set
    __swig_getmethods__["align_to_direction"] = _cOpioid2D.ParticleEmitter_align_to_direction_get
    if _newclass:align_to_direction = _swig_property(_cOpioid2D.ParticleEmitter_align_to_direction_get, _cOpioid2D.ParticleEmitter_align_to_direction_set)
    __swig_setmethods__["align_to_node"] = _cOpioid2D.ParticleEmitter_align_to_node_set
    __swig_getmethods__["align_to_node"] = _cOpioid2D.ParticleEmitter_align_to_node_get
    if _newclass:align_to_node = _swig_property(_cOpioid2D.ParticleEmitter_align_to_node_get, _cOpioid2D.ParticleEmitter_align_to_node_set)
    __swig_setmethods__["rotate_to_node"] = _cOpioid2D.ParticleEmitter_rotate_to_node_set
    __swig_getmethods__["rotate_to_node"] = _cOpioid2D.ParticleEmitter_rotate_to_node_get
    if _newclass:rotate_to_node = _swig_property(_cOpioid2D.ParticleEmitter_rotate_to_node_get, _cOpioid2D.ParticleEmitter_rotate_to_node_set)
ParticleEmitter_swigregister = _cOpioid2D.ParticleEmitter_swigregister
ParticleEmitter_swigregister(ParticleEmitter)

class ConstParameter(EmitterParameter):
    __swig_setmethods__ = {}
    for _s in [EmitterParameter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [EmitterParameter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstParameter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_ConstParameter(*args)
        try: self.this.append(this)
        except: self.this = this
    def Evaluate(self): return _cOpioid2D.ConstParameter_Evaluate(self)
    __swig_destroy__ = _cOpioid2D.delete_ConstParameter
    __del__ = lambda self : None;
ConstParameter_swigregister = _cOpioid2D.ConstParameter_swigregister
ConstParameter_swigregister(ConstParameter)

class RandomParameter(EmitterParameter):
    __swig_setmethods__ = {}
    for _s in [EmitterParameter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RandomParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [EmitterParameter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RandomParameter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_RandomParameter(*args)
        try: self.this.append(this)
        except: self.this = this
    def Evaluate(self): return _cOpioid2D.RandomParameter_Evaluate(self)
    __swig_destroy__ = _cOpioid2D.delete_RandomParameter
    __del__ = lambda self : None;
RandomParameter_swigregister = _cOpioid2D.RandomParameter_swigregister
RandomParameter_swigregister(RandomParameter)

class LinearParameter(EmitterParameter):
    __swig_setmethods__ = {}
    for _s in [EmitterParameter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [EmitterParameter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearParameter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Evaluate(self): return _cOpioid2D.LinearParameter_Evaluate(self)
    __swig_destroy__ = _cOpioid2D.delete_LinearParameter
    __del__ = lambda self : None;
LinearParameter_swigregister = _cOpioid2D.LinearParameter_swigregister
LinearParameter_swigregister(LinearParameter)

class SineParameter(EmitterParameter):
    __swig_setmethods__ = {}
    for _s in [EmitterParameter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SineParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [EmitterParameter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SineParameter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Evaluate(self): return _cOpioid2D.SineParameter_Evaluate(self)
    __swig_destroy__ = _cOpioid2D.delete_SineParameter
    __del__ = lambda self : None;
SineParameter_swigregister = _cOpioid2D.SineParameter_swigregister
SineParameter_swigregister(SineParameter)

class SceneCallbacks(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SceneCallbacks, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SceneCallbacks, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == SceneCallbacks:
            _self = None
        else:
            _self = self
        this = _cOpioid2D.new_SceneCallbacks(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_SceneCallbacks
    __del__ = lambda self : None;
    def OnCollision(self, *args): return _cOpioid2D.SceneCallbacks_OnCollision(self, *args)
    def __disown__(self):
        self.this.disown()
        _cOpioid2D.disown_SceneCallbacks(self)
        return weakref_proxy(self)
SceneCallbacks_swigregister = _cOpioid2D.SceneCallbacks_swigregister
SceneCallbacks_swigregister(SceneCallbacks)

class Camera(Node):
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Camera, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Camera, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def ScreenToWorld(self, *args): return _cOpioid2D.Camera_ScreenToWorld(self, *args)
    def SetAlign(self, *args): return _cOpioid2D.Camera_SetAlign(self, *args)
    def GetAlign(self): return _cOpioid2D.Camera_GetAlign(self)
    __swig_destroy__ = _cOpioid2D.delete_Camera
    __del__ = lambda self : None;
Camera_swigregister = _cOpioid2D.Camera_swigregister
Camera_swigregister(Camera)

class Light(Identified):
    __swig_setmethods__ = {}
    for _s in [Identified]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Light, name, value)
    __swig_getmethods__ = {}
    for _s in [Identified]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Light, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cOpioid2D.new_Light()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["color"] = _cOpioid2D.Light_color_set
    __swig_getmethods__["color"] = _cOpioid2D.Light_color_get
    if _newclass:color = _swig_property(_cOpioid2D.Light_color_get, _cOpioid2D.Light_color_set)
    __swig_setmethods__["intensity"] = _cOpioid2D.Light_intensity_set
    __swig_getmethods__["intensity"] = _cOpioid2D.Light_intensity_get
    if _newclass:intensity = _swig_property(_cOpioid2D.Light_intensity_get, _cOpioid2D.Light_intensity_set)
    __swig_setmethods__["cutoff"] = _cOpioid2D.Light_cutoff_set
    __swig_getmethods__["cutoff"] = _cOpioid2D.Light_cutoff_get
    if _newclass:cutoff = _swig_property(_cOpioid2D.Light_cutoff_get, _cOpioid2D.Light_cutoff_set)
    __swig_setmethods__["pos"] = _cOpioid2D.Light_pos_set
    __swig_getmethods__["pos"] = _cOpioid2D.Light_pos_get
    if _newclass:pos = _swig_property(_cOpioid2D.Light_pos_get, _cOpioid2D.Light_pos_set)
    __swig_setmethods__["node"] = _cOpioid2D.Light_node_set
    __swig_getmethods__["node"] = _cOpioid2D.Light_node_get
    if _newclass:node = _swig_property(_cOpioid2D.Light_node_get, _cOpioid2D.Light_node_set)
    __swig_setmethods__["worldpos"] = _cOpioid2D.Light_worldpos_set
    __swig_getmethods__["worldpos"] = _cOpioid2D.Light_worldpos_get
    if _newclass:worldpos = _swig_property(_cOpioid2D.Light_worldpos_get, _cOpioid2D.Light_worldpos_set)
    __swig_setmethods__["pos_update_tick"] = _cOpioid2D.Light_pos_update_tick_set
    __swig_getmethods__["pos_update_tick"] = _cOpioid2D.Light_pos_update_tick_get
    if _newclass:pos_update_tick = _swig_property(_cOpioid2D.Light_pos_update_tick_get, _cOpioid2D.Light_pos_update_tick_set)
    __swig_destroy__ = _cOpioid2D.delete_Light
    __del__ = lambda self : None;
Light_swigregister = _cOpioid2D.Light_swigregister
Light_swigregister(Light)

class RenderingPass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderingPass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RenderingPass, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cOpioid2D.new_RenderingPass()
        try: self.this.append(this)
        except: self.this = this
    def SetSrcFunc(self, *args): return _cOpioid2D.RenderingPass_SetSrcFunc(self, *args)
    def SetDstFunc(self, *args): return _cOpioid2D.RenderingPass_SetDstFunc(self, *args)
    __swig_destroy__ = _cOpioid2D.delete_RenderingPass
    __del__ = lambda self : None;
RenderingPass_swigregister = _cOpioid2D.RenderingPass_swigregister
RenderingPass_swigregister(RenderingPass)

class Layer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Layer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_Layer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_Layer
    __del__ = lambda self : None;
    def GetName(self): return _cOpioid2D.Layer_GetName(self)
    def Render(self): return _cOpioid2D.Layer_Render(self)
    def SetFreeForm(self, *args): return _cOpioid2D.Layer_SetFreeForm(self, *args)
    def AddNode(self, *args): return _cOpioid2D.Layer_AddNode(self, *args)
    def RemoveNode(self, *args): return _cOpioid2D.Layer_RemoveNode(self, *args)
    def Pick(self, *args): return _cOpioid2D.Layer_Pick(self, *args)
    def AddRenderingPass(self, *args): return _cOpioid2D.Layer_AddRenderingPass(self, *args)
    def ResetRenderingPasses(self): return _cOpioid2D.Layer_ResetRenderingPasses(self)
    def SendNodeToTop(self, *args): return _cOpioid2D.Layer_SendNodeToTop(self, *args)
    def SendNodeToBottom(self, *args): return _cOpioid2D.Layer_SendNodeToBottom(self, *args)
    def GetNodes(self): return _cOpioid2D.Layer_GetNodes(self)
    def SetNodes(self, *args): return _cOpioid2D.Layer_SetNodes(self, *args)
    __swig_setmethods__["camera_offset"] = _cOpioid2D.Layer_camera_offset_set
    __swig_getmethods__["camera_offset"] = _cOpioid2D.Layer_camera_offset_get
    if _newclass:camera_offset = _swig_property(_cOpioid2D.Layer_camera_offset_get, _cOpioid2D.Layer_camera_offset_set)
    __swig_setmethods__["camera_rotation"] = _cOpioid2D.Layer_camera_rotation_set
    __swig_getmethods__["camera_rotation"] = _cOpioid2D.Layer_camera_rotation_get
    if _newclass:camera_rotation = _swig_property(_cOpioid2D.Layer_camera_rotation_get, _cOpioid2D.Layer_camera_rotation_set)
    __swig_setmethods__["camera_zoom"] = _cOpioid2D.Layer_camera_zoom_set
    __swig_getmethods__["camera_zoom"] = _cOpioid2D.Layer_camera_zoom_get
    if _newclass:camera_zoom = _swig_property(_cOpioid2D.Layer_camera_zoom_get, _cOpioid2D.Layer_camera_zoom_set)
    __swig_setmethods__["ignore_camera"] = _cOpioid2D.Layer_ignore_camera_set
    __swig_getmethods__["ignore_camera"] = _cOpioid2D.Layer_ignore_camera_get
    if _newclass:ignore_camera = _swig_property(_cOpioid2D.Layer_ignore_camera_get, _cOpioid2D.Layer_ignore_camera_set)
Layer_swigregister = _cOpioid2D.Layer_swigregister
Layer_swigregister(Layer)

class Scene(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scene, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Scene, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cOpioid2D.new_Scene()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_Scene
    __del__ = lambda self : None;
    def SetCallbacks(self, *args): return _cOpioid2D.Scene_SetCallbacks(self, *args)
    def GetCallbacks(self): return _cOpioid2D.Scene_GetCallbacks(self)
    def GetGroup(self, *args): return _cOpioid2D.Scene_GetGroup(self, *args)
    def CreateGroup(self, *args): return _cOpioid2D.Scene_CreateGroup(self, *args)
    def EnableCollisions(self, *args): return _cOpioid2D.Scene_EnableCollisions(self, *args)
    def Tick(self): return _cOpioid2D.Scene_Tick(self)
    def RealTick(self): return _cOpioid2D.Scene_RealTick(self)
    def Render(self): return _cOpioid2D.Scene_Render(self)
    def AddLayer(self, *args): return _cOpioid2D.Scene_AddLayer(self, *args)
    def DeleteLayer(self, *args): return _cOpioid2D.Scene_DeleteLayer(self, *args)
    def GetLayers(self): return _cOpioid2D.Scene_GetLayers(self)
    def SetLayers(self, *args): return _cOpioid2D.Scene_SetLayers(self, *args)
    def GetLayer(self, *args): return _cOpioid2D.Scene_GetLayer(self, *args)
    def GetCamera(self): return _cOpioid2D.Scene_GetCamera(self)
    def AddLight(self, *args): return _cOpioid2D.Scene_AddLight(self, *args)
    def RemoveLight(self, *args): return _cOpioid2D.Scene_RemoveLight(self, *args)
    def SetAmbientLight(self, *args): return _cOpioid2D.Scene_SetAmbientLight(self, *args)
Scene_swigregister = _cOpioid2D.Scene_swigregister
Scene_swigregister(Scene)

class SpriteGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpriteGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpriteGroup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_SpriteGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_SpriteGroup
    __del__ = lambda self : None;
    def AddMutator(self, *args): return _cOpioid2D.SpriteGroup_AddMutator(self, *args)
    def Pick(self, *args): return _cOpioid2D.SpriteGroup_Pick(self, *args)
    def GetSize(self): return _cOpioid2D.SpriteGroup_GetSize(self)
    def ListSprites(self): return _cOpioid2D.SpriteGroup_ListSprites(self)
SpriteGroup_swigregister = _cOpioid2D.SpriteGroup_swigregister
SpriteGroup_swigregister(SpriteGroup)

class Sprite(Node):
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sprite, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sprite, name)
    __repr__ = _swig_repr
    def __init__(self, image = None): 
        this = _cOpioid2D.new_Sprite(image)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_Sprite
    __del__ = lambda self : None;
    def ReUse(self): return _cOpioid2D.Sprite_ReUse(self)
    def JoinGroup(self, *args): return _cOpioid2D.Sprite_JoinGroup(self, *args)
    def LeaveGroup(self, *args): return _cOpioid2D.Sprite_LeaveGroup(self, *args)
    def SetImage(self, *args): return _cOpioid2D.Sprite_SetImage(self, *args)
    def EnableLighting(self, *args): return _cOpioid2D.Sprite_EnableLighting(self, *args)
    def PickSelf(self, *args): return _cOpioid2D.Sprite_PickSelf(self, *args)
Sprite_swigregister = _cOpioid2D.Sprite_swigregister
Sprite_swigregister(Sprite)

class Area(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Area, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Area, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def contains(self, *args): return _cOpioid2D.Area_contains(self, *args)
    __swig_destroy__ = _cOpioid2D.delete_Area
    __del__ = lambda self : None;
Area_swigregister = _cOpioid2D.Area_swigregister
Area_swigregister(Area)

class RectArea(Area):
    __swig_setmethods__ = {}
    for _s in [Area]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RectArea, name, value)
    __swig_getmethods__ = {}
    for _s in [Area]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RectArea, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _cOpioid2D.RectArea_x_set
    __swig_getmethods__["x"] = _cOpioid2D.RectArea_x_get
    if _newclass:x = _swig_property(_cOpioid2D.RectArea_x_get, _cOpioid2D.RectArea_x_set)
    __swig_setmethods__["y"] = _cOpioid2D.RectArea_y_set
    __swig_getmethods__["y"] = _cOpioid2D.RectArea_y_get
    if _newclass:y = _swig_property(_cOpioid2D.RectArea_y_get, _cOpioid2D.RectArea_y_set)
    __swig_setmethods__["xx"] = _cOpioid2D.RectArea_xx_set
    __swig_getmethods__["xx"] = _cOpioid2D.RectArea_xx_get
    if _newclass:xx = _swig_property(_cOpioid2D.RectArea_xx_get, _cOpioid2D.RectArea_xx_set)
    __swig_setmethods__["yy"] = _cOpioid2D.RectArea_yy_set
    __swig_getmethods__["yy"] = _cOpioid2D.RectArea_yy_get
    if _newclass:yy = _swig_property(_cOpioid2D.RectArea_yy_get, _cOpioid2D.RectArea_yy_set)
    def __init__(self, *args): 
        this = _cOpioid2D.new_RectArea(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args): return _cOpioid2D.RectArea_set(self, *args)
    def contains(self, *args): return _cOpioid2D.RectArea_contains(self, *args)
    __swig_destroy__ = _cOpioid2D.delete_RectArea
    __del__ = lambda self : None;
RectArea_swigregister = _cOpioid2D.RectArea_swigregister
RectArea_swigregister(RectArea)

class CircleArea(Area):
    __swig_setmethods__ = {}
    for _s in [Area]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CircleArea, name, value)
    __swig_getmethods__ = {}
    for _s in [Area]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CircleArea, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _cOpioid2D.CircleArea_x_set
    __swig_getmethods__["x"] = _cOpioid2D.CircleArea_x_get
    if _newclass:x = _swig_property(_cOpioid2D.CircleArea_x_get, _cOpioid2D.CircleArea_x_set)
    __swig_setmethods__["y"] = _cOpioid2D.CircleArea_y_set
    __swig_getmethods__["y"] = _cOpioid2D.CircleArea_y_get
    if _newclass:y = _swig_property(_cOpioid2D.CircleArea_y_get, _cOpioid2D.CircleArea_y_set)
    __swig_setmethods__["radius"] = _cOpioid2D.CircleArea_radius_set
    __swig_getmethods__["radius"] = _cOpioid2D.CircleArea_radius_get
    if _newclass:radius = _swig_property(_cOpioid2D.CircleArea_radius_get, _cOpioid2D.CircleArea_radius_set)
    def __init__(self, *args): 
        this = _cOpioid2D.new_CircleArea(*args)
        try: self.this.append(this)
        except: self.this = this
    def contains(self, *args): return _cOpioid2D.CircleArea_contains(self, *args)
    __swig_destroy__ = _cOpioid2D.delete_CircleArea
    __del__ = lambda self : None;
CircleArea_swigregister = _cOpioid2D.CircleArea_swigregister
CircleArea_swigregister(CircleArea)

class ArcArea(Area):
    __swig_setmethods__ = {}
    for _s in [Area]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArcArea, name, value)
    __swig_getmethods__ = {}
    for _s in [Area]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArcArea, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _cOpioid2D.ArcArea_x_set
    __swig_getmethods__["x"] = _cOpioid2D.ArcArea_x_get
    if _newclass:x = _swig_property(_cOpioid2D.ArcArea_x_get, _cOpioid2D.ArcArea_x_set)
    __swig_setmethods__["y"] = _cOpioid2D.ArcArea_y_set
    __swig_getmethods__["y"] = _cOpioid2D.ArcArea_y_get
    if _newclass:y = _swig_property(_cOpioid2D.ArcArea_y_get, _cOpioid2D.ArcArea_y_set)
    __swig_setmethods__["radius"] = _cOpioid2D.ArcArea_radius_set
    __swig_getmethods__["radius"] = _cOpioid2D.ArcArea_radius_get
    if _newclass:radius = _swig_property(_cOpioid2D.ArcArea_radius_get, _cOpioid2D.ArcArea_radius_set)
    __swig_setmethods__["direction"] = _cOpioid2D.ArcArea_direction_set
    __swig_getmethods__["direction"] = _cOpioid2D.ArcArea_direction_get
    if _newclass:direction = _swig_property(_cOpioid2D.ArcArea_direction_get, _cOpioid2D.ArcArea_direction_set)
    __swig_setmethods__["arc"] = _cOpioid2D.ArcArea_arc_set
    __swig_getmethods__["arc"] = _cOpioid2D.ArcArea_arc_get
    if _newclass:arc = _swig_property(_cOpioid2D.ArcArea_arc_get, _cOpioid2D.ArcArea_arc_set)
    def contains(self, *args): return _cOpioid2D.ArcArea_contains(self, *args)
    __swig_destroy__ = _cOpioid2D.delete_ArcArea
    __del__ = lambda self : None;
ArcArea_swigregister = _cOpioid2D.ArcArea_swigregister
ArcArea_swigregister(ArcArea)

class Mutator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mutator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mutator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cOpioid2D.delete_Mutator
    __del__ = lambda self : None;
Mutator_swigregister = _cOpioid2D.Mutator_swigregister
Mutator_swigregister(Mutator)

class LinearForce(Mutator):
    __swig_setmethods__ = {}
    for _s in [Mutator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Mutator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearForce, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_LinearForce(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_LinearForce
    __del__ = lambda self : None;
LinearForce_swigregister = _cOpioid2D.LinearForce_swigregister
LinearForce_swigregister(LinearForce)

class BounceBox(Mutator):
    __swig_setmethods__ = {}
    for _s in [Mutator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BounceBox, name, value)
    __swig_getmethods__ = {}
    for _s in [Mutator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BounceBox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_BounceBox(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetMultipliers(self, *args): return _cOpioid2D.BounceBox_SetMultipliers(self, *args)
    __swig_destroy__ = _cOpioid2D.delete_BounceBox
    __del__ = lambda self : None;
BounceBox_swigregister = _cOpioid2D.BounceBox_swigregister
BounceBox_swigregister(BounceBox)

class Zone(Mutator):
    __swig_setmethods__ = {}
    for _s in [Mutator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Zone, name, value)
    __swig_getmethods__ = {}
    for _s in [Mutator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Zone, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_Zone(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_Zone
    __del__ = lambda self : None;
Zone_swigregister = _cOpioid2D.Zone_swigregister
Zone_swigregister(Zone)

class LifeZone(Zone):
    __swig_setmethods__ = {}
    for _s in [Zone]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LifeZone, name, value)
    __swig_getmethods__ = {}
    for _s in [Zone]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LifeZone, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_LifeZone(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_LifeZone
    __del__ = lambda self : None;
LifeZone_swigregister = _cOpioid2D.LifeZone_swigregister
LifeZone_swigregister(LifeZone)

class KillZone(Zone):
    __swig_setmethods__ = {}
    for _s in [Zone]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KillZone, name, value)
    __swig_getmethods__ = {}
    for _s in [Zone]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KillZone, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_KillZone(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_KillZone
    __del__ = lambda self : None;
KillZone_swigregister = _cOpioid2D.KillZone_swigregister
KillZone_swigregister(KillZone)

class DirectorSingleton(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirectorSingleton, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DirectorSingleton, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["GetInstance"] = lambda x: _cOpioid2D.DirectorSingleton_GetInstance
    if _newclass:GetInstance = staticmethod(_cOpioid2D.DirectorSingleton_GetInstance)
    __swig_getmethods__["Init"] = lambda x: _cOpioid2D.DirectorSingleton_Init
    if _newclass:Init = staticmethod(_cOpioid2D.DirectorSingleton_Init)
    __swig_getmethods__["Destroy"] = lambda x: _cOpioid2D.DirectorSingleton_Destroy
    if _newclass:Destroy = staticmethod(_cOpioid2D.DirectorSingleton_Destroy)
    __swig_destroy__ = _cOpioid2D.delete_DirectorSingleton
    __del__ = lambda self : None;
DirectorSingleton_swigregister = _cOpioid2D.DirectorSingleton_swigregister
DirectorSingleton_swigregister(DirectorSingleton)

def DirectorSingleton_GetInstance():
  return _cOpioid2D.DirectorSingleton_GetInstance()
DirectorSingleton_GetInstance = _cOpioid2D.DirectorSingleton_GetInstance

def DirectorSingleton_Init():
  return _cOpioid2D.DirectorSingleton_Init()
DirectorSingleton_Init = _cOpioid2D.DirectorSingleton_Init

def DirectorSingleton_Destroy():
  return _cOpioid2D.DirectorSingleton_Destroy()
DirectorSingleton_Destroy = _cOpioid2D.DirectorSingleton_Destroy

class DisplaySingleton(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisplaySingleton, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DisplaySingleton, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["GetInstance"] = lambda x: _cOpioid2D.DisplaySingleton_GetInstance
    if _newclass:GetInstance = staticmethod(_cOpioid2D.DisplaySingleton_GetInstance)
    __swig_getmethods__["Init"] = lambda x: _cOpioid2D.DisplaySingleton_Init
    if _newclass:Init = staticmethod(_cOpioid2D.DisplaySingleton_Init)
    __swig_getmethods__["Destroy"] = lambda x: _cOpioid2D.DisplaySingleton_Destroy
    if _newclass:Destroy = staticmethod(_cOpioid2D.DisplaySingleton_Destroy)
    __swig_destroy__ = _cOpioid2D.delete_DisplaySingleton
    __del__ = lambda self : None;
DisplaySingleton_swigregister = _cOpioid2D.DisplaySingleton_swigregister
DisplaySingleton_swigregister(DisplaySingleton)

def DisplaySingleton_GetInstance():
  return _cOpioid2D.DisplaySingleton_GetInstance()
DisplaySingleton_GetInstance = _cOpioid2D.DisplaySingleton_GetInstance

def DisplaySingleton_Init():
  return _cOpioid2D.DisplaySingleton_Init()
DisplaySingleton_Init = _cOpioid2D.DisplaySingleton_Init

def DisplaySingleton_Destroy():
  return _cOpioid2D.DisplaySingleton_Destroy()
DisplaySingleton_Destroy = _cOpioid2D.DisplaySingleton_Destroy

class SpriteMapperSingleton(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpriteMapperSingleton, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpriteMapperSingleton, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["GetInstance"] = lambda x: _cOpioid2D.SpriteMapperSingleton_GetInstance
    if _newclass:GetInstance = staticmethod(_cOpioid2D.SpriteMapperSingleton_GetInstance)
    __swig_getmethods__["Init"] = lambda x: _cOpioid2D.SpriteMapperSingleton_Init
    if _newclass:Init = staticmethod(_cOpioid2D.SpriteMapperSingleton_Init)
    __swig_getmethods__["Destroy"] = lambda x: _cOpioid2D.SpriteMapperSingleton_Destroy
    if _newclass:Destroy = staticmethod(_cOpioid2D.SpriteMapperSingleton_Destroy)
    __swig_destroy__ = _cOpioid2D.delete_SpriteMapperSingleton
    __del__ = lambda self : None;
SpriteMapperSingleton_swigregister = _cOpioid2D.SpriteMapperSingleton_swigregister
SpriteMapperSingleton_swigregister(SpriteMapperSingleton)

def SpriteMapperSingleton_GetInstance():
  return _cOpioid2D.SpriteMapperSingleton_GetInstance()
SpriteMapperSingleton_GetInstance = _cOpioid2D.SpriteMapperSingleton_GetInstance

def SpriteMapperSingleton_Init():
  return _cOpioid2D.SpriteMapperSingleton_Init()
SpriteMapperSingleton_Init = _cOpioid2D.SpriteMapperSingleton_Init

def SpriteMapperSingleton_Destroy():
  return _cOpioid2D.SpriteMapperSingleton_Destroy()
SpriteMapperSingleton_Destroy = _cOpioid2D.SpriteMapperSingleton_Destroy

class SpriteMapper(SpriteMapperSingleton):
    __swig_setmethods__ = {}
    for _s in [SpriteMapperSingleton]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpriteMapper, name, value)
    __swig_getmethods__ = {}
    for _s in [SpriteMapperSingleton]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpriteMapper, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cOpioid2D.delete_SpriteMapper
    __del__ = lambda self : None;
SpriteMapper_swigregister = _cOpioid2D.SpriteMapper_swigregister
SpriteMapper_swigregister(SpriteMapper)

class Director(DirectorSingleton):
    __swig_setmethods__ = {}
    for _s in [DirectorSingleton]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Director, name, value)
    __swig_getmethods__ = {}
    for _s in [DirectorSingleton]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Director, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cOpioid2D.delete_Director
    __del__ = lambda self : None;
    def Start(self, *args): return _cOpioid2D.Director_Start(self, *args)
    def Iterate(self, *args): return _cOpioid2D.Director_Iterate(self, *args)
    def RenderFrame(self): return _cOpioid2D.Director_RenderFrame(self)
    def GetTicker(self): return _cOpioid2D.Director_GetTicker(self)
    def SetScene(self, *args): return _cOpioid2D.Director_SetScene(self, *args)
    def GetScene(self): return _cOpioid2D.Director_GetScene(self)
Director_swigregister = _cOpioid2D.Director_swigregister
Director_swigregister(Director)

class Display(DisplaySingleton):
    __swig_setmethods__ = {}
    for _s in [DisplaySingleton]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Display, name, value)
    __swig_getmethods__ = {}
    for _s in [DisplaySingleton]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Display, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Clear(self): return _cOpioid2D.Display_Clear(self)
    def SetClearColor(self, *args): return _cOpioid2D.Display_SetClearColor(self, *args)
    def EnableClearing(self, *args): return _cOpioid2D.Display_EnableClearing(self, *args)
    def InitView(self, *args): return _cOpioid2D.Display_InitView(self, *args)
    __swig_destroy__ = _cOpioid2D.delete_Display
    __del__ = lambda self : None;
Display_swigregister = _cOpioid2D.Display_swigregister
Display_swigregister(Display)


def get_int_size():
  return _cOpioid2D.get_int_size()
get_int_size = _cOpioid2D.get_int_size

def get_float_size():
  return _cOpioid2D.get_float_size()
get_float_size = _cOpioid2D.get_float_size

def get_ptr_size():
  return _cOpioid2D.get_ptr_size()
get_ptr_size = _cOpioid2D.get_ptr_size
class CodeObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CodeObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CodeObj, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cOpioid2D.new_CodeObj()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_CodeObj
    __del__ = lambda self : None;
    __swig_setmethods__["code"] = _cOpioid2D.CodeObj_code_set
    __swig_getmethods__["code"] = _cOpioid2D.CodeObj_code_get
    if _newclass:code = _swig_property(_cOpioid2D.CodeObj_code_get, _cOpioid2D.CodeObj_code_set)
    __swig_setmethods__["concount_f"] = _cOpioid2D.CodeObj_concount_f_set
    __swig_getmethods__["concount_f"] = _cOpioid2D.CodeObj_concount_f_get
    if _newclass:concount_f = _swig_property(_cOpioid2D.CodeObj_concount_f_get, _cOpioid2D.CodeObj_concount_f_set)
    __swig_setmethods__["concount_i"] = _cOpioid2D.CodeObj_concount_i_set
    __swig_getmethods__["concount_i"] = _cOpioid2D.CodeObj_concount_i_get
    if _newclass:concount_i = _swig_property(_cOpioid2D.CodeObj_concount_i_get, _cOpioid2D.CodeObj_concount_i_set)
    __swig_setmethods__["concount_v"] = _cOpioid2D.CodeObj_concount_v_set
    __swig_getmethods__["concount_v"] = _cOpioid2D.CodeObj_concount_v_get
    if _newclass:concount_v = _swig_property(_cOpioid2D.CodeObj_concount_v_get, _cOpioid2D.CodeObj_concount_v_set)
    __swig_setmethods__["concount_p"] = _cOpioid2D.CodeObj_concount_p_set
    __swig_getmethods__["concount_p"] = _cOpioid2D.CodeObj_concount_p_get
    if _newclass:concount_p = _swig_property(_cOpioid2D.CodeObj_concount_p_get, _cOpioid2D.CodeObj_concount_p_set)
    __swig_setmethods__["conarray_f"] = _cOpioid2D.CodeObj_conarray_f_set
    __swig_getmethods__["conarray_f"] = _cOpioid2D.CodeObj_conarray_f_get
    if _newclass:conarray_f = _swig_property(_cOpioid2D.CodeObj_conarray_f_get, _cOpioid2D.CodeObj_conarray_f_set)
    __swig_setmethods__["conarray_i"] = _cOpioid2D.CodeObj_conarray_i_set
    __swig_getmethods__["conarray_i"] = _cOpioid2D.CodeObj_conarray_i_get
    if _newclass:conarray_i = _swig_property(_cOpioid2D.CodeObj_conarray_i_get, _cOpioid2D.CodeObj_conarray_i_set)
    __swig_setmethods__["conarray_v"] = _cOpioid2D.CodeObj_conarray_v_set
    __swig_getmethods__["conarray_v"] = _cOpioid2D.CodeObj_conarray_v_get
    if _newclass:conarray_v = _swig_property(_cOpioid2D.CodeObj_conarray_v_get, _cOpioid2D.CodeObj_conarray_v_set)
    __swig_setmethods__["conarray_p"] = _cOpioid2D.CodeObj_conarray_p_set
    __swig_getmethods__["conarray_p"] = _cOpioid2D.CodeObj_conarray_p_get
    if _newclass:conarray_p = _swig_property(_cOpioid2D.CodeObj_conarray_p_get, _cOpioid2D.CodeObj_conarray_p_set)
    __swig_setmethods__["varcount_f"] = _cOpioid2D.CodeObj_varcount_f_set
    __swig_getmethods__["varcount_f"] = _cOpioid2D.CodeObj_varcount_f_get
    if _newclass:varcount_f = _swig_property(_cOpioid2D.CodeObj_varcount_f_get, _cOpioid2D.CodeObj_varcount_f_set)
    __swig_setmethods__["varcount_i"] = _cOpioid2D.CodeObj_varcount_i_set
    __swig_getmethods__["varcount_i"] = _cOpioid2D.CodeObj_varcount_i_get
    if _newclass:varcount_i = _swig_property(_cOpioid2D.CodeObj_varcount_i_get, _cOpioid2D.CodeObj_varcount_i_set)
    __swig_setmethods__["varcount_v"] = _cOpioid2D.CodeObj_varcount_v_set
    __swig_getmethods__["varcount_v"] = _cOpioid2D.CodeObj_varcount_v_get
    if _newclass:varcount_v = _swig_property(_cOpioid2D.CodeObj_varcount_v_get, _cOpioid2D.CodeObj_varcount_v_set)
    __swig_setmethods__["varcount_p"] = _cOpioid2D.CodeObj_varcount_p_set
    __swig_getmethods__["varcount_p"] = _cOpioid2D.CodeObj_varcount_p_get
    if _newclass:varcount_p = _swig_property(_cOpioid2D.CodeObj_varcount_p_get, _cOpioid2D.CodeObj_varcount_p_set)
    __swig_setmethods__["max_stack"] = _cOpioid2D.CodeObj_max_stack_set
    __swig_getmethods__["max_stack"] = _cOpioid2D.CodeObj_max_stack_get
    if _newclass:max_stack = _swig_property(_cOpioid2D.CodeObj_max_stack_get, _cOpioid2D.CodeObj_max_stack_set)
    def init_code(self, *args): return _cOpioid2D.CodeObj_init_code(self, *args)
    def init_const_f(self, *args): return _cOpioid2D.CodeObj_init_const_f(self, *args)
    def init_const_i(self, *args): return _cOpioid2D.CodeObj_init_const_i(self, *args)
    def init_const_v(self, *args): return _cOpioid2D.CodeObj_init_const_v(self, *args)
    def init_const_p(self, *args): return _cOpioid2D.CodeObj_init_const_p(self, *args)
    def set_const_f(self, *args): return _cOpioid2D.CodeObj_set_const_f(self, *args)
    def set_const_i(self, *args): return _cOpioid2D.CodeObj_set_const_i(self, *args)
    def set_const_v(self, *args): return _cOpioid2D.CodeObj_set_const_v(self, *args)
    def set_const_p(self, *args): return _cOpioid2D.CodeObj_set_const_p(self, *args)
CodeObj_swigregister = _cOpioid2D.CodeObj_swigregister
CodeObj_swigregister(CodeObj)

class ExecFrame(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecFrame, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExecFrame, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cOpioid2D.new_ExecFrame(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cOpioid2D.delete_ExecFrame
    __del__ = lambda self : None;
    __swig_setmethods__["code"] = _cOpioid2D.ExecFrame_code_set
    __swig_getmethods__["code"] = _cOpioid2D.ExecFrame_code_get
    if _newclass:code = _swig_property(_cOpioid2D.ExecFrame_code_get, _cOpioid2D.ExecFrame_code_set)
    __swig_setmethods__["stack"] = _cOpioid2D.ExecFrame_stack_set
    __swig_getmethods__["stack"] = _cOpioid2D.ExecFrame_stack_get
    if _newclass:stack = _swig_property(_cOpioid2D.ExecFrame_stack_get, _cOpioid2D.ExecFrame_stack_set)
    __swig_setmethods__["top"] = _cOpioid2D.ExecFrame_top_set
    __swig_getmethods__["top"] = _cOpioid2D.ExecFrame_top_get
    if _newclass:top = _swig_property(_cOpioid2D.ExecFrame_top_get, _cOpioid2D.ExecFrame_top_set)
    __swig_setmethods__["iptr"] = _cOpioid2D.ExecFrame_iptr_set
    __swig_getmethods__["iptr"] = _cOpioid2D.ExecFrame_iptr_get
    if _newclass:iptr = _swig_property(_cOpioid2D.ExecFrame_iptr_get, _cOpioid2D.ExecFrame_iptr_set)
    __swig_setmethods__["vararray_f"] = _cOpioid2D.ExecFrame_vararray_f_set
    __swig_getmethods__["vararray_f"] = _cOpioid2D.ExecFrame_vararray_f_get
    if _newclass:vararray_f = _swig_property(_cOpioid2D.ExecFrame_vararray_f_get, _cOpioid2D.ExecFrame_vararray_f_set)
    __swig_setmethods__["vararray_i"] = _cOpioid2D.ExecFrame_vararray_i_set
    __swig_getmethods__["vararray_i"] = _cOpioid2D.ExecFrame_vararray_i_get
    if _newclass:vararray_i = _swig_property(_cOpioid2D.ExecFrame_vararray_i_get, _cOpioid2D.ExecFrame_vararray_i_set)
    __swig_setmethods__["vararray_v"] = _cOpioid2D.ExecFrame_vararray_v_set
    __swig_getmethods__["vararray_v"] = _cOpioid2D.ExecFrame_vararray_v_get
    if _newclass:vararray_v = _swig_property(_cOpioid2D.ExecFrame_vararray_v_get, _cOpioid2D.ExecFrame_vararray_v_set)
    __swig_setmethods__["vararray_p"] = _cOpioid2D.ExecFrame_vararray_p_set
    __swig_getmethods__["vararray_p"] = _cOpioid2D.ExecFrame_vararray_p_get
    if _newclass:vararray_p = _swig_property(_cOpioid2D.ExecFrame_vararray_p_get, _cOpioid2D.ExecFrame_vararray_p_set)
    __swig_setmethods__["vectemp"] = _cOpioid2D.ExecFrame_vectemp_set
    __swig_getmethods__["vectemp"] = _cOpioid2D.ExecFrame_vectemp_get
    if _newclass:vectemp = _swig_property(_cOpioid2D.ExecFrame_vectemp_get, _cOpioid2D.ExecFrame_vectemp_set)
    __swig_setmethods__["vecidx"] = _cOpioid2D.ExecFrame_vecidx_set
    __swig_getmethods__["vecidx"] = _cOpioid2D.ExecFrame_vecidx_get
    if _newclass:vecidx = _swig_property(_cOpioid2D.ExecFrame_vecidx_get, _cOpioid2D.ExecFrame_vecidx_set)
    __swig_setmethods__["prev"] = _cOpioid2D.ExecFrame_prev_set
    __swig_getmethods__["prev"] = _cOpioid2D.ExecFrame_prev_get
    if _newclass:prev = _swig_property(_cOpioid2D.ExecFrame_prev_get, _cOpioid2D.ExecFrame_prev_set)
    def restart(self): return _cOpioid2D.ExecFrame_restart(self)
    def execute(self): return _cOpioid2D.ExecFrame_execute(self)
    def popSprite(self): return _cOpioid2D.ExecFrame_popSprite(self)
    def pushf(self, *args): return _cOpioid2D.ExecFrame_pushf(self, *args)
    def pushi(self, *args): return _cOpioid2D.ExecFrame_pushi(self, *args)
    def pushv(self, *args): return _cOpioid2D.ExecFrame_pushv(self, *args)
    def pushp(self, *args): return _cOpioid2D.ExecFrame_pushp(self, *args)
    def popf(self): return _cOpioid2D.ExecFrame_popf(self)
    def popi(self): return _cOpioid2D.ExecFrame_popi(self)
    def popp(self): return _cOpioid2D.ExecFrame_popp(self)
    def popv(self): return _cOpioid2D.ExecFrame_popv(self)
ExecFrame_swigregister = _cOpioid2D.ExecFrame_swigregister
ExecFrame_swigregister(ExecFrame)



