/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_DIRECTORS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *self, PyObject *func)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyInstanceMethod_New(func);
#else
  return NULL;
#endif
}

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(ptr, type, flags)
#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char*) name, obj);
  Py_DECREF(obj);                            
}

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData* data)
{
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", name, v);
  if (v->next) {
#ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
#else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
#endif
#if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
#else
    PyString_ConcatAndDel(&repr,nrep);
#endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_print(SwigPyObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char *str;
#ifdef METH_NOARGS
  PyObject *repr = SwigPyObject_repr(v);
#else
  PyObject *repr = SwigPyObject_repr(v, NULL);
#endif
  if (repr) {
    str = SWIG_Python_str_AsChar(repr); 
    fputs(str, fp);
    SWIG_Python_str_DelForPy3(str);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
SwigPyObject_str(SwigPyObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    SWIG_Python_str_FromChar(result) : 0;
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  if( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) )
    res = Py_True;
  else
    res = Py_False;
  Py_INCREF(res);
  return res;  
}


SWIGRUNTIME PyTypeObject* _PySwigObject_type(void);

SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigObject_type();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
_PySwigObject_type(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;  
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp
      = {
	/* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
	PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else    
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */
#endif
	(char *)"SwigPyObject",		    /* tp_name */
	sizeof(SwigPyObject),		    /* tp_basicsize */
	0,			            /* tp_itemsize */
	(destructor)SwigPyObject_dealloc,   /* tp_dealloc */
	(printfunc)SwigPyObject_print,	    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
	(getattrfunc)SwigPyObject_getattr,  /* tp_getattr */ 
#else
	(getattrfunc)0,			    /* tp_getattr */ 
#endif
	(setattrfunc)0,			    /* tp_setattr */ 
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
	(cmpfunc)SwigPyObject_compare,	    /* tp_compare */
#endif
	(reprfunc)SwigPyObject_repr,	    /* tp_repr */    
	&SwigPyObject_as_number,	    /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)SwigPyObject_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigobject_doc, 	            /* tp_doc */        
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	(richcmpfunc)SwigPyObject_richcompare,           /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	swigobject_methods,		    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0,	                            /* tp_free */	   
	0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    swigpyobject_type = tmp;
    /* for Python 3 we already assigned ob_type in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
    swigpyobject_type.ob_type = &PyType_Type;
#endif
    type_init = 1;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* _PySwigPacked_type(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigPacked_type();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == _PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
_PySwigPacked_type(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;  
  if (!type_init) {
    const PyTypeObject tmp
      = {
    /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
    PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
	PyObject_HEAD_INIT(NULL)
    0,				    /* ob_size */	
#endif
	(char *)"SwigPyPacked",		    /* tp_name */	
	sizeof(SwigPyPacked),		    /* tp_basicsize */	
	0,				    /* tp_itemsize */	
	(destructor)SwigPyPacked_dealloc,   /* tp_dealloc */	
	(printfunc)SwigPyPacked_print,	    /* tp_print */   	
	(getattrfunc)0,			    /* tp_getattr */ 	
	(setattrfunc)0,			    /* tp_setattr */ 	
#if PY_VERSION_HEX>=0x03000000
    0, /* tp_reserved in 3.0.1 */
#else
    (cmpfunc)SwigPyPacked_compare,	    /* tp_compare */
#endif
	(reprfunc)SwigPyPacked_repr,	    /* tp_repr */
	0,	                            /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)SwigPyPacked_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigpacked_doc, 	            /* tp_doc */
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	0,		                    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0, 	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    swigpypacked_type = tmp;
    /* for Python 3 the ob_type already assigned in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
    swigpypacked_type.ob_type = &PyType_Type;
#endif
    type_init = 1;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  if (SwigPyObject_Check(pyobj)) {
    return (SwigPyObject *) pyobj;
  } else {
    PyObject *obj = 0;
#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
    if (PyInstance_Check(pyobj)) {
      obj = _PyInstance_Lookup(pyobj, SWIG_This());      
    } else {
      PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
      } else {
#ifdef PyWeakref_CheckProxy
	if (PyWeakref_CheckProxy(pyobj)) {
	  PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	  return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
	}
#endif
	obj = PyObject_GetAttr(pyobj,SWIG_This());
	if (obj) {
	  Py_DECREF(obj);
	} else {
	  if (PyErr_Occurred()) PyErr_Clear();
	  return 0;
	}
      }
    }
#else
    obj = PyObject_GetAttr(pyobj,SWIG_This());
    if (obj) {
      Py_DECREF(obj);
    } else {
      if (PyErr_Occurred()) PyErr_Clear();
      return 0;
    }
#endif
    if (obj && !SwigPyObject_Check(obj)) {
      /* a PyObject is called 'this', try to get the 'real this'
	 SwigPyObject from it */ 
      return SWIG_Python_GetSwigThis(obj);
    }
    return (SwigPyObject *)obj;
  }
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  if (!obj) return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr) *ptr = 0;
    return SWIG_OK;
  } else {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (own)
      *own = 0;
    while (sobj) {
      void *vptr = sobj->ptr;
      if (ty) {
	swig_type_info *to = sobj->ty;
	if (to == ty) {
	  /* no type cast needed */
	  if (ptr) *ptr = vptr;
	  break;
	} else {
	  swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
	  if (!tc) {
	    sobj = (SwigPyObject *)sobj->next;
	  } else {
	    if (ptr) {
              int newmemory = 0;
              *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
              if (newmemory == SWIG_CAST_NEW_MEMORY) {
                assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
                if (own)
                  *own = *own | SWIG_CAST_NEW_MEMORY;
              }
            }
	    break;
	  }
	}
      } else {
	if (ptr) *ptr = vptr;
	break;
      }
    }
    if (sobj) {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
	sobj->own = 0;
      }
      return SWIG_OK;
    } else {
      int res = SWIG_ERROR;
      if (flags & SWIG_POINTER_IMPLICIT_CONV) {
	SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
	if (data && !data->implicitconv) {
	  PyObject *klass = data->klass;
	  if (klass) {
	    PyObject *impconv;
	    data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
	    impconv = SWIG_Python_CallFunctor(klass, obj);
	    data->implicitconv = 0;
	    if (PyErr_Occurred()) {
	      PyErr_Clear();
	      impconv = 0;
	    }
	    if (impconv) {
	      SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
	      if (iobj) {
		void *vptr;
		res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
		if (SWIG_IsOK(res)) {
		  if (ptr) {
		    *ptr = vptr;
		    /* transfer the ownership to 'ptr' */
		    iobj->own = 0;
		    res = SWIG_AddCast(res);
		    res = SWIG_AddNewMask(res);
		  } else {
		    res = SWIG_AddCast(res);		    
		  }
		}
	      }
	      Py_DECREF(impconv);
	    }
	  }
	}
      }
      return res;
    }
  }
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    PyObject_SetAttr(inst, SWIG_This(), swig_this);
    Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
#else
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  if (!ptr) {
    return SWIG_Py_Void();
  } else {
    int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
    PyObject *robj = SwigPyObject_New(ptr, type, own);
    SwigPyClientData *clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
    if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
      PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
      if (inst) {
	Py_DECREF(robj);
	robj = inst;
      }
    }
    return robj;
  }
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
SWIG_Python_DestroyModule(void *vptr)
{
  swig_module_info *swig_module = (swig_module_info *) vptr;
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}


#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Python extensions.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#ifdef __cplusplus

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swift
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/* 
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR
#include <map>

namespace Swig {
  class Director;
  SWIGINTERN std::map<void*,Director*>& get_rtdir_map() {
    static std::map<void*,Director*> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void*,Director*>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void*>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void*>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {  

  /* memory handler */
  struct GCItem 
  {
    virtual ~GCItem() {}

    virtual int get_own() const
    {
      return 0;
    }
  };

  struct GCItem_var
  {
    GCItem_var(GCItem *item = 0) : _item(item)
    {
    }

    GCItem_var& operator=(GCItem *item)
    {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() 
    {
      delete _item;
    }
    
    GCItem * operator->() const
    {
      return _item;
    }
    
  private:
    GCItem *_item;
  };
  
  struct GCItem_Object : GCItem
  {
    GCItem_Object(int own) : _own(own)
    {
    }
    
    virtual ~GCItem_Object() 
    {
    }

    int get_own() const
    {
      return _own;
    }
    
  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem
  {
    GCItem_T(Type *ptr) : _ptr(ptr)
    {
    }
    
    virtual ~GCItem_T() 
    {
      delete _ptr;
    }
    
  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem
  {
    GCArray_T(Type *ptr) : _ptr(ptr)
    {
    }
    
    virtual ~GCArray_T() 
    {
      delete[] _ptr;
    }
    
  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char* hdr ="", const char* msg ="") 
      : swig_msg(hdr)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
      if (strlen(msg)) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, getMessage());
      }
      SWIG_PYTHON_THREAD_END_BLOCK; 
    }

    const char *getMessage() const
    { 
      return swig_msg.c_str(); 
    }

    static void raise(PyObject *error, const char *msg) 
    {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) 
    {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* unknown exception handler  */
  class UnknownExceptionHandler 
  {
#ifdef SWIG_DIRECTOR_UEH
    static void handler()  {
      try {
        throw;
      } catch (DirectorException& e) {
        std::cerr << "SWIG Director exception caught:" << std::endl
                  << e.getMessage() << std::endl;
      } catch (std::exception& e) {
        std::cerr << "std::exception caught: "<< e.what() << std::endl;
      } catch (...) {
        std::cerr << "Unknown exception caught." << std::endl;
      }
      
      std::cerr << std::endl
                << "Python interpreter traceback:" << std::endl;
      PyErr_Print();
      std::cerr << std::endl;
      
      std::cerr << "This exception was caught by the SWIG unexpected exception handler." << std::endl
                << "Try using %feature(\"director:except\") to avoid reaching this point." << std::endl
                << std::endl
                << "Exception is being re-thrown, program will like abort/terminate." << std::endl;
      throw;
    }

  public:
    
    std::unexpected_handler old;
    UnknownExceptionHandler(std::unexpected_handler nh = handler)
    {
      old = std::set_unexpected(nh);
    }

    ~UnknownExceptionHandler()
    {
      std::set_unexpected(old);
    }
#endif
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public Swig::DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char* msg="") 
      : Swig::DirectorException(error, "SWIG director type mismatch", msg)
    {
    }

    DirectorTypeMismatchException(const char* msg="") 
      : Swig::DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg)
    {
    }

    static void raise(PyObject *error, const char *msg)
    {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg)
    {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public Swig::DirectorException {
  public:
    DirectorMethodException(const char* msg = "") 
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg)
    {
    }    

    static void raise(const char *msg)
    {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public Swig::DirectorException
  {
  public:
    DirectorPureVirtualException(const char* msg = "") 
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg)
    { 
    }

    static void raise(const char *msg) 
    {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
# include "pythread.h"
  class Guard
  {
    PyThread_type_lock & mutex_;
    
  public:
    Guard(PyThread_type_lock & mutex) : mutex_(mutex)
    {
      PyThread_acquire_lock(mutex_, WAIT_LOCK);
    }
    
    ~Guard()
    {
      PyThread_release_lock(mutex_);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex) 
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject* swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const { 
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
        Py_DECREF(swig_self); 
        SWIG_PYTHON_THREAD_END_BLOCK; 
      }
    }

  public:
    /* wrap a python object, optionally taking ownership */
    Director(PyObject* self) : swig_self(self), swig_disown_flag(false) {
      swig_incref();
    }


    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref(); 
    }


    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const { 
      return swig_self; 
    }

    /* acquire ownership of the wrapped python object (the sense of "disown"
     * is from python) */
    void swig_disown() const { 
      if (!swig_disown_flag) { 
        swig_disown_flag=true;
        swig_incref(); 
      } 
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const { 
      if (swig_disown_flag) {
        Py_INCREF(swig_self); 
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char* /* protected_method_name */) const {
      return true;
    }
    
    virtual void swig_set_inner(const char* /* protected_method_name */, bool /* val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void*, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __THREAD__
    static PyThread_type_lock swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr)  const
    {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }
    
    template <typename Type>
    void swig_acquire_ownership(Type *vptr)  const
    {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const
    {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }
    
    int swig_release_ownership(void *vptr) const
    {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }
  };

#ifdef __THREAD__
  PyThread_type_lock Director::swig_mutex_own = PyThread_allocate_lock();
#endif
}

#endif /* __cplusplus */


#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_allocator_type swig_types[0]
#define SWIGTYPE_p_char swig_types[1]
#define SWIGTYPE_p_const_reference swig_types[2]
#define SWIGTYPE_p_difference_type swig_types[3]
#define SWIGTYPE_p_float swig_types[4]
#define SWIGTYPE_p_int swig_types[5]
#define SWIGTYPE_p_opi2d__Action swig_types[6]
#define SWIGTYPE_p_opi2d__ActionCallbacks swig_types[7]
#define SWIGTYPE_p_opi2d__AlphaFade swig_types[8]
#define SWIGTYPE_p_opi2d__Animate swig_types[9]
#define SWIGTYPE_p_opi2d__ArcArea swig_types[10]
#define SWIGTYPE_p_opi2d__Area swig_types[11]
#define SWIGTYPE_p_opi2d__BounceBox swig_types[12]
#define SWIGTYPE_p_opi2d__Camera swig_types[13]
#define SWIGTYPE_p_opi2d__CircleArea swig_types[14]
#define SWIGTYPE_p_opi2d__CodeObj swig_types[15]
#define SWIGTYPE_p_opi2d__Color swig_types[16]
#define SWIGTYPE_p_opi2d__ColorFade swig_types[17]
#define SWIGTYPE_p_opi2d__ConstParameter swig_types[18]
#define SWIGTYPE_p_opi2d__Delay swig_types[19]
#define SWIGTYPE_p_opi2d__DeleteCallback swig_types[20]
#define SWIGTYPE_p_opi2d__Director swig_types[21]
#define SWIGTYPE_p_opi2d__Display swig_types[22]
#define SWIGTYPE_p_opi2d__EmitterParameter swig_types[23]
#define SWIGTYPE_p_opi2d__ExecFrame swig_types[24]
#define SWIGTYPE_p_opi2d__FollowPath swig_types[25]
#define SWIGTYPE_p_opi2d__FreeRect swig_types[26]
#define SWIGTYPE_p_opi2d__GridImage swig_types[27]
#define SWIGTYPE_p_opi2d__Identified swig_types[28]
#define SWIGTYPE_p_opi2d__Image swig_types[29]
#define SWIGTYPE_p_opi2d__IntervalAction swig_types[30]
#define SWIGTYPE_p_opi2d__KeepFacing swig_types[31]
#define SWIGTYPE_p_opi2d__KillZone swig_types[32]
#define SWIGTYPE_p_opi2d__Layer swig_types[33]
#define SWIGTYPE_p_opi2d__LifeZone swig_types[34]
#define SWIGTYPE_p_opi2d__Light swig_types[35]
#define SWIGTYPE_p_opi2d__LinearForce swig_types[36]
#define SWIGTYPE_p_opi2d__LinearParameter swig_types[37]
#define SWIGTYPE_p_opi2d__Mat9 swig_types[38]
#define SWIGTYPE_p_opi2d__Move swig_types[39]
#define SWIGTYPE_p_opi2d__MoveDelta swig_types[40]
#define SWIGTYPE_p_opi2d__MoveTo swig_types[41]
#define SWIGTYPE_p_opi2d__Mutator swig_types[42]
#define SWIGTYPE_p_opi2d__Node swig_types[43]
#define SWIGTYPE_p_opi2d__OrbitAround swig_types[44]
#define SWIGTYPE_p_opi2d__Particle swig_types[45]
#define SWIGTYPE_p_opi2d__ParticleEmitter swig_types[46]
#define SWIGTYPE_p_opi2d__ParticleSystem swig_types[47]
#define SWIGTYPE_p_opi2d__Physics swig_types[48]
#define SWIGTYPE_p_opi2d__RandomParameter swig_types[49]
#define SWIGTYPE_p_opi2d__Rect swig_types[50]
#define SWIGTYPE_p_opi2d__RectArea swig_types[51]
#define SWIGTYPE_p_opi2d__RenderingPass swig_types[52]
#define SWIGTYPE_p_opi2d__Rotate swig_types[53]
#define SWIGTYPE_p_opi2d__RotateDelta swig_types[54]
#define SWIGTYPE_p_opi2d__Scale swig_types[55]
#define SWIGTYPE_p_opi2d__ScaleTo swig_types[56]
#define SWIGTYPE_p_opi2d__Scene swig_types[57]
#define SWIGTYPE_p_opi2d__SceneCallbacks swig_types[58]
#define SWIGTYPE_p_opi2d__SineParameter swig_types[59]
#define SWIGTYPE_p_opi2d__SingletonT_opi2d__Director_t swig_types[60]
#define SWIGTYPE_p_opi2d__SingletonT_opi2d__Display_t swig_types[61]
#define SWIGTYPE_p_opi2d__SingletonT_opi2d__SpriteMapper_t swig_types[62]
#define SWIGTYPE_p_opi2d__Sprite swig_types[63]
#define SWIGTYPE_p_opi2d__SpriteGroup swig_types[64]
#define SWIGTYPE_p_opi2d__SpriteMapper swig_types[65]
#define SWIGTYPE_p_opi2d__Texture swig_types[66]
#define SWIGTYPE_p_opi2d__TickFunc swig_types[67]
#define SWIGTYPE_p_opi2d__Ticker swig_types[68]
#define SWIGTYPE_p_opi2d__Vec2 swig_types[69]
#define SWIGTYPE_p_opi2d__Zone swig_types[70]
#define SWIGTYPE_p_p_PyObject swig_types[71]
#define SWIGTYPE_p_p_void swig_types[72]
#define SWIGTYPE_p_reference swig_types[73]
#define SWIGTYPE_p_size_type swig_types[74]
#define SWIGTYPE_p_std__invalid_argument swig_types[75]
#define SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t swig_types[76]
#define SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__allocator_type swig_types[77]
#define SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t swig_types[78]
#define SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__allocator_type swig_types[79]
#define SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t swig_types[80]
#define SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__allocator_type swig_types[81]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[82]
#define SWIGTYPE_p_unsigned_char swig_types[83]
#define SWIGTYPE_p_unsigned_short swig_types[84]
#define SWIGTYPE_p_void swig_types[85]
#define SWIGTYPE_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type swig_types[86]
#define SWIGTYPE_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type swig_types[87]
#define SWIGTYPE_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type swig_types[88]
static swig_type_info *swig_types[90];
static swig_module_info swig_module = {swig_types, 89, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _cOpioid2D.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__cOpioid2D

#else
#  define SWIG_init    init_cOpioid2D

#endif
#define SWIG_name    "_cOpioid2D"

#define SWIGVERSION 0x020001 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <string>


#include <iostream>


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>

  
namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <stdexcept>


#include <algorithm>


#include <vector>


#include <list>


#include "opioid2d.hpp"
#include "singleton.hpp"


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


  namespace swig {
    template <>  struct traits<opi2d::Layer > {
      typedef pointer_category category;
      static const char* type_name() { return"opi2d::Layer"; }
    };
  }


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T >
    struct traits_asptr<std::list<T> >  {
      static int asptr(PyObject *obj, std::list<T> **lis) {
	return traits_asptr_stdseq<std::list<T> >::asptr(obj, lis);
      }
    };

    template <class T>
    struct traits_from<std::list<T> > {
      static PyObject *from(const std::list<T> & vec) {
	return traits_from_stdseq<std::list<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::list<opi2d::Layer*, std::allocator< opi2d::Layer * > > > {
	  typedef value_category category;
	  static const char* type_name() {
	    return "std::list<" "opi2d::Layer" " *," "std::allocator< opi2d::Layer * >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_list_Sl_opi2d_Layer_Sm__Sg__iterator(std::list< opi2d::Layer * > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_list_Sl_opi2d_Layer_Sm__Sg____nonzero__(std::list< opi2d::Layer * > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_list_Sl_opi2d_Layer_Sm__Sg____bool__(std::list< opi2d::Layer * > const *self){
      return !(self->empty());
    }
SWIGINTERN std::list< opi2d::Layer * >::size_type std_list_Sl_opi2d_Layer_Sm__Sg____len__(std::list< opi2d::Layer * > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN std::list< opi2d::Layer * >::value_type std_list_Sl_opi2d_Layer_Sm__Sg__pop(std::list< opi2d::Layer * > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::list<opi2d::Layer*,std::allocator< opi2d::Layer * > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::list< opi2d::Layer *,std::allocator< opi2d::Layer * > > *std_list_Sl_opi2d_Layer_Sm__Sg____getslice__(std::list< opi2d::Layer * > *self,std::list< opi2d::Layer * >::difference_type i,std::list< opi2d::Layer * >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_list_Sl_opi2d_Layer_Sm__Sg____setslice__(std::list< opi2d::Layer * > *self,std::list< opi2d::Layer * >::difference_type i,std::list< opi2d::Layer * >::difference_type j,std::list< opi2d::Layer *,std::allocator< opi2d::Layer * > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_list_Sl_opi2d_Layer_Sm__Sg____delslice__(std::list< opi2d::Layer * > *self,std::list< opi2d::Layer * >::difference_type i,std::list< opi2d::Layer * >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_list_Sl_opi2d_Layer_Sm__Sg____delitem____SWIG_0(std::list< opi2d::Layer * > *self,std::list< opi2d::Layer * >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::list< opi2d::Layer *,std::allocator< opi2d::Layer * > > *std_list_Sl_opi2d_Layer_Sm__Sg____getitem____SWIG_0(std::list< opi2d::Layer * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_list_Sl_opi2d_Layer_Sm__Sg____setitem____SWIG_0(std::list< opi2d::Layer * > *self,PySliceObject *slice,std::list< opi2d::Layer *,std::allocator< opi2d::Layer * > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_list_Sl_opi2d_Layer_Sm__Sg____delitem____SWIG_1(std::list< opi2d::Layer * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::list< opi2d::Layer * >::value_type std_list_Sl_opi2d_Layer_Sm__Sg____getitem____SWIG_1(std::list< opi2d::Layer * > *self,std::list< opi2d::Layer * >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_list_Sl_opi2d_Layer_Sm__Sg____setitem____SWIG_1(std::list< opi2d::Layer * > *self,std::list< opi2d::Layer * >::difference_type i,std::list< opi2d::Layer * >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_list_Sl_opi2d_Layer_Sm__Sg__append(std::list< opi2d::Layer * > *self,std::list< opi2d::Layer * >::value_type x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<opi2d::Node > {
      typedef pointer_category category;
      static const char* type_name() { return"opi2d::Node"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::list<opi2d::Node*, std::allocator< opi2d::Node * > > > {
	  typedef value_category category;
	  static const char* type_name() {
	    return "std::list<" "opi2d::Node" " *," "std::allocator< opi2d::Node * >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_list_Sl_opi2d_Node_Sm__Sg__iterator(std::list< opi2d::Node * > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_list_Sl_opi2d_Node_Sm__Sg____nonzero__(std::list< opi2d::Node * > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_list_Sl_opi2d_Node_Sm__Sg____bool__(std::list< opi2d::Node * > const *self){
      return !(self->empty());
    }
SWIGINTERN std::list< opi2d::Node * >::size_type std_list_Sl_opi2d_Node_Sm__Sg____len__(std::list< opi2d::Node * > const *self){
      return self->size();
    }
SWIGINTERN std::list< opi2d::Node * >::value_type std_list_Sl_opi2d_Node_Sm__Sg__pop(std::list< opi2d::Node * > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::list<opi2d::Node*,std::allocator< opi2d::Node * > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::list< opi2d::Node *,std::allocator< opi2d::Node * > > *std_list_Sl_opi2d_Node_Sm__Sg____getslice__(std::list< opi2d::Node * > *self,std::list< opi2d::Node * >::difference_type i,std::list< opi2d::Node * >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_list_Sl_opi2d_Node_Sm__Sg____setslice__(std::list< opi2d::Node * > *self,std::list< opi2d::Node * >::difference_type i,std::list< opi2d::Node * >::difference_type j,std::list< opi2d::Node *,std::allocator< opi2d::Node * > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_list_Sl_opi2d_Node_Sm__Sg____delslice__(std::list< opi2d::Node * > *self,std::list< opi2d::Node * >::difference_type i,std::list< opi2d::Node * >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_list_Sl_opi2d_Node_Sm__Sg____delitem____SWIG_0(std::list< opi2d::Node * > *self,std::list< opi2d::Node * >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::list< opi2d::Node *,std::allocator< opi2d::Node * > > *std_list_Sl_opi2d_Node_Sm__Sg____getitem____SWIG_0(std::list< opi2d::Node * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_list_Sl_opi2d_Node_Sm__Sg____setitem____SWIG_0(std::list< opi2d::Node * > *self,PySliceObject *slice,std::list< opi2d::Node *,std::allocator< opi2d::Node * > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_list_Sl_opi2d_Node_Sm__Sg____delitem____SWIG_1(std::list< opi2d::Node * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::list< opi2d::Node * >::value_type std_list_Sl_opi2d_Node_Sm__Sg____getitem____SWIG_1(std::list< opi2d::Node * > *self,std::list< opi2d::Node * >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_list_Sl_opi2d_Node_Sm__Sg____setitem____SWIG_1(std::list< opi2d::Node * > *self,std::list< opi2d::Node * >::difference_type i,std::list< opi2d::Node * >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_list_Sl_opi2d_Node_Sm__Sg__append(std::list< opi2d::Node * > *self,std::list< opi2d::Node * >::value_type x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<opi2d::Sprite > {
      typedef pointer_category category;
      static const char* type_name() { return"opi2d::Sprite"; }
    };
  }


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<opi2d::Sprite*, std::allocator< opi2d::Sprite * > > > {
	  typedef value_category category;
	  static const char* type_name() {
	    return "std::vector<" "opi2d::Sprite" " *," "std::allocator< opi2d::Sprite * >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_opi2d_Sprite_Sm__Sg__iterator(std::vector< opi2d::Sprite * > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_opi2d_Sprite_Sm__Sg____nonzero__(std::vector< opi2d::Sprite * > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_opi2d_Sprite_Sm__Sg____bool__(std::vector< opi2d::Sprite * > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< opi2d::Sprite * >::size_type std_vector_Sl_opi2d_Sprite_Sm__Sg____len__(std::vector< opi2d::Sprite * > const *self){
      return self->size();
    }
SWIGINTERN std::vector< opi2d::Sprite * >::value_type std_vector_Sl_opi2d_Sprite_Sm__Sg__pop(std::vector< opi2d::Sprite * > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<opi2d::Sprite*,std::allocator< opi2d::Sprite * > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< opi2d::Sprite *,std::allocator< opi2d::Sprite * > > *std_vector_Sl_opi2d_Sprite_Sm__Sg____getslice__(std::vector< opi2d::Sprite * > *self,std::vector< opi2d::Sprite * >::difference_type i,std::vector< opi2d::Sprite * >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_opi2d_Sprite_Sm__Sg____setslice__(std::vector< opi2d::Sprite * > *self,std::vector< opi2d::Sprite * >::difference_type i,std::vector< opi2d::Sprite * >::difference_type j,std::vector< opi2d::Sprite *,std::allocator< opi2d::Sprite * > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_opi2d_Sprite_Sm__Sg____delslice__(std::vector< opi2d::Sprite * > *self,std::vector< opi2d::Sprite * >::difference_type i,std::vector< opi2d::Sprite * >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_opi2d_Sprite_Sm__Sg____delitem____SWIG_0(std::vector< opi2d::Sprite * > *self,std::vector< opi2d::Sprite * >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< opi2d::Sprite *,std::allocator< opi2d::Sprite * > > *std_vector_Sl_opi2d_Sprite_Sm__Sg____getitem____SWIG_0(std::vector< opi2d::Sprite * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_opi2d_Sprite_Sm__Sg____setitem____SWIG_0(std::vector< opi2d::Sprite * > *self,PySliceObject *slice,std::vector< opi2d::Sprite *,std::allocator< opi2d::Sprite * > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_opi2d_Sprite_Sm__Sg____delitem____SWIG_1(std::vector< opi2d::Sprite * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< opi2d::Sprite * >::value_type std_vector_Sl_opi2d_Sprite_Sm__Sg____getitem____SWIG_1(std::vector< opi2d::Sprite * > *self,std::vector< opi2d::Sprite * >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_opi2d_Sprite_Sm__Sg____setitem____SWIG_1(std::vector< opi2d::Sprite * > *self,std::vector< opi2d::Sprite * >::difference_type i,std::vector< opi2d::Sprite * >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_opi2d_Sprite_Sm__Sg__append(std::vector< opi2d::Sprite * > *self,std::vector< opi2d::Sprite * >::value_type x){
      self->push_back(x);
    }

#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  if (s.size()) {
    return SWIG_FromCharPtrAndSize(s.data(), s.size());
  } else {
    return SWIG_FromCharPtrAndSize(s.c_str(), 0);
  }
}



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "opioid2d_wrap.h"

SwigDirector_DeleteCallback::SwigDirector_DeleteCallback(PyObject *self): opi2d::DeleteCallback(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((opi2d::DeleteCallback *)this, this); 
}




SwigDirector_DeleteCallback::~SwigDirector_DeleteCallback() {
}

void SwigDirector_DeleteCallback::OnDelete(int id) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(id));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call DeleteCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char * const swig_method_name = "OnDelete";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"OnDelete", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'DeleteCallback.OnDelete'");
    }
  }
}


SwigDirector_ActionCallbacks::SwigDirector_ActionCallbacks(PyObject *self): opi2d::ActionCallbacks(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((opi2d::ActionCallbacks *)this, this); 
}




SwigDirector_ActionCallbacks::~SwigDirector_ActionCallbacks() {
}

void SwigDirector_ActionCallbacks::End() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ActionCallbacks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char * const swig_method_name = "End";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "End", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'ActionCallbacks.End'");
    }
  }
}


void SwigDirector_ActionCallbacks::Wake() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ActionCallbacks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char * const swig_method_name = "Wake";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "Wake", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'ActionCallbacks.Wake'");
    }
  }
}


SwigDirector_SceneCallbacks::SwigDirector_SceneCallbacks(PyObject *self): opi2d::SceneCallbacks(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((opi2d::SceneCallbacks *)this, this); 
}




SwigDirector_SceneCallbacks::~SwigDirector_SceneCallbacks() {
}

void SwigDirector_SceneCallbacks::OnCollision(std::string const &group1, std::string const &group2, opi2d::Sprite *sprite1, opi2d::Sprite *sprite2) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_std_string(static_cast< std::string >(group1));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_std_string(static_cast< std::string >(group2));
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(sprite1), SWIGTYPE_p_opi2d__Sprite,  0 );
  swig::SwigVar_PyObject obj3;
  obj3 = SWIG_NewPointerObj(SWIG_as_voidptr(sprite2), SWIGTYPE_p_opi2d__Sprite,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SceneCallbacks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char * const swig_method_name = "OnCollision";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(OOOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"OnCollision", (char *)"(OOOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'SceneCallbacks.OnCollision'");
    }
  }
}


#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    incr(swig::SwigPyIterator *,size_t)\n"
    "    incr(swig::SwigPyIterator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    decr(swig::SwigPyIterator *,size_t)\n"
    "    decr(swig::SwigPyIterator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LayerList_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:LayerList_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_iterator" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  result = (swig::SwigPyIterator *)std_list_Sl_opi2d_Layer_Sm__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LayerList___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList___nonzero__" "', argument " "1"" of type '" "std::list< opi2d::Layer * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  result = (bool)std_list_Sl_opi2d_Layer_Sm__Sg____nonzero__((std::list< opi2d::Layer * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LayerList___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList___bool__" "', argument " "1"" of type '" "std::list< opi2d::Layer * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  result = (bool)std_list_Sl_opi2d_Layer_Sm__Sg____bool__((std::list< opi2d::Layer * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< opi2d::Layer * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LayerList___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList___len__" "', argument " "1"" of type '" "std::list< opi2d::Layer * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  result = std_list_Sl_opi2d_Layer_Sm__Sg____len__((std::list< opi2d::Layer * > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< opi2d::Layer * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LayerList_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_pop" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  try {
    result = (std::list< opi2d::Layer * >::value_type)std_list_Sl_opi2d_Layer_Sm__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  std::list< opi2d::Layer * >::difference_type arg2 ;
  std::list< opi2d::Layer * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< opi2d::Layer *,std::allocator< opi2d::Layer * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LayerList___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList___getslice__" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LayerList___getslice__" "', argument " "2"" of type '" "std::list< opi2d::Layer * >::difference_type""'");
  } 
  arg2 = static_cast< std::list< opi2d::Layer * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LayerList___getslice__" "', argument " "3"" of type '" "std::list< opi2d::Layer * >::difference_type""'");
  } 
  arg3 = static_cast< std::list< opi2d::Layer * >::difference_type >(val3);
  try {
    result = (std::list< opi2d::Layer *,std::allocator< opi2d::Layer * > > *)std_list_Sl_opi2d_Layer_Sm__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  std::list< opi2d::Layer * >::difference_type arg2 ;
  std::list< opi2d::Layer * >::difference_type arg3 ;
  std::list< opi2d::Layer *,std::allocator< opi2d::Layer * > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:LayerList___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList___setslice__" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LayerList___setslice__" "', argument " "2"" of type '" "std::list< opi2d::Layer * >::difference_type""'");
  } 
  arg2 = static_cast< std::list< opi2d::Layer * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LayerList___setslice__" "', argument " "3"" of type '" "std::list< opi2d::Layer * >::difference_type""'");
  } 
  arg3 = static_cast< std::list< opi2d::Layer * >::difference_type >(val3);
  {
    std::list<opi2d::Layer*,std::allocator< opi2d::Layer * > > *ptr = (std::list<opi2d::Layer*,std::allocator< opi2d::Layer * > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LayerList___setslice__" "', argument " "4"" of type '" "std::list< opi2d::Layer *,std::allocator< opi2d::Layer * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LayerList___setslice__" "', argument " "4"" of type '" "std::list< opi2d::Layer *,std::allocator< opi2d::Layer * > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_list_Sl_opi2d_Layer_Sm__Sg____setslice__(arg1,arg2,arg3,(std::list< opi2d::Layer *,std::allocator< opi2d::Layer * > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  std::list< opi2d::Layer * >::difference_type arg2 ;
  std::list< opi2d::Layer * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LayerList___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList___delslice__" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LayerList___delslice__" "', argument " "2"" of type '" "std::list< opi2d::Layer * >::difference_type""'");
  } 
  arg2 = static_cast< std::list< opi2d::Layer * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LayerList___delslice__" "', argument " "3"" of type '" "std::list< opi2d::Layer * >::difference_type""'");
  } 
  arg3 = static_cast< std::list< opi2d::Layer * >::difference_type >(val3);
  try {
    std_list_Sl_opi2d_Layer_Sm__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  std::list< opi2d::Layer * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LayerList___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList___delitem__" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LayerList___delitem__" "', argument " "2"" of type '" "std::list< opi2d::Layer * >::difference_type""'");
  } 
  arg2 = static_cast< std::list< opi2d::Layer * >::difference_type >(val2);
  try {
    std_list_Sl_opi2d_Layer_Sm__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< opi2d::Layer *,std::allocator< opi2d::Layer * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LayerList___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList___getitem__" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::list< opi2d::Layer *,std::allocator< opi2d::Layer * > > *)std_list_Sl_opi2d_Layer_Sm__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::list< opi2d::Layer *,std::allocator< opi2d::Layer * > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LayerList___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList___setitem__" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::list<opi2d::Layer*,std::allocator< opi2d::Layer * > > *ptr = (std::list<opi2d::Layer*,std::allocator< opi2d::Layer * > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LayerList___setitem__" "', argument " "3"" of type '" "std::list< opi2d::Layer *,std::allocator< opi2d::Layer * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LayerList___setitem__" "', argument " "3"" of type '" "std::list< opi2d::Layer *,std::allocator< opi2d::Layer * > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_list_Sl_opi2d_Layer_Sm__Sg____setitem____SWIG_0(arg1,arg2,(std::list< opi2d::Layer *,std::allocator< opi2d::Layer * > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LayerList___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList___delitem__" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_list_Sl_opi2d_Layer_Sm__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Layer*,std::allocator< opi2d::Layer * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_LayerList___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Layer*,std::allocator< opi2d::Layer * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LayerList___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LayerList___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::list< opi2d::Layer * > *,std::list< opi2d::Layer * >::difference_type)\n"
    "    __delitem__(std::list< opi2d::Layer * > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  std::list< opi2d::Layer * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< opi2d::Layer * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LayerList___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList___getitem__" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LayerList___getitem__" "', argument " "2"" of type '" "std::list< opi2d::Layer * >::difference_type""'");
  } 
  arg2 = static_cast< std::list< opi2d::Layer * >::difference_type >(val2);
  try {
    result = (std::list< opi2d::Layer * >::value_type)std_list_Sl_opi2d_Layer_Sm__Sg____getitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Layer*,std::allocator< opi2d::Layer * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_LayerList___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Layer*,std::allocator< opi2d::Layer * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LayerList___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LayerList___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::list< opi2d::Layer * > *,PySliceObject *)\n"
    "    __getitem__(std::list< opi2d::Layer * > *,std::list< opi2d::Layer * >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  std::list< opi2d::Layer * >::difference_type arg2 ;
  std::list< opi2d::Layer * >::value_type arg3 = (std::list< opi2d::Layer * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LayerList___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList___setitem__" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LayerList___setitem__" "', argument " "2"" of type '" "std::list< opi2d::Layer * >::difference_type""'");
  } 
  arg2 = static_cast< std::list< opi2d::Layer * >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LayerList___setitem__" "', argument " "3"" of type '" "std::list< opi2d::Layer * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::list< opi2d::Layer * >::value_type >(argp3);
  try {
    std_list_Sl_opi2d_Layer_Sm__Sg____setitem____SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Layer*,std::allocator< opi2d::Layer * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::list<opi2d::Layer*,std::allocator< opi2d::Layer * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LayerList___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Layer*,std::allocator< opi2d::Layer * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LayerList___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LayerList___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::list< opi2d::Layer * > *,PySliceObject *,std::list< opi2d::Layer *,std::allocator< opi2d::Layer * > > const &)\n"
    "    __setitem__(std::list< opi2d::Layer * > *,std::list< opi2d::Layer * >::difference_type,std::list< opi2d::Layer * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  std::list< opi2d::Layer * >::value_type arg2 = (std::list< opi2d::Layer * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LayerList_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_append" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LayerList_append" "', argument " "2"" of type '" "std::list< opi2d::Layer * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::list< opi2d::Layer * >::value_type >(argp2);
  std_list_Sl_opi2d_Layer_Sm__Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LayerList__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_LayerList")) SWIG_fail;
  result = (std::list< opi2d::Layer * > *)new std::list< opi2d::Layer * >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LayerList__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::list< opi2d::Layer * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LayerList",&obj0)) SWIG_fail;
  {
    std::list<opi2d::Layer*,std::allocator< opi2d::Layer * > > *ptr = (std::list<opi2d::Layer*,std::allocator< opi2d::Layer * > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LayerList" "', argument " "1"" of type '" "std::list< opi2d::Layer * > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LayerList" "', argument " "1"" of type '" "std::list< opi2d::Layer * > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::list< opi2d::Layer * > *)new std::list< opi2d::Layer * >((std::list< opi2d::Layer * > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LayerList_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_empty" "', argument " "1"" of type '" "std::list< opi2d::Layer * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  result = (bool)((std::list< opi2d::Layer * > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< opi2d::Layer * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LayerList_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_size" "', argument " "1"" of type '" "std::list< opi2d::Layer * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  result = ((std::list< opi2d::Layer * > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LayerList_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_clear" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  std::list< opi2d::Layer * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LayerList_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_swap" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LayerList_swap" "', argument " "2"" of type '" "std::list< opi2d::Layer * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LayerList_swap" "', argument " "2"" of type '" "std::list< opi2d::Layer * > &""'"); 
  }
  arg2 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< opi2d::Layer * > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LayerList_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_get_allocator" "', argument " "1"" of type '" "std::list< opi2d::Layer * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  result = ((std::list< opi2d::Layer * > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::list< opi2d::Layer * >::allocator_type(static_cast< const std::list< opi2d::Layer * >::allocator_type& >(result))), SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< opi2d::Layer * >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LayerList_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_begin" "', argument " "1"" of type '" "std::list< opi2d::Layer * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  result = ((std::list< opi2d::Layer * > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< opi2d::Layer * >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< opi2d::Layer * >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LayerList_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_end" "', argument " "1"" of type '" "std::list< opi2d::Layer * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  result = ((std::list< opi2d::Layer * > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< opi2d::Layer * >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< opi2d::Layer * >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LayerList_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_rbegin" "', argument " "1"" of type '" "std::list< opi2d::Layer * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  result = ((std::list< opi2d::Layer * > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< opi2d::Layer * >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< opi2d::Layer * >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LayerList_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_rend" "', argument " "1"" of type '" "std::list< opi2d::Layer * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  result = ((std::list< opi2d::Layer * > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< opi2d::Layer * >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LayerList__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< opi2d::Layer * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LayerList",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LayerList" "', argument " "1"" of type '" "std::list< opi2d::Layer * >::size_type""'");
  } 
  arg1 = static_cast< std::list< opi2d::Layer * >::size_type >(val1);
  result = (std::list< opi2d::Layer * > *)new std::list< opi2d::Layer * >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LayerList_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_pop_back" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  std::list< opi2d::Layer * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LayerList_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_resize" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LayerList_resize" "', argument " "2"" of type '" "std::list< opi2d::Layer * >::size_type""'");
  } 
  arg2 = static_cast< std::list< opi2d::Layer * >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  std::list< opi2d::Layer * >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< opi2d::Layer * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LayerList_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_erase" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LayerList_erase" "', argument " "2"" of type '" "std::list< opi2d::Layer * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< opi2d::Layer * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< opi2d::Layer * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LayerList_erase" "', argument " "2"" of type '" "std::list< opi2d::Layer * >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< opi2d::Layer * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  std::list< opi2d::Layer * >::iterator arg2 ;
  std::list< opi2d::Layer * >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< opi2d::Layer * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LayerList_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_erase" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LayerList_erase" "', argument " "2"" of type '" "std::list< opi2d::Layer * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< opi2d::Layer * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< opi2d::Layer * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LayerList_erase" "', argument " "2"" of type '" "std::list< opi2d::Layer * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LayerList_erase" "', argument " "3"" of type '" "std::list< opi2d::Layer * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< opi2d::Layer * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< opi2d::Layer * >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LayerList_erase" "', argument " "3"" of type '" "std::list< opi2d::Layer * >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< opi2d::Layer * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Layer*,std::allocator< opi2d::Layer * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< opi2d::Layer * >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_LayerList_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Layer*,std::allocator< opi2d::Layer * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< opi2d::Layer * >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< opi2d::Layer * >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_LayerList_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LayerList_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::list< opi2d::Layer * > *,std::list< opi2d::Layer * >::iterator)\n"
    "    erase(std::list< opi2d::Layer * > *,std::list< opi2d::Layer * >::iterator,std::list< opi2d::Layer * >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LayerList__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * >::size_type arg1 ;
  std::list< opi2d::Layer * >::value_type arg2 = (std::list< opi2d::Layer * >::value_type) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< opi2d::Layer * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LayerList",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LayerList" "', argument " "1"" of type '" "std::list< opi2d::Layer * >::size_type""'");
  } 
  arg1 = static_cast< std::list< opi2d::Layer * >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LayerList" "', argument " "2"" of type '" "std::list< opi2d::Layer * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::list< opi2d::Layer * >::value_type >(argp2);
  result = (std::list< opi2d::Layer * > *)new std::list< opi2d::Layer * >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LayerList(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_LayerList__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LayerList__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Layer*,std::allocator< opi2d::Layer * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LayerList__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LayerList__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LayerList'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< opi2d::Layer * >()\n"
    "    std::list< opi2d::Layer * >(std::list< opi2d::Layer * > const &)\n"
    "    std::list< opi2d::Layer * >(std::list< opi2d::Layer * >::size_type)\n"
    "    std::list< opi2d::Layer * >(std::list< opi2d::Layer * >::size_type,std::list< opi2d::Layer * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  std::list< opi2d::Layer * >::value_type arg2 = (std::list< opi2d::Layer * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LayerList_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_push_back" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LayerList_push_back" "', argument " "2"" of type '" "std::list< opi2d::Layer * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::list< opi2d::Layer * >::value_type >(argp2);
  (arg1)->push_back(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< opi2d::Layer * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LayerList_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_front" "', argument " "1"" of type '" "std::list< opi2d::Layer * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  result = (std::list< opi2d::Layer * >::value_type)((std::list< opi2d::Layer * > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< opi2d::Layer * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LayerList_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_back" "', argument " "1"" of type '" "std::list< opi2d::Layer * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  result = (std::list< opi2d::Layer * >::value_type)((std::list< opi2d::Layer * > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  std::list< opi2d::Layer * >::size_type arg2 ;
  std::list< opi2d::Layer * >::value_type arg3 = (std::list< opi2d::Layer * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LayerList_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_assign" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LayerList_assign" "', argument " "2"" of type '" "std::list< opi2d::Layer * >::size_type""'");
  } 
  arg2 = static_cast< std::list< opi2d::Layer * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LayerList_assign" "', argument " "3"" of type '" "std::list< opi2d::Layer * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::list< opi2d::Layer * >::value_type >(argp3);
  (arg1)->assign(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  std::list< opi2d::Layer * >::size_type arg2 ;
  std::list< opi2d::Layer * >::value_type arg3 = (std::list< opi2d::Layer * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LayerList_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_resize" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LayerList_resize" "', argument " "2"" of type '" "std::list< opi2d::Layer * >::size_type""'");
  } 
  arg2 = static_cast< std::list< opi2d::Layer * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LayerList_resize" "', argument " "3"" of type '" "std::list< opi2d::Layer * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::list< opi2d::Layer * >::value_type >(argp3);
  (arg1)->resize(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Layer*,std::allocator< opi2d::Layer * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LayerList_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Layer*,std::allocator< opi2d::Layer * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LayerList_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LayerList_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::list< opi2d::Layer * > *,std::list< opi2d::Layer * >::size_type)\n"
    "    resize(std::list< opi2d::Layer * > *,std::list< opi2d::Layer * >::size_type,std::list< opi2d::Layer * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  std::list< opi2d::Layer * >::iterator arg2 ;
  std::list< opi2d::Layer * >::value_type arg3 = (std::list< opi2d::Layer * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< opi2d::Layer * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LayerList_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_insert" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LayerList_insert" "', argument " "2"" of type '" "std::list< opi2d::Layer * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< opi2d::Layer * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< opi2d::Layer * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LayerList_insert" "', argument " "2"" of type '" "std::list< opi2d::Layer * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LayerList_insert" "', argument " "3"" of type '" "std::list< opi2d::Layer * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::list< opi2d::Layer * >::value_type >(argp3);
  result = (arg1)->insert(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< opi2d::Layer * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  std::list< opi2d::Layer * >::iterator arg2 ;
  std::list< opi2d::Layer * >::size_type arg3 ;
  std::list< opi2d::Layer * >::value_type arg4 = (std::list< opi2d::Layer * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:LayerList_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_insert" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LayerList_insert" "', argument " "2"" of type '" "std::list< opi2d::Layer * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< opi2d::Layer * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< opi2d::Layer * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LayerList_insert" "', argument " "2"" of type '" "std::list< opi2d::Layer * >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LayerList_insert" "', argument " "3"" of type '" "std::list< opi2d::Layer * >::size_type""'");
  } 
  arg3 = static_cast< std::list< opi2d::Layer * >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LayerList_insert" "', argument " "4"" of type '" "std::list< opi2d::Layer * >::value_type""'"); 
  }
  arg4 = reinterpret_cast< std::list< opi2d::Layer * >::value_type >(argp4);
  (arg1)->insert(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Layer*,std::allocator< opi2d::Layer * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< opi2d::Layer * >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LayerList_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Layer*,std::allocator< opi2d::Layer * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< opi2d::Layer * >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_LayerList_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LayerList_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::list< opi2d::Layer * > *,std::list< opi2d::Layer * >::iterator,std::list< opi2d::Layer * >::value_type)\n"
    "    insert(std::list< opi2d::Layer * > *,std::list< opi2d::Layer * >::iterator,std::list< opi2d::Layer * >::size_type,std::list< opi2d::Layer * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_pop_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LayerList_pop_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_pop_front" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  (arg1)->pop_front();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_push_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  std::list< opi2d::Layer * >::value_type arg2 = (std::list< opi2d::Layer * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LayerList_push_front",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_push_front" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LayerList_push_front" "', argument " "2"" of type '" "std::list< opi2d::Layer * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::list< opi2d::Layer * >::value_type >(argp2);
  (arg1)->push_front(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  std::list< opi2d::Layer * >::value_type arg2 = (std::list< opi2d::Layer * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LayerList_remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_remove" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LayerList_remove" "', argument " "2"" of type '" "std::list< opi2d::Layer * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::list< opi2d::Layer * >::value_type >(argp2);
  (arg1)->remove(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_unique(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LayerList_unique",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_unique" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  (arg1)->unique();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_reverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LayerList_reverse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_reverse" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  (arg1)->reverse();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_sort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LayerList_sort",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_sort" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  (arg1)->sort();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LayerList_merge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  std::list< opi2d::Layer * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LayerList_merge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LayerList_merge" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LayerList_merge" "', argument " "2"" of type '" "std::list< opi2d::Layer * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LayerList_merge" "', argument " "2"" of type '" "std::list< opi2d::Layer * > &""'"); 
  }
  arg2 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp2);
  (arg1)->merge(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LayerList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Layer * > *arg1 = (std::list< opi2d::Layer * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LayerList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LayerList" "', argument " "1"" of type '" "std::list< opi2d::Layer * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Layer * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LayerList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NodeList_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:NodeList_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_iterator" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  result = (swig::SwigPyIterator *)std_list_Sl_opi2d_Node_Sm__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeList___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList___nonzero__" "', argument " "1"" of type '" "std::list< opi2d::Node * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  result = (bool)std_list_Sl_opi2d_Node_Sm__Sg____nonzero__((std::list< opi2d::Node * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeList___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList___bool__" "', argument " "1"" of type '" "std::list< opi2d::Node * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  result = (bool)std_list_Sl_opi2d_Node_Sm__Sg____bool__((std::list< opi2d::Node * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< opi2d::Node * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeList___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList___len__" "', argument " "1"" of type '" "std::list< opi2d::Node * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  result = std_list_Sl_opi2d_Node_Sm__Sg____len__((std::list< opi2d::Node * > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< opi2d::Node * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeList_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_pop" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  try {
    result = (std::list< opi2d::Node * >::value_type)std_list_Sl_opi2d_Node_Sm__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  std::list< opi2d::Node * >::difference_type arg2 ;
  std::list< opi2d::Node * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< opi2d::Node *,std::allocator< opi2d::Node * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeList___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList___getslice__" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeList___getslice__" "', argument " "2"" of type '" "std::list< opi2d::Node * >::difference_type""'");
  } 
  arg2 = static_cast< std::list< opi2d::Node * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeList___getslice__" "', argument " "3"" of type '" "std::list< opi2d::Node * >::difference_type""'");
  } 
  arg3 = static_cast< std::list< opi2d::Node * >::difference_type >(val3);
  try {
    result = (std::list< opi2d::Node *,std::allocator< opi2d::Node * > > *)std_list_Sl_opi2d_Node_Sm__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  std::list< opi2d::Node * >::difference_type arg2 ;
  std::list< opi2d::Node * >::difference_type arg3 ;
  std::list< opi2d::Node *,std::allocator< opi2d::Node * > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NodeList___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList___setslice__" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeList___setslice__" "', argument " "2"" of type '" "std::list< opi2d::Node * >::difference_type""'");
  } 
  arg2 = static_cast< std::list< opi2d::Node * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeList___setslice__" "', argument " "3"" of type '" "std::list< opi2d::Node * >::difference_type""'");
  } 
  arg3 = static_cast< std::list< opi2d::Node * >::difference_type >(val3);
  {
    std::list<opi2d::Node*,std::allocator< opi2d::Node * > > *ptr = (std::list<opi2d::Node*,std::allocator< opi2d::Node * > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "NodeList___setslice__" "', argument " "4"" of type '" "std::list< opi2d::Node *,std::allocator< opi2d::Node * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeList___setslice__" "', argument " "4"" of type '" "std::list< opi2d::Node *,std::allocator< opi2d::Node * > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_list_Sl_opi2d_Node_Sm__Sg____setslice__(arg1,arg2,arg3,(std::list< opi2d::Node *,std::allocator< opi2d::Node * > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  std::list< opi2d::Node * >::difference_type arg2 ;
  std::list< opi2d::Node * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeList___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList___delslice__" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeList___delslice__" "', argument " "2"" of type '" "std::list< opi2d::Node * >::difference_type""'");
  } 
  arg2 = static_cast< std::list< opi2d::Node * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeList___delslice__" "', argument " "3"" of type '" "std::list< opi2d::Node * >::difference_type""'");
  } 
  arg3 = static_cast< std::list< opi2d::Node * >::difference_type >(val3);
  try {
    std_list_Sl_opi2d_Node_Sm__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  std::list< opi2d::Node * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeList___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList___delitem__" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeList___delitem__" "', argument " "2"" of type '" "std::list< opi2d::Node * >::difference_type""'");
  } 
  arg2 = static_cast< std::list< opi2d::Node * >::difference_type >(val2);
  try {
    std_list_Sl_opi2d_Node_Sm__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< opi2d::Node *,std::allocator< opi2d::Node * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeList___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList___getitem__" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::list< opi2d::Node *,std::allocator< opi2d::Node * > > *)std_list_Sl_opi2d_Node_Sm__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::list< opi2d::Node *,std::allocator< opi2d::Node * > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeList___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList___setitem__" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::list<opi2d::Node*,std::allocator< opi2d::Node * > > *ptr = (std::list<opi2d::Node*,std::allocator< opi2d::Node * > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeList___setitem__" "', argument " "3"" of type '" "std::list< opi2d::Node *,std::allocator< opi2d::Node * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeList___setitem__" "', argument " "3"" of type '" "std::list< opi2d::Node *,std::allocator< opi2d::Node * > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_list_Sl_opi2d_Node_Sm__Sg____setitem____SWIG_0(arg1,arg2,(std::list< opi2d::Node *,std::allocator< opi2d::Node * > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeList___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList___delitem__" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_list_Sl_opi2d_Node_Sm__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Node*,std::allocator< opi2d::Node * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_NodeList___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Node*,std::allocator< opi2d::Node * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeList___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeList___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::list< opi2d::Node * > *,std::list< opi2d::Node * >::difference_type)\n"
    "    __delitem__(std::list< opi2d::Node * > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  std::list< opi2d::Node * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< opi2d::Node * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeList___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList___getitem__" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeList___getitem__" "', argument " "2"" of type '" "std::list< opi2d::Node * >::difference_type""'");
  } 
  arg2 = static_cast< std::list< opi2d::Node * >::difference_type >(val2);
  try {
    result = (std::list< opi2d::Node * >::value_type)std_list_Sl_opi2d_Node_Sm__Sg____getitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Node*,std::allocator< opi2d::Node * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_NodeList___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Node*,std::allocator< opi2d::Node * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeList___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeList___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::list< opi2d::Node * > *,PySliceObject *)\n"
    "    __getitem__(std::list< opi2d::Node * > *,std::list< opi2d::Node * >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  std::list< opi2d::Node * >::difference_type arg2 ;
  std::list< opi2d::Node * >::value_type arg3 = (std::list< opi2d::Node * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeList___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList___setitem__" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeList___setitem__" "', argument " "2"" of type '" "std::list< opi2d::Node * >::difference_type""'");
  } 
  arg2 = static_cast< std::list< opi2d::Node * >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeList___setitem__" "', argument " "3"" of type '" "std::list< opi2d::Node * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::list< opi2d::Node * >::value_type >(argp3);
  try {
    std_list_Sl_opi2d_Node_Sm__Sg____setitem____SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Node*,std::allocator< opi2d::Node * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::list<opi2d::Node*,std::allocator< opi2d::Node * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeList___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Node*,std::allocator< opi2d::Node * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeList___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeList___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::list< opi2d::Node * > *,PySliceObject *,std::list< opi2d::Node *,std::allocator< opi2d::Node * > > const &)\n"
    "    __setitem__(std::list< opi2d::Node * > *,std::list< opi2d::Node * >::difference_type,std::list< opi2d::Node * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  std::list< opi2d::Node * >::value_type arg2 = (std::list< opi2d::Node * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeList_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_append" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeList_append" "', argument " "2"" of type '" "std::list< opi2d::Node * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::list< opi2d::Node * >::value_type >(argp2);
  std_list_Sl_opi2d_Node_Sm__Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NodeList__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NodeList")) SWIG_fail;
  result = (std::list< opi2d::Node * > *)new std::list< opi2d::Node * >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NodeList__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::list< opi2d::Node * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NodeList",&obj0)) SWIG_fail;
  {
    std::list<opi2d::Node*,std::allocator< opi2d::Node * > > *ptr = (std::list<opi2d::Node*,std::allocator< opi2d::Node * > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NodeList" "', argument " "1"" of type '" "std::list< opi2d::Node * > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NodeList" "', argument " "1"" of type '" "std::list< opi2d::Node * > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::list< opi2d::Node * > *)new std::list< opi2d::Node * >((std::list< opi2d::Node * > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeList_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_empty" "', argument " "1"" of type '" "std::list< opi2d::Node * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  result = (bool)((std::list< opi2d::Node * > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< opi2d::Node * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeList_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_size" "', argument " "1"" of type '" "std::list< opi2d::Node * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  result = ((std::list< opi2d::Node * > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeList_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_clear" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  std::list< opi2d::Node * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeList_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_swap" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeList_swap" "', argument " "2"" of type '" "std::list< opi2d::Node * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeList_swap" "', argument " "2"" of type '" "std::list< opi2d::Node * > &""'"); 
  }
  arg2 = reinterpret_cast< std::list< opi2d::Node * > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< opi2d::Node * > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeList_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_get_allocator" "', argument " "1"" of type '" "std::list< opi2d::Node * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  result = ((std::list< opi2d::Node * > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::list< opi2d::Node * >::allocator_type(static_cast< const std::list< opi2d::Node * >::allocator_type& >(result))), SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< opi2d::Node * >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeList_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_begin" "', argument " "1"" of type '" "std::list< opi2d::Node * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  result = ((std::list< opi2d::Node * > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< opi2d::Node * >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< opi2d::Node * >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeList_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_end" "', argument " "1"" of type '" "std::list< opi2d::Node * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  result = ((std::list< opi2d::Node * > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< opi2d::Node * >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< opi2d::Node * >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeList_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_rbegin" "', argument " "1"" of type '" "std::list< opi2d::Node * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  result = ((std::list< opi2d::Node * > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< opi2d::Node * >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< opi2d::Node * >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeList_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_rend" "', argument " "1"" of type '" "std::list< opi2d::Node * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  result = ((std::list< opi2d::Node * > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< opi2d::Node * >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NodeList__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< opi2d::Node * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NodeList",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_NodeList" "', argument " "1"" of type '" "std::list< opi2d::Node * >::size_type""'");
  } 
  arg1 = static_cast< std::list< opi2d::Node * >::size_type >(val1);
  result = (std::list< opi2d::Node * > *)new std::list< opi2d::Node * >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeList_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_pop_back" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  std::list< opi2d::Node * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeList_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_resize" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeList_resize" "', argument " "2"" of type '" "std::list< opi2d::Node * >::size_type""'");
  } 
  arg2 = static_cast< std::list< opi2d::Node * >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  std::list< opi2d::Node * >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< opi2d::Node * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeList_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_erase" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeList_erase" "', argument " "2"" of type '" "std::list< opi2d::Node * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< opi2d::Node * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< opi2d::Node * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeList_erase" "', argument " "2"" of type '" "std::list< opi2d::Node * >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< opi2d::Node * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  std::list< opi2d::Node * >::iterator arg2 ;
  std::list< opi2d::Node * >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< opi2d::Node * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeList_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_erase" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeList_erase" "', argument " "2"" of type '" "std::list< opi2d::Node * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< opi2d::Node * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< opi2d::Node * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeList_erase" "', argument " "2"" of type '" "std::list< opi2d::Node * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeList_erase" "', argument " "3"" of type '" "std::list< opi2d::Node * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< opi2d::Node * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< opi2d::Node * >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeList_erase" "', argument " "3"" of type '" "std::list< opi2d::Node * >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< opi2d::Node * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Node*,std::allocator< opi2d::Node * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< opi2d::Node * >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_NodeList_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Node*,std::allocator< opi2d::Node * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< opi2d::Node * >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< opi2d::Node * >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_NodeList_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeList_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::list< opi2d::Node * > *,std::list< opi2d::Node * >::iterator)\n"
    "    erase(std::list< opi2d::Node * > *,std::list< opi2d::Node * >::iterator,std::list< opi2d::Node * >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NodeList__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * >::size_type arg1 ;
  std::list< opi2d::Node * >::value_type arg2 = (std::list< opi2d::Node * >::value_type) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< opi2d::Node * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NodeList",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_NodeList" "', argument " "1"" of type '" "std::list< opi2d::Node * >::size_type""'");
  } 
  arg1 = static_cast< std::list< opi2d::Node * >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NodeList" "', argument " "2"" of type '" "std::list< opi2d::Node * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::list< opi2d::Node * >::value_type >(argp2);
  result = (std::list< opi2d::Node * > *)new std::list< opi2d::Node * >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NodeList(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_NodeList__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_NodeList__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Node*,std::allocator< opi2d::Node * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NodeList__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_NodeList__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NodeList'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< opi2d::Node * >()\n"
    "    std::list< opi2d::Node * >(std::list< opi2d::Node * > const &)\n"
    "    std::list< opi2d::Node * >(std::list< opi2d::Node * >::size_type)\n"
    "    std::list< opi2d::Node * >(std::list< opi2d::Node * >::size_type,std::list< opi2d::Node * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  std::list< opi2d::Node * >::value_type arg2 = (std::list< opi2d::Node * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeList_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_push_back" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeList_push_back" "', argument " "2"" of type '" "std::list< opi2d::Node * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::list< opi2d::Node * >::value_type >(argp2);
  (arg1)->push_back(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< opi2d::Node * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeList_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_front" "', argument " "1"" of type '" "std::list< opi2d::Node * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  result = (std::list< opi2d::Node * >::value_type)((std::list< opi2d::Node * > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< opi2d::Node * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeList_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_back" "', argument " "1"" of type '" "std::list< opi2d::Node * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  result = (std::list< opi2d::Node * >::value_type)((std::list< opi2d::Node * > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  std::list< opi2d::Node * >::size_type arg2 ;
  std::list< opi2d::Node * >::value_type arg3 = (std::list< opi2d::Node * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeList_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_assign" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeList_assign" "', argument " "2"" of type '" "std::list< opi2d::Node * >::size_type""'");
  } 
  arg2 = static_cast< std::list< opi2d::Node * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeList_assign" "', argument " "3"" of type '" "std::list< opi2d::Node * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::list< opi2d::Node * >::value_type >(argp3);
  (arg1)->assign(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  std::list< opi2d::Node * >::size_type arg2 ;
  std::list< opi2d::Node * >::value_type arg3 = (std::list< opi2d::Node * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeList_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_resize" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeList_resize" "', argument " "2"" of type '" "std::list< opi2d::Node * >::size_type""'");
  } 
  arg2 = static_cast< std::list< opi2d::Node * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeList_resize" "', argument " "3"" of type '" "std::list< opi2d::Node * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::list< opi2d::Node * >::value_type >(argp3);
  (arg1)->resize(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Node*,std::allocator< opi2d::Node * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeList_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Node*,std::allocator< opi2d::Node * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeList_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeList_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::list< opi2d::Node * > *,std::list< opi2d::Node * >::size_type)\n"
    "    resize(std::list< opi2d::Node * > *,std::list< opi2d::Node * >::size_type,std::list< opi2d::Node * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  std::list< opi2d::Node * >::iterator arg2 ;
  std::list< opi2d::Node * >::value_type arg3 = (std::list< opi2d::Node * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< opi2d::Node * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeList_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_insert" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeList_insert" "', argument " "2"" of type '" "std::list< opi2d::Node * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< opi2d::Node * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< opi2d::Node * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeList_insert" "', argument " "2"" of type '" "std::list< opi2d::Node * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeList_insert" "', argument " "3"" of type '" "std::list< opi2d::Node * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::list< opi2d::Node * >::value_type >(argp3);
  result = (arg1)->insert(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< opi2d::Node * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  std::list< opi2d::Node * >::iterator arg2 ;
  std::list< opi2d::Node * >::size_type arg3 ;
  std::list< opi2d::Node * >::value_type arg4 = (std::list< opi2d::Node * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NodeList_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_insert" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeList_insert" "', argument " "2"" of type '" "std::list< opi2d::Node * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< opi2d::Node * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< opi2d::Node * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeList_insert" "', argument " "2"" of type '" "std::list< opi2d::Node * >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeList_insert" "', argument " "3"" of type '" "std::list< opi2d::Node * >::size_type""'");
  } 
  arg3 = static_cast< std::list< opi2d::Node * >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "NodeList_insert" "', argument " "4"" of type '" "std::list< opi2d::Node * >::value_type""'"); 
  }
  arg4 = reinterpret_cast< std::list< opi2d::Node * >::value_type >(argp4);
  (arg1)->insert(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Node*,std::allocator< opi2d::Node * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< opi2d::Node * >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeList_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<opi2d::Node*,std::allocator< opi2d::Node * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< opi2d::Node * >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_NodeList_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeList_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::list< opi2d::Node * > *,std::list< opi2d::Node * >::iterator,std::list< opi2d::Node * >::value_type)\n"
    "    insert(std::list< opi2d::Node * > *,std::list< opi2d::Node * >::iterator,std::list< opi2d::Node * >::size_type,std::list< opi2d::Node * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_pop_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeList_pop_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_pop_front" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  (arg1)->pop_front();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_push_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  std::list< opi2d::Node * >::value_type arg2 = (std::list< opi2d::Node * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeList_push_front",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_push_front" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeList_push_front" "', argument " "2"" of type '" "std::list< opi2d::Node * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::list< opi2d::Node * >::value_type >(argp2);
  (arg1)->push_front(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  std::list< opi2d::Node * >::value_type arg2 = (std::list< opi2d::Node * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeList_remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_remove" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeList_remove" "', argument " "2"" of type '" "std::list< opi2d::Node * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::list< opi2d::Node * >::value_type >(argp2);
  (arg1)->remove(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_unique(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeList_unique",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_unique" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  (arg1)->unique();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_reverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeList_reverse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_reverse" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  (arg1)->reverse();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_sort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeList_sort",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_sort" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  (arg1)->sort();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeList_merge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  std::list< opi2d::Node * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeList_merge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeList_merge" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeList_merge" "', argument " "2"" of type '" "std::list< opi2d::Node * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeList_merge" "', argument " "2"" of type '" "std::list< opi2d::Node * > &""'"); 
  }
  arg2 = reinterpret_cast< std::list< opi2d::Node * > * >(argp2);
  (arg1)->merge(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NodeList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< opi2d::Node * > *arg1 = (std::list< opi2d::Node * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NodeList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NodeList" "', argument " "1"" of type '" "std::list< opi2d::Node * > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< opi2d::Node * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NodeList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SpriteList_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:SpriteList_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_iterator" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_opi2d_Sprite_Sm__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpriteList___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList___nonzero__" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  result = (bool)std_vector_Sl_opi2d_Sprite_Sm__Sg____nonzero__((std::vector< opi2d::Sprite * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpriteList___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList___bool__" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  result = (bool)std_vector_Sl_opi2d_Sprite_Sm__Sg____bool__((std::vector< opi2d::Sprite * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< opi2d::Sprite * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpriteList___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList___len__" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  result = std_vector_Sl_opi2d_Sprite_Sm__Sg____len__((std::vector< opi2d::Sprite * > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< opi2d::Sprite * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpriteList_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_pop" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  try {
    result = (std::vector< opi2d::Sprite * >::value_type)std_vector_Sl_opi2d_Sprite_Sm__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  std::vector< opi2d::Sprite * >::difference_type arg2 ;
  std::vector< opi2d::Sprite * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< opi2d::Sprite *,std::allocator< opi2d::Sprite * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SpriteList___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList___getslice__" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpriteList___getslice__" "', argument " "2"" of type '" "std::vector< opi2d::Sprite * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< opi2d::Sprite * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SpriteList___getslice__" "', argument " "3"" of type '" "std::vector< opi2d::Sprite * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< opi2d::Sprite * >::difference_type >(val3);
  try {
    result = (std::vector< opi2d::Sprite *,std::allocator< opi2d::Sprite * > > *)std_vector_Sl_opi2d_Sprite_Sm__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  std::vector< opi2d::Sprite * >::difference_type arg2 ;
  std::vector< opi2d::Sprite * >::difference_type arg3 ;
  std::vector< opi2d::Sprite *,std::allocator< opi2d::Sprite * > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SpriteList___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList___setslice__" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpriteList___setslice__" "', argument " "2"" of type '" "std::vector< opi2d::Sprite * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< opi2d::Sprite * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SpriteList___setslice__" "', argument " "3"" of type '" "std::vector< opi2d::Sprite * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< opi2d::Sprite * >::difference_type >(val3);
  {
    std::vector<opi2d::Sprite*,std::allocator< opi2d::Sprite * > > *ptr = (std::vector<opi2d::Sprite*,std::allocator< opi2d::Sprite * > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SpriteList___setslice__" "', argument " "4"" of type '" "std::vector< opi2d::Sprite *,std::allocator< opi2d::Sprite * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpriteList___setslice__" "', argument " "4"" of type '" "std::vector< opi2d::Sprite *,std::allocator< opi2d::Sprite * > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_opi2d_Sprite_Sm__Sg____setslice__(arg1,arg2,arg3,(std::vector< opi2d::Sprite *,std::allocator< opi2d::Sprite * > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  std::vector< opi2d::Sprite * >::difference_type arg2 ;
  std::vector< opi2d::Sprite * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SpriteList___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList___delslice__" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpriteList___delslice__" "', argument " "2"" of type '" "std::vector< opi2d::Sprite * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< opi2d::Sprite * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SpriteList___delslice__" "', argument " "3"" of type '" "std::vector< opi2d::Sprite * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< opi2d::Sprite * >::difference_type >(val3);
  try {
    std_vector_Sl_opi2d_Sprite_Sm__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  std::vector< opi2d::Sprite * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SpriteList___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList___delitem__" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpriteList___delitem__" "', argument " "2"" of type '" "std::vector< opi2d::Sprite * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< opi2d::Sprite * >::difference_type >(val2);
  try {
    std_vector_Sl_opi2d_Sprite_Sm__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< opi2d::Sprite *,std::allocator< opi2d::Sprite * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SpriteList___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList___getitem__" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< opi2d::Sprite *,std::allocator< opi2d::Sprite * > > *)std_vector_Sl_opi2d_Sprite_Sm__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< opi2d::Sprite *,std::allocator< opi2d::Sprite * > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SpriteList___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList___setitem__" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<opi2d::Sprite*,std::allocator< opi2d::Sprite * > > *ptr = (std::vector<opi2d::Sprite*,std::allocator< opi2d::Sprite * > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SpriteList___setitem__" "', argument " "3"" of type '" "std::vector< opi2d::Sprite *,std::allocator< opi2d::Sprite * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpriteList___setitem__" "', argument " "3"" of type '" "std::vector< opi2d::Sprite *,std::allocator< opi2d::Sprite * > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_opi2d_Sprite_Sm__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< opi2d::Sprite *,std::allocator< opi2d::Sprite * > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SpriteList___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList___delitem__" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_opi2d_Sprite_Sm__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<opi2d::Sprite*,std::allocator< opi2d::Sprite * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_SpriteList___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<opi2d::Sprite*,std::allocator< opi2d::Sprite * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SpriteList___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SpriteList___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< opi2d::Sprite * > *,std::vector< opi2d::Sprite * >::difference_type)\n"
    "    __delitem__(std::vector< opi2d::Sprite * > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  std::vector< opi2d::Sprite * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< opi2d::Sprite * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SpriteList___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList___getitem__" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpriteList___getitem__" "', argument " "2"" of type '" "std::vector< opi2d::Sprite * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< opi2d::Sprite * >::difference_type >(val2);
  try {
    result = (std::vector< opi2d::Sprite * >::value_type)std_vector_Sl_opi2d_Sprite_Sm__Sg____getitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<opi2d::Sprite*,std::allocator< opi2d::Sprite * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_SpriteList___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<opi2d::Sprite*,std::allocator< opi2d::Sprite * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SpriteList___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SpriteList___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< opi2d::Sprite * > *,PySliceObject *)\n"
    "    __getitem__(std::vector< opi2d::Sprite * > *,std::vector< opi2d::Sprite * >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  std::vector< opi2d::Sprite * >::difference_type arg2 ;
  std::vector< opi2d::Sprite * >::value_type arg3 = (std::vector< opi2d::Sprite * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SpriteList___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList___setitem__" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpriteList___setitem__" "', argument " "2"" of type '" "std::vector< opi2d::Sprite * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< opi2d::Sprite * >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SpriteList___setitem__" "', argument " "3"" of type '" "std::vector< opi2d::Sprite * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< opi2d::Sprite * >::value_type >(argp3);
  try {
    std_vector_Sl_opi2d_Sprite_Sm__Sg____setitem____SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<opi2d::Sprite*,std::allocator< opi2d::Sprite * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<opi2d::Sprite*,std::allocator< opi2d::Sprite * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SpriteList___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<opi2d::Sprite*,std::allocator< opi2d::Sprite * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SpriteList___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SpriteList___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< opi2d::Sprite * > *,PySliceObject *,std::vector< opi2d::Sprite *,std::allocator< opi2d::Sprite * > > const &)\n"
    "    __setitem__(std::vector< opi2d::Sprite * > *,std::vector< opi2d::Sprite * >::difference_type,std::vector< opi2d::Sprite * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  std::vector< opi2d::Sprite * >::value_type arg2 = (std::vector< opi2d::Sprite * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SpriteList_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_append" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpriteList_append" "', argument " "2"" of type '" "std::vector< opi2d::Sprite * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::vector< opi2d::Sprite * >::value_type >(argp2);
  std_vector_Sl_opi2d_Sprite_Sm__Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpriteList__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SpriteList")) SWIG_fail;
  result = (std::vector< opi2d::Sprite * > *)new std::vector< opi2d::Sprite * >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpriteList__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< opi2d::Sprite * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SpriteList",&obj0)) SWIG_fail;
  {
    std::vector<opi2d::Sprite*,std::allocator< opi2d::Sprite * > > *ptr = (std::vector<opi2d::Sprite*,std::allocator< opi2d::Sprite * > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpriteList" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpriteList" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< opi2d::Sprite * > *)new std::vector< opi2d::Sprite * >((std::vector< opi2d::Sprite * > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpriteList_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_empty" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  result = (bool)((std::vector< opi2d::Sprite * > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< opi2d::Sprite * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpriteList_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_size" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  result = ((std::vector< opi2d::Sprite * > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpriteList_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_clear" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  std::vector< opi2d::Sprite * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SpriteList_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_swap" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpriteList_swap" "', argument " "2"" of type '" "std::vector< opi2d::Sprite * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpriteList_swap" "', argument " "2"" of type '" "std::vector< opi2d::Sprite * > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< opi2d::Sprite * > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpriteList_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_get_allocator" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  result = ((std::vector< opi2d::Sprite * > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< opi2d::Sprite * >::allocator_type(static_cast< const std::vector< opi2d::Sprite * >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< opi2d::Sprite * >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpriteList_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_begin" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  result = ((std::vector< opi2d::Sprite * > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< opi2d::Sprite * >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< opi2d::Sprite * >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpriteList_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_end" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  result = ((std::vector< opi2d::Sprite * > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< opi2d::Sprite * >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< opi2d::Sprite * >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpriteList_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_rbegin" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  result = ((std::vector< opi2d::Sprite * > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< opi2d::Sprite * >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< opi2d::Sprite * >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpriteList_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_rend" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  result = ((std::vector< opi2d::Sprite * > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< opi2d::Sprite * >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpriteList__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< opi2d::Sprite * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SpriteList",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SpriteList" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * >::size_type""'");
  } 
  arg1 = static_cast< std::vector< opi2d::Sprite * >::size_type >(val1);
  result = (std::vector< opi2d::Sprite * > *)new std::vector< opi2d::Sprite * >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpriteList_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_pop_back" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  std::vector< opi2d::Sprite * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SpriteList_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_resize" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpriteList_resize" "', argument " "2"" of type '" "std::vector< opi2d::Sprite * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< opi2d::Sprite * >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  std::vector< opi2d::Sprite * >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< opi2d::Sprite * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SpriteList_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_erase" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SpriteList_erase" "', argument " "2"" of type '" "std::vector< opi2d::Sprite * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< opi2d::Sprite * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< opi2d::Sprite * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SpriteList_erase" "', argument " "2"" of type '" "std::vector< opi2d::Sprite * >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< opi2d::Sprite * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  std::vector< opi2d::Sprite * >::iterator arg2 ;
  std::vector< opi2d::Sprite * >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< opi2d::Sprite * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SpriteList_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_erase" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SpriteList_erase" "', argument " "2"" of type '" "std::vector< opi2d::Sprite * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< opi2d::Sprite * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< opi2d::Sprite * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SpriteList_erase" "', argument " "2"" of type '" "std::vector< opi2d::Sprite * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SpriteList_erase" "', argument " "3"" of type '" "std::vector< opi2d::Sprite * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< opi2d::Sprite * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< opi2d::Sprite * >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SpriteList_erase" "', argument " "3"" of type '" "std::vector< opi2d::Sprite * >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< opi2d::Sprite * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<opi2d::Sprite*,std::allocator< opi2d::Sprite * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< opi2d::Sprite * >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_SpriteList_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<opi2d::Sprite*,std::allocator< opi2d::Sprite * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< opi2d::Sprite * >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< opi2d::Sprite * >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_SpriteList_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SpriteList_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< opi2d::Sprite * > *,std::vector< opi2d::Sprite * >::iterator)\n"
    "    erase(std::vector< opi2d::Sprite * > *,std::vector< opi2d::Sprite * >::iterator,std::vector< opi2d::Sprite * >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpriteList__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * >::size_type arg1 ;
  std::vector< opi2d::Sprite * >::value_type arg2 = (std::vector< opi2d::Sprite * >::value_type) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< opi2d::Sprite * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SpriteList",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SpriteList" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * >::size_type""'");
  } 
  arg1 = static_cast< std::vector< opi2d::Sprite * >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpriteList" "', argument " "2"" of type '" "std::vector< opi2d::Sprite * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::vector< opi2d::Sprite * >::value_type >(argp2);
  result = (std::vector< opi2d::Sprite * > *)new std::vector< opi2d::Sprite * >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpriteList(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SpriteList__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SpriteList__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<opi2d::Sprite*,std::allocator< opi2d::Sprite * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpriteList__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SpriteList__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SpriteList'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< opi2d::Sprite * >()\n"
    "    std::vector< opi2d::Sprite * >(std::vector< opi2d::Sprite * > const &)\n"
    "    std::vector< opi2d::Sprite * >(std::vector< opi2d::Sprite * >::size_type)\n"
    "    std::vector< opi2d::Sprite * >(std::vector< opi2d::Sprite * >::size_type,std::vector< opi2d::Sprite * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  std::vector< opi2d::Sprite * >::value_type arg2 = (std::vector< opi2d::Sprite * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SpriteList_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_push_back" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpriteList_push_back" "', argument " "2"" of type '" "std::vector< opi2d::Sprite * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::vector< opi2d::Sprite * >::value_type >(argp2);
  (arg1)->push_back(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< opi2d::Sprite * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpriteList_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_front" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  result = (std::vector< opi2d::Sprite * >::value_type)((std::vector< opi2d::Sprite * > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< opi2d::Sprite * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpriteList_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_back" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  result = (std::vector< opi2d::Sprite * >::value_type)((std::vector< opi2d::Sprite * > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  std::vector< opi2d::Sprite * >::size_type arg2 ;
  std::vector< opi2d::Sprite * >::value_type arg3 = (std::vector< opi2d::Sprite * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SpriteList_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_assign" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpriteList_assign" "', argument " "2"" of type '" "std::vector< opi2d::Sprite * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< opi2d::Sprite * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SpriteList_assign" "', argument " "3"" of type '" "std::vector< opi2d::Sprite * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< opi2d::Sprite * >::value_type >(argp3);
  (arg1)->assign(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  std::vector< opi2d::Sprite * >::size_type arg2 ;
  std::vector< opi2d::Sprite * >::value_type arg3 = (std::vector< opi2d::Sprite * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SpriteList_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_resize" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpriteList_resize" "', argument " "2"" of type '" "std::vector< opi2d::Sprite * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< opi2d::Sprite * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SpriteList_resize" "', argument " "3"" of type '" "std::vector< opi2d::Sprite * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< opi2d::Sprite * >::value_type >(argp3);
  (arg1)->resize(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<opi2d::Sprite*,std::allocator< opi2d::Sprite * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SpriteList_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<opi2d::Sprite*,std::allocator< opi2d::Sprite * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SpriteList_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SpriteList_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< opi2d::Sprite * > *,std::vector< opi2d::Sprite * >::size_type)\n"
    "    resize(std::vector< opi2d::Sprite * > *,std::vector< opi2d::Sprite * >::size_type,std::vector< opi2d::Sprite * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  std::vector< opi2d::Sprite * >::iterator arg2 ;
  std::vector< opi2d::Sprite * >::value_type arg3 = (std::vector< opi2d::Sprite * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< opi2d::Sprite * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SpriteList_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_insert" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SpriteList_insert" "', argument " "2"" of type '" "std::vector< opi2d::Sprite * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< opi2d::Sprite * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< opi2d::Sprite * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SpriteList_insert" "', argument " "2"" of type '" "std::vector< opi2d::Sprite * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SpriteList_insert" "', argument " "3"" of type '" "std::vector< opi2d::Sprite * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< opi2d::Sprite * >::value_type >(argp3);
  result = (arg1)->insert(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< opi2d::Sprite * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  std::vector< opi2d::Sprite * >::iterator arg2 ;
  std::vector< opi2d::Sprite * >::size_type arg3 ;
  std::vector< opi2d::Sprite * >::value_type arg4 = (std::vector< opi2d::Sprite * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SpriteList_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_insert" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SpriteList_insert" "', argument " "2"" of type '" "std::vector< opi2d::Sprite * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< opi2d::Sprite * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< opi2d::Sprite * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SpriteList_insert" "', argument " "2"" of type '" "std::vector< opi2d::Sprite * >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SpriteList_insert" "', argument " "3"" of type '" "std::vector< opi2d::Sprite * >::size_type""'");
  } 
  arg3 = static_cast< std::vector< opi2d::Sprite * >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SpriteList_insert" "', argument " "4"" of type '" "std::vector< opi2d::Sprite * >::value_type""'"); 
  }
  arg4 = reinterpret_cast< std::vector< opi2d::Sprite * >::value_type >(argp4);
  (arg1)->insert(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<opi2d::Sprite*,std::allocator< opi2d::Sprite * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< opi2d::Sprite * >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SpriteList_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<opi2d::Sprite*,std::allocator< opi2d::Sprite * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< opi2d::Sprite * >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SpriteList_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SpriteList_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< opi2d::Sprite * > *,std::vector< opi2d::Sprite * >::iterator,std::vector< opi2d::Sprite * >::value_type)\n"
    "    insert(std::vector< opi2d::Sprite * > *,std::vector< opi2d::Sprite * >::iterator,std::vector< opi2d::Sprite * >::size_type,std::vector< opi2d::Sprite * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  std::vector< opi2d::Sprite * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SpriteList_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_reserve" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpriteList_reserve" "', argument " "2"" of type '" "std::vector< opi2d::Sprite * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< opi2d::Sprite * >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteList_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< opi2d::Sprite * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpriteList_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteList_capacity" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  result = ((std::vector< opi2d::Sprite * > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SpriteList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< opi2d::Sprite * > *arg1 = (std::vector< opi2d::Sprite * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SpriteList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpriteList" "', argument " "1"" of type '" "std::vector< opi2d::Sprite * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< opi2d::Sprite * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SpriteList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_InitOpioid2D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":InitOpioid2D")) SWIG_fail;
  opi2d::InitOpioid2D();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuitOpioid2D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":QuitOpioid2D")) SWIG_fail;
  opi2d::QuitOpioid2D();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DeleteCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  opi2d::DeleteCallback *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DeleteCallback",&obj0)) SWIG_fail;
  arg1 = obj0;
  if ( arg1 != Py_None ) {
    /* subclassed */
    result = (opi2d::DeleteCallback *)new SwigDirector_DeleteCallback(arg1); 
  } else {
    result = (opi2d::DeleteCallback *)new opi2d::DeleteCallback(); 
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__DeleteCallback, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DeleteCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::DeleteCallback *arg1 = (opi2d::DeleteCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DeleteCallback",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__DeleteCallback, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DeleteCallback" "', argument " "1"" of type '" "opi2d::DeleteCallback *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::DeleteCallback * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeleteCallback_OnDelete(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::DeleteCallback *arg1 = (opi2d::DeleteCallback *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DeleteCallback_OnDelete",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__DeleteCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeleteCallback_OnDelete" "', argument " "1"" of type '" "opi2d::DeleteCallback *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::DeleteCallback * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DeleteCallback_OnDelete" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      (arg1)->opi2d::DeleteCallback::OnDelete(arg2);
    } else {
      (arg1)->OnDelete(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_DeleteCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::DeleteCallback *arg1 = (opi2d::DeleteCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:disown_DeleteCallback",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__DeleteCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_DeleteCallback" "', argument " "1"" of type '" "opi2d::DeleteCallback *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::DeleteCallback * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DeleteCallback_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__DeleteCallback, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Identified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Identified *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Identified")) SWIG_fail;
  result = (opi2d::Identified *)new opi2d::Identified();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Identified, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Identified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Identified *arg1 = (opi2d::Identified *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Identified",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Identified, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Identified" "', argument " "1"" of type '" "opi2d::Identified *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Identified * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Identified_GetID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Identified *arg1 = (opi2d::Identified *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Identified_GetID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Identified, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Identified_GetID" "', argument " "1"" of type '" "opi2d::Identified *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Identified * >(argp1);
  result = (unsigned int)(arg1)->GetID();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Identified_ReUse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Identified *arg1 = (opi2d::Identified *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Identified_ReUse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Identified, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Identified_ReUse" "', argument " "1"" of type '" "opi2d::Identified *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Identified * >(argp1);
  (arg1)->ReUse();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Identified_SetManaged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Identified *arg1 = (opi2d::Identified *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Identified_SetManaged",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Identified, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Identified_SetManaged" "', argument " "1"" of type '" "opi2d::Identified *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Identified * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Identified_SetManaged" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetManaged(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Identified_Delete(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Identified *arg1 = (opi2d::Identified *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Identified_Delete",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Identified, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Identified_Delete" "', argument " "1"" of type '" "opi2d::Identified *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Identified * >(argp1);
  (arg1)->Delete();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Identified_IsDeleted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Identified *arg1 = (opi2d::Identified *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Identified_IsDeleted",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Identified, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Identified_IsDeleted" "', argument " "1"" of type '" "opi2d::Identified const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Identified * >(argp1);
  result = (bool)((opi2d::Identified const *)arg1)->IsDeleted();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Identified_SetDeleteCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::DeleteCallback *arg1 = (opi2d::DeleteCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Identified_SetDeleteCallback",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__DeleteCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Identified_SetDeleteCallback" "', argument " "1"" of type '" "opi2d::DeleteCallback *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::DeleteCallback * >(argp1);
  opi2d::Identified::SetDeleteCallback(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Identified_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Identified, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Vec2_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2_x_set" "', argument " "1"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2_x_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec2_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2_x_get" "', argument " "1"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  result = (floatval) ((arg1)->x);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2_y_set" "', argument " "1"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2_y_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec2_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2_y_get" "', argument " "1"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  result = (floatval) ((arg1)->y);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Vec2")) SWIG_fail;
  result = (opi2d::Vec2 *)new opi2d::Vec2();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec2__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  floatval arg1 ;
  floatval arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Vec2",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vec2" "', argument " "1"" of type '" "floatval""'");
  } 
  arg1 = static_cast< floatval >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vec2" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  result = (opi2d::Vec2 *)new opi2d::Vec2(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec2__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vec2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vec2" "', argument " "1"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vec2" "', argument " "1"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  result = (opi2d::Vec2 *)new opi2d::Vec2((opi2d::Vec2 const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec2(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Vec2__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_opi2d__Vec2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vec2__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vec2__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Vec2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    opi2d::Vec2()\n"
    "    opi2d::Vec2(floatval,floatval)\n"
    "    opi2d::Vec2(opi2d::Vec2 const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  floatval arg2 ;
  floatval arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vec2_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2_set" "', argument " "1"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vec2_set" "', argument " "3"" of type '" "floatval""'");
  } 
  arg3 = static_cast< floatval >(val3);
  result = (opi2d::Vec2 *) &(arg1)->set(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2_add__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  floatval arg2 ;
  floatval arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vec2_add",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2_add" "', argument " "1"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2_add" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vec2_add" "', argument " "3"" of type '" "floatval""'");
  } 
  arg3 = static_cast< floatval >(val3);
  result = (opi2d::Vec2 *) &(arg1)->add(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2_add__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2_add" "', argument " "1"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec2_add" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec2_add" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  result = (opi2d::Vec2 *) &(arg1)->add((opi2d::Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2_add(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Vec2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_opi2d__Vec2, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec2_add__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Vec2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Vec2_add__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vec2_add'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    add(opi2d::Vec2 *,floatval,floatval)\n"
    "    add(opi2d::Vec2 *,opi2d::Vec2 const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2_mul__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2_mul",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2_mul" "', argument " "1"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2_mul" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  result = (opi2d::Vec2 *) &(arg1)->mul(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2_mul__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  floatval arg2 ;
  floatval arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vec2_mul",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2_mul" "', argument " "1"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2_mul" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vec2_mul" "', argument " "3"" of type '" "floatval""'");
  } 
  arg3 = static_cast< floatval >(val3);
  result = (opi2d::Vec2 *) &(arg1)->mul(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2_mul__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2_mul",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2_mul" "', argument " "1"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec2_mul" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec2_mul" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  result = (opi2d::Vec2 *) &(arg1)->mul((opi2d::Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2_mul(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Vec2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_opi2d__Vec2, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec2_mul__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Vec2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vec2_mul__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Vec2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Vec2_mul__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vec2_mul'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mul(opi2d::Vec2 *,floatval)\n"
    "    mul(opi2d::Vec2 *,floatval,floatval)\n"
    "    mul(opi2d::Vec2 *,opi2d::Vec2 const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2___iadd__" "', argument " "1"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec2___iadd__" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec2___iadd__" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  result = (opi2d::Vec2 *) &(arg1)->operator +=((opi2d::Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2___isub__" "', argument " "1"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec2___isub__" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec2___isub__" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  result = (opi2d::Vec2 *) &(arg1)->operator -=((opi2d::Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2___imul__" "', argument " "1"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec2___imul__" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec2___imul__" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  result = (opi2d::Vec2 *) &(arg1)->operator *=((opi2d::Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Vec2 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2___add__" "', argument " "1"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec2___add__" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec2___add__" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  result = (arg1)->operator +((opi2d::Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new opi2d::Vec2(static_cast< const opi2d::Vec2& >(result))), SWIGTYPE_p_opi2d__Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Vec2 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2___sub__" "', argument " "1"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec2___sub__" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec2___sub__" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  result = (arg1)->operator -((opi2d::Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new opi2d::Vec2(static_cast< const opi2d::Vec2& >(result))), SWIGTYPE_p_opi2d__Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Vec2 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2___mul__" "', argument " "1"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2___mul__" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  result = (arg1)->operator *(arg2);
  resultobj = SWIG_NewPointerObj((new opi2d::Vec2(static_cast< const opi2d::Vec2& >(result))), SWIGTYPE_p_opi2d__Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2_dot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Vec2 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2_dot",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2_dot" "', argument " "1"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec2_dot" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec2_dot" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  result = (arg1)->dot((opi2d::Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new opi2d::Vec2(static_cast< const opi2d::Vec2& >(result))), SWIGTYPE_p_opi2d__Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2_rad2xy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec2_rad2xy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2_rad2xy" "', argument " "1"" of type '" "opi2d::Vec2 const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  result = ((opi2d::Vec2 const *)arg1)->rad2xy();
  resultobj = SWIG_NewPointerObj((new opi2d::Vec2(static_cast< const opi2d::Vec2& >(result))), SWIGTYPE_p_opi2d__Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2_xy2rad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec2_xy2rad",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2_xy2rad" "', argument " "1"" of type '" "opi2d::Vec2 const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  result = ((opi2d::Vec2 const *)arg1)->xy2rad();
  resultobj = SWIG_NewPointerObj((new opi2d::Vec2(static_cast< const opi2d::Vec2& >(result))), SWIGTYPE_p_opi2d__Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2_set_radial(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  floatval arg2 ;
  floatval arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vec2_set_radial",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2_set_radial" "', argument " "1"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2_set_radial" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vec2_set_radial" "', argument " "3"" of type '" "floatval""'");
  } 
  arg3 = static_cast< floatval >(val3);
  (arg1)->set_radial(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec2_length",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2_length" "', argument " "1"" of type '" "opi2d::Vec2 const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  result = (floatval)((opi2d::Vec2 const *)arg1)->length();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec2_direction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2_direction" "', argument " "1"" of type '" "opi2d::Vec2 const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  result = (floatval)((opi2d::Vec2 const *)arg1)->direction();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2_set_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2_set_length",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2_set_length" "', argument " "1"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2_set_length" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  (arg1)->set_length(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2_set_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2_set_direction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2_set_direction" "', argument " "1"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2_set_direction" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  (arg1)->set_direction(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2_unitvec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec2_unitvec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2_unitvec" "', argument " "1"" of type '" "opi2d::Vec2 const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  result = ((opi2d::Vec2 const *)arg1)->unitvec();
  resultobj = SWIG_NewPointerObj((new opi2d::Vec2(static_cast< const opi2d::Vec2& >(result))), SWIGTYPE_p_opi2d__Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2_ortho(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec2_ortho",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2_ortho" "', argument " "1"" of type '" "opi2d::Vec2 const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  result = ((opi2d::Vec2 const *)arg1)->ortho();
  resultobj = SWIG_NewPointerObj((new opi2d::Vec2(static_cast< const opi2d::Vec2& >(result))), SWIGTYPE_p_opi2d__Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2_orthounit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec2_orthounit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2_orthounit" "', argument " "1"" of type '" "opi2d::Vec2 const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  result = ((opi2d::Vec2 const *)arg1)->orthounit();
  resultobj = SWIG_NewPointerObj((new opi2d::Vec2(static_cast< const opi2d::Vec2& >(result))), SWIGTYPE_p_opi2d__Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2_angle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec2_angle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2_angle" "', argument " "1"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec2_angle" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec2_angle" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  result = (floatval)(arg1)->angle((opi2d::Vec2 const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Vec2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = (opi2d::Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Vec2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Vec2, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vec2" "', argument " "1"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Vec2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Vec2, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Mat9_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Mat9 *arg1 = (opi2d::Mat9 *) 0 ;
  floatval *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat9_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Mat9, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat9_value_set" "', argument " "1"" of type '" "opi2d::Mat9 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Mat9 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mat9_value_set" "', argument " "2"" of type '" "floatval [9]""'"); 
  } 
  arg2 = reinterpret_cast< floatval * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)9; ++ii) arg1->value[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""value""' of type '""floatval [9]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat9_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Mat9 *arg1 = (opi2d::Mat9 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat9_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Mat9, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat9_value_get" "', argument " "1"" of type '" "opi2d::Mat9 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Mat9 * >(argp1);
  result = (floatval *)(floatval *) ((arg1)->value);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mat9__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Mat9 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Mat9")) SWIG_fail;
  result = (opi2d::Mat9 *)new opi2d::Mat9();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Mat9, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mat9__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  floatval *arg1 = (floatval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Mat9 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Mat9",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Mat9" "', argument " "1"" of type '" "floatval *""'"); 
  }
  arg1 = reinterpret_cast< floatval * >(argp1);
  result = (opi2d::Mat9 *)new opi2d::Mat9(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Mat9, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mat9__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Mat9 *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Mat9 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Mat9",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_opi2d__Mat9,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Mat9" "', argument " "1"" of type '" "opi2d::Mat9 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Mat9" "', argument " "1"" of type '" "opi2d::Mat9 const &""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Mat9 * >(argp1);
  result = (opi2d::Mat9 *)new opi2d::Mat9((opi2d::Mat9 const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Mat9, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mat9(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Mat9__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_float, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Mat9__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_opi2d__Mat9, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Mat9__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Mat9'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    opi2d::Mat9()\n"
    "    opi2d::Mat9(floatval *)\n"
    "    opi2d::Mat9(opi2d::Mat9 const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat9_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Mat9 *arg1 = (opi2d::Mat9 *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat9_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Mat9, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat9_get" "', argument " "1"" of type '" "opi2d::Mat9 const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Mat9 * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mat9_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (floatval)((opi2d::Mat9 const *)arg1)->get(arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat9_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Mat9 *arg1 = (opi2d::Mat9 *) 0 ;
  int arg2 ;
  floatval arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Mat9_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Mat9, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat9_set" "', argument " "1"" of type '" "opi2d::Mat9 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Mat9 * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mat9_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mat9_set" "', argument " "3"" of type '" "floatval""'");
  } 
  arg3 = static_cast< floatval >(val3);
  (arg1)->set(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat9_mul(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Mat9 *arg1 = (opi2d::Mat9 *) 0 ;
  opi2d::Mat9 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat9_mul",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Mat9, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat9_mul" "', argument " "1"" of type '" "opi2d::Mat9 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Mat9 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Mat9,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mat9_mul" "', argument " "2"" of type '" "opi2d::Mat9 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mat9_mul" "', argument " "2"" of type '" "opi2d::Mat9 const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Mat9 * >(argp2);
  (arg1)->mul((opi2d::Mat9 const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat9_translate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Mat9 *arg1 = (opi2d::Mat9 *) 0 ;
  floatval arg2 ;
  floatval arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Mat9_translate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Mat9, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat9_translate" "', argument " "1"" of type '" "opi2d::Mat9 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Mat9 * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mat9_translate" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mat9_translate" "', argument " "3"" of type '" "floatval""'");
  } 
  arg3 = static_cast< floatval >(val3);
  (arg1)->translate(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat9_scale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Mat9 *arg1 = (opi2d::Mat9 *) 0 ;
  floatval arg2 ;
  floatval arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Mat9_scale",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Mat9, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat9_scale" "', argument " "1"" of type '" "opi2d::Mat9 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Mat9 * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mat9_scale" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mat9_scale" "', argument " "3"" of type '" "floatval""'");
  } 
  arg3 = static_cast< floatval >(val3);
  (arg1)->scale(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat9_rotate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Mat9 *arg1 = (opi2d::Mat9 *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat9_rotate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Mat9, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat9_rotate" "', argument " "1"" of type '" "opi2d::Mat9 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Mat9 * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mat9_rotate" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  (arg1)->rotate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat9_transform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Mat9 *arg1 = (opi2d::Mat9 *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mat9_transform",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Mat9, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat9_transform" "', argument " "1"" of type '" "opi2d::Mat9 const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Mat9 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mat9_transform" "', argument " "2"" of type '" "opi2d::Vec2 &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mat9_transform" "', argument " "2"" of type '" "opi2d::Vec2 &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  ((opi2d::Mat9 const *)arg1)->transform(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat9_identity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Mat9 *arg1 = (opi2d::Mat9 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat9_identity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Mat9, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat9_identity" "', argument " "1"" of type '" "opi2d::Mat9 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Mat9 * >(argp1);
  (arg1)->identity();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mat9_inversed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Mat9 *arg1 = (opi2d::Mat9 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Mat9 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mat9_inversed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Mat9, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mat9_inversed" "', argument " "1"" of type '" "opi2d::Mat9 const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Mat9 * >(argp1);
  result = ((opi2d::Mat9 const *)arg1)->inversed();
  resultobj = SWIG_NewPointerObj((new opi2d::Mat9(static_cast< const opi2d::Mat9& >(result))), SWIGTYPE_p_opi2d__Mat9, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Mat9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Mat9 *arg1 = (opi2d::Mat9 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Mat9",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Mat9, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Mat9" "', argument " "1"" of type '" "opi2d::Mat9 *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Mat9 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Mat9_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Mat9, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Rect_topleft_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Rect *arg1 = (opi2d::Rect *) 0 ;
  opi2d::Vec2 *arg2 = (opi2d::Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rect_topleft_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Rect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rect_topleft_set" "', argument " "1"" of type '" "opi2d::Rect *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Rect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rect_topleft_set" "', argument " "2"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  if (arg1) (arg1)->topleft = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rect_topleft_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Rect *arg1 = (opi2d::Rect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rect_topleft_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Rect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rect_topleft_get" "', argument " "1"" of type '" "opi2d::Rect *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Rect * >(argp1);
  result = (opi2d::Vec2 *)& ((arg1)->topleft);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rect_size_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Rect *arg1 = (opi2d::Rect *) 0 ;
  opi2d::Vec2 *arg2 = (opi2d::Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rect_size_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Rect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rect_size_set" "', argument " "1"" of type '" "opi2d::Rect *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Rect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rect_size_set" "', argument " "2"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  if (arg1) (arg1)->size = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rect_size_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Rect *arg1 = (opi2d::Rect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rect_size_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Rect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rect_size_get" "', argument " "1"" of type '" "opi2d::Rect *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Rect * >(argp1);
  result = (opi2d::Vec2 *)& ((arg1)->size);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Rect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Rect")) SWIG_fail;
  result = (opi2d::Rect *)new opi2d::Rect();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Rect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  floatval arg1 ;
  floatval arg2 ;
  floatval arg3 ;
  floatval arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  opi2d::Rect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Rect",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Rect" "', argument " "1"" of type '" "floatval""'");
  } 
  arg1 = static_cast< floatval >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Rect" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Rect" "', argument " "3"" of type '" "floatval""'");
  } 
  arg3 = static_cast< floatval >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Rect" "', argument " "4"" of type '" "floatval""'");
  } 
  arg4 = static_cast< floatval >(val4);
  result = (opi2d::Rect *)new opi2d::Rect(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Rect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rect__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Rect *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Rect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Rect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_opi2d__Rect,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Rect" "', argument " "1"" of type '" "opi2d::Rect const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Rect" "', argument " "1"" of type '" "opi2d::Rect const &""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Rect * >(argp1);
  result = (opi2d::Rect *)new opi2d::Rect((opi2d::Rect const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Rect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rect(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Rect__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_opi2d__Rect, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Rect__SWIG_2(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Rect__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Rect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    opi2d::Rect()\n"
    "    opi2d::Rect(floatval,floatval,floatval,floatval)\n"
    "    opi2d::Rect(opi2d::Rect const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rect_contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Rect *arg1 = (opi2d::Rect *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rect_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Rect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rect_contains" "', argument " "1"" of type '" "opi2d::Rect *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Rect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rect_contains" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rect_contains" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  result = (bool)(arg1)->contains((opi2d::Vec2 const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Rect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Rect *arg1 = (opi2d::Rect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Rect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Rect, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Rect" "', argument " "1"" of type '" "opi2d::Rect *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Rect * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Rect_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Rect, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_FreeRect_points_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::FreeRect *arg1 = (opi2d::FreeRect *) 0 ;
  opi2d::Vec2 *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FreeRect_points_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__FreeRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeRect_points_set" "', argument " "1"" of type '" "opi2d::FreeRect *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::FreeRect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FreeRect_points_set" "', argument " "2"" of type '" "opi2d::Vec2 [4]""'"); 
  } 
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)4; ++ii) arg1->points[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""points""' of type '""opi2d::Vec2 [4]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FreeRect_points_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::FreeRect *arg1 = (opi2d::FreeRect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FreeRect_points_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__FreeRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeRect_points_get" "', argument " "1"" of type '" "opi2d::FreeRect *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::FreeRect * >(argp1);
  result = (opi2d::Vec2 *)(opi2d::Vec2 *) ((arg1)->points);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FreeRect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::FreeRect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FreeRect")) SWIG_fail;
  result = (opi2d::FreeRect *)new opi2d::FreeRect();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__FreeRect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FreeRect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Rect *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::FreeRect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FreeRect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_opi2d__Rect,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FreeRect" "', argument " "1"" of type '" "opi2d::Rect const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FreeRect" "', argument " "1"" of type '" "opi2d::Rect const &""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Rect * >(argp1);
  result = (opi2d::FreeRect *)new opi2d::FreeRect((opi2d::Rect const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__FreeRect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FreeRect(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FreeRect__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_opi2d__Rect, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FreeRect__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FreeRect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    opi2d::FreeRect()\n"
    "    opi2d::FreeRect(opi2d::Rect const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FreeRect_contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::FreeRect *arg1 = (opi2d::FreeRect *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FreeRect_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__FreeRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeRect_contains" "', argument " "1"" of type '" "opi2d::FreeRect const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::FreeRect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FreeRect_contains" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FreeRect_contains" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  result = (bool)((opi2d::FreeRect const *)arg1)->contains((opi2d::Vec2 const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FreeRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::FreeRect *arg1 = (opi2d::FreeRect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FreeRect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__FreeRect, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FreeRect" "', argument " "1"" of type '" "opi2d::FreeRect *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::FreeRect * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FreeRect_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__FreeRect, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Color_red_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Color *arg1 = (opi2d::Color *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color_red_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_red_set" "', argument " "1"" of type '" "opi2d::Color *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Color * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Color_red_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->red = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color_red_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Color *arg1 = (opi2d::Color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Color_red_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_red_get" "', argument " "1"" of type '" "opi2d::Color *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Color * >(argp1);
  result = (float) ((arg1)->red);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color_green_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Color *arg1 = (opi2d::Color *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color_green_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_green_set" "', argument " "1"" of type '" "opi2d::Color *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Color * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Color_green_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->green = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color_green_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Color *arg1 = (opi2d::Color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Color_green_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_green_get" "', argument " "1"" of type '" "opi2d::Color *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Color * >(argp1);
  result = (float) ((arg1)->green);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color_blue_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Color *arg1 = (opi2d::Color *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color_blue_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_blue_set" "', argument " "1"" of type '" "opi2d::Color *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Color * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Color_blue_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->blue = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color_blue_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Color *arg1 = (opi2d::Color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Color_blue_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_blue_get" "', argument " "1"" of type '" "opi2d::Color *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Color * >(argp1);
  result = (float) ((arg1)->blue);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color_alpha_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Color *arg1 = (opi2d::Color *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color_alpha_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_alpha_set" "', argument " "1"" of type '" "opi2d::Color *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Color * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Color_alpha_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->alpha = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color_alpha_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Color *arg1 = (opi2d::Color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Color_alpha_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_alpha_get" "', argument " "1"" of type '" "opi2d::Color *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Color * >(argp1);
  result = (float) ((arg1)->alpha);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Color__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  opi2d::Color *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Color",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Color" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Color" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Color" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Color" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (opi2d::Color *)new opi2d::Color(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Color, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Color__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  opi2d::Color *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Color",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Color" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Color" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Color" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (opi2d::Color *)new opi2d::Color(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Color, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Color__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Color *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Color",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Color" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Color" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (opi2d::Color *)new opi2d::Color(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Color, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Color__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Color *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Color",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Color" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = (opi2d::Color *)new opi2d::Color(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Color, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Color__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Color *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Color")) SWIG_fail;
  result = (opi2d::Color *)new opi2d::Color();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Color, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Color__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Color *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Color *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Color",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_opi2d__Color,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Color" "', argument " "1"" of type '" "opi2d::Color const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Color" "', argument " "1"" of type '" "opi2d::Color const &""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Color * >(argp1);
  result = (opi2d::Color *)new opi2d::Color((opi2d::Color const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Color, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Color(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Color__SWIG_4(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_opi2d__Color, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Color__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Color__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Color__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Color__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Color__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Color'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    opi2d::Color(float,float,float,float)\n"
    "    opi2d::Color(float,float,float)\n"
    "    opi2d::Color(float,float)\n"
    "    opi2d::Color(float)\n"
    "    opi2d::Color()\n"
    "    opi2d::Color(opi2d::Color const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color_set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Color *arg1 = (opi2d::Color *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Color_set",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_set" "', argument " "1"" of type '" "opi2d::Color *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Color * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Color_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Color_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Color_set" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Color_set" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  (arg1)->set(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color_set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Color *arg1 = (opi2d::Color *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Color_set",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_set" "', argument " "1"" of type '" "opi2d::Color *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Color * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Color_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Color_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Color_set" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  (arg1)->set(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color_set__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Color *arg1 = (opi2d::Color *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Color_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_set" "', argument " "1"" of type '" "opi2d::Color *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Color * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Color_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Color_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  (arg1)->set(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color_set__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Color *arg1 = (opi2d::Color *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_set" "', argument " "1"" of type '" "opi2d::Color *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Color * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Color_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  (arg1)->set(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color_set__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Color *arg1 = (opi2d::Color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Color_set",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_set" "', argument " "1"" of type '" "opi2d::Color *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Color * >(argp1);
  (arg1)->set();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color_set(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Color, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Color_set__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Color, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Color_set__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Color, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Color_set__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Color, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Color_set__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Color, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Color_set__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Color_set'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    set(opi2d::Color *,float,float,float,float)\n"
    "    set(opi2d::Color *,float,float,float)\n"
    "    set(opi2d::Color *,float,float)\n"
    "    set(opi2d::Color *,float)\n"
    "    set(opi2d::Color *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Color *arg1 = (opi2d::Color *) 0 ;
  opi2d::Color *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Color result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color___mul__" "', argument " "1"" of type '" "opi2d::Color const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Color * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Color,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Color___mul__" "', argument " "2"" of type '" "opi2d::Color const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Color___mul__" "', argument " "2"" of type '" "opi2d::Color const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Color * >(argp2);
  result = ((opi2d::Color const *)arg1)->operator *((opi2d::Color const &)*arg2);
  resultobj = SWIG_NewPointerObj((new opi2d::Color(static_cast< const opi2d::Color& >(result))), SWIGTYPE_p_opi2d__Color, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Color *arg1 = (opi2d::Color *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Color result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color___mul__" "', argument " "1"" of type '" "opi2d::Color const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Color * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Color___mul__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = ((opi2d::Color const *)arg1)->operator *(arg2);
  resultobj = SWIG_NewPointerObj((new opi2d::Color(static_cast< const opi2d::Color& >(result))), SWIGTYPE_p_opi2d__Color, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color___mul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Color, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_opi2d__Color, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Color___mul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Color, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Color___mul____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Color___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Color *arg1 = (opi2d::Color *) 0 ;
  opi2d::Color *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Color *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Color, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color___imul__" "', argument " "1"" of type '" "opi2d::Color *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Color * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Color,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Color___imul__" "', argument " "2"" of type '" "opi2d::Color const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Color___imul__" "', argument " "2"" of type '" "opi2d::Color const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Color * >(argp2);
  result = (opi2d::Color *) &(arg1)->operator *=((opi2d::Color const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Color, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Color *arg1 = (opi2d::Color *) 0 ;
  opi2d::Color *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Color result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color___add__" "', argument " "1"" of type '" "opi2d::Color const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Color * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Color,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Color___add__" "', argument " "2"" of type '" "opi2d::Color const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Color___add__" "', argument " "2"" of type '" "opi2d::Color const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Color * >(argp2);
  result = ((opi2d::Color const *)arg1)->operator +((opi2d::Color const &)*arg2);
  resultobj = SWIG_NewPointerObj((new opi2d::Color(static_cast< const opi2d::Color& >(result))), SWIGTYPE_p_opi2d__Color, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Color *arg1 = (opi2d::Color *) 0 ;
  opi2d::Color *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Color result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color___sub__" "', argument " "1"" of type '" "opi2d::Color const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Color * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Color,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Color___sub__" "', argument " "2"" of type '" "opi2d::Color const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Color___sub__" "', argument " "2"" of type '" "opi2d::Color const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Color * >(argp2);
  result = ((opi2d::Color const *)arg1)->operator -((opi2d::Color const &)*arg2);
  resultobj = SWIG_NewPointerObj((new opi2d::Color(static_cast< const opi2d::Color& >(result))), SWIGTYPE_p_opi2d__Color, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color_Apply(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Color *arg1 = (opi2d::Color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Color_Apply",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_Apply" "', argument " "1"" of type '" "opi2d::Color const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Color * >(argp1);
  ((opi2d::Color const *)arg1)->Apply();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Color(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Color *arg1 = (opi2d::Color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Color",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Color, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Color" "', argument " "1"" of type '" "opi2d::Color *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Color * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Color_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Color, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Ticker_now_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Ticker *arg1 = (opi2d::Ticker *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ticker_now_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Ticker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ticker_now_set" "', argument " "1"" of type '" "opi2d::Ticker *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Ticker * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ticker_now_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->now = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ticker_now_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Ticker *arg1 = (opi2d::Ticker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ticker_now_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Ticker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ticker_now_get" "', argument " "1"" of type '" "opi2d::Ticker *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Ticker * >(argp1);
  result = (int) ((arg1)->now);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ticker_prevReal_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Ticker *arg1 = (opi2d::Ticker *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ticker_prevReal_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Ticker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ticker_prevReal_set" "', argument " "1"" of type '" "opi2d::Ticker *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Ticker * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ticker_prevReal_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->prevReal = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ticker_prevReal_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Ticker *arg1 = (opi2d::Ticker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ticker_prevReal_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Ticker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ticker_prevReal_get" "', argument " "1"" of type '" "opi2d::Ticker *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Ticker * >(argp1);
  result = (int) ((arg1)->prevReal);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ticker_nextReal_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Ticker *arg1 = (opi2d::Ticker *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ticker_nextReal_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Ticker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ticker_nextReal_set" "', argument " "1"" of type '" "opi2d::Ticker *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Ticker * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ticker_nextReal_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->nextReal = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ticker_nextReal_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Ticker *arg1 = (opi2d::Ticker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ticker_nextReal_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Ticker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ticker_nextReal_get" "', argument " "1"" of type '" "opi2d::Ticker *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Ticker * >(argp1);
  result = (int) ((arg1)->nextReal);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ticker_realSpan_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Ticker *arg1 = (opi2d::Ticker *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ticker_realSpan_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Ticker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ticker_realSpan_set" "', argument " "1"" of type '" "opi2d::Ticker *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Ticker * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ticker_realSpan_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->realSpan = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ticker_realSpan_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Ticker *arg1 = (opi2d::Ticker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ticker_realSpan_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Ticker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ticker_realSpan_get" "', argument " "1"" of type '" "opi2d::Ticker *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Ticker * >(argp1);
  result = (int) ((arg1)->realSpan);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ticker_delta_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Ticker *arg1 = (opi2d::Ticker *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ticker_delta_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Ticker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ticker_delta_set" "', argument " "1"" of type '" "opi2d::Ticker *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Ticker * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ticker_delta_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->delta = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ticker_delta_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Ticker *arg1 = (opi2d::Ticker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ticker_delta_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Ticker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ticker_delta_get" "', argument " "1"" of type '" "opi2d::Ticker *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Ticker * >(argp1);
  result = (double) ((arg1)->delta);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ticker_sinceReal_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Ticker *arg1 = (opi2d::Ticker *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ticker_sinceReal_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Ticker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ticker_sinceReal_set" "', argument " "1"" of type '" "opi2d::Ticker *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Ticker * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ticker_sinceReal_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->sinceReal = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ticker_sinceReal_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Ticker *arg1 = (opi2d::Ticker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ticker_sinceReal_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Ticker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ticker_sinceReal_get" "', argument " "1"" of type '" "opi2d::Ticker *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Ticker * >(argp1);
  result = (double) ((arg1)->sinceReal);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ticker_realTick_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Ticker *arg1 = (opi2d::Ticker *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ticker_realTick_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Ticker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ticker_realTick_set" "', argument " "1"" of type '" "opi2d::Ticker *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Ticker * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ticker_realTick_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->realTick = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ticker_realTick_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Ticker *arg1 = (opi2d::Ticker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ticker_realTick_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Ticker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ticker_realTick_get" "', argument " "1"" of type '" "opi2d::Ticker *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Ticker * >(argp1);
  result = (bool) ((arg1)->realTick);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Ticker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Ticker *arg1 = (opi2d::Ticker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Ticker",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Ticker, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Ticker" "', argument " "1"" of type '" "opi2d::Ticker *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Ticker * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Ticker_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Ticker, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Texture__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  bool arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Texture *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Texture",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Texture" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Texture" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (opi2d::Texture *)new opi2d::Texture(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Texture, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Texture__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Texture *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Texture",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Texture" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (opi2d::Texture *)new opi2d::Texture(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Texture, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Texture(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Texture__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Texture__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Texture'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    opi2d::Texture(int,bool)\n"
    "    opi2d::Texture(int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Texture(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Texture *arg1 = (opi2d::Texture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Texture",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Texture, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Texture" "', argument " "1"" of type '" "opi2d::Texture *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Texture * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_WriteBytes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Texture *arg1 = (opi2d::Texture *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Texture_WriteBytes",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Texture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_WriteBytes" "', argument " "1"" of type '" "opi2d::Texture *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Texture * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Texture_WriteBytes" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Texture_WriteBytes" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Texture_WriteBytes" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Texture_WriteBytes" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_AsCharPtrAndSize(obj5, &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Texture_WriteBytes" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->WriteBytes(arg2,arg3,arg4,arg5,(char const *)arg6);
  resultobj = SWIG_Py_Void();
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return resultobj;
fail:
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Texture_GetTexID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Texture *arg1 = (opi2d::Texture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Texture_GetTexID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Texture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Texture_GetTexID" "', argument " "1"" of type '" "opi2d::Texture const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Texture * >(argp1);
  result = (int)((opi2d::Texture const *)arg1)->GetTexID();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Texture_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Texture, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Image(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Texture *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  opi2d::Image *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_Image",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_opi2d__Texture,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Image" "', argument " "1"" of type '" "opi2d::Texture const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Image" "', argument " "1"" of type '" "opi2d::Texture const &""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Texture * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Image" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Image" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Image" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Image" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Image" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_float(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_Image" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  result = (opi2d::Image *)new opi2d::Image((opi2d::Texture const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Image, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Image(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Image *arg1 = (opi2d::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Image",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Image, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Image" "', argument " "1"" of type '" "opi2d::Image *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Image * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_AddCollisionNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Image *arg1 = (opi2d::Image *) 0 ;
  floatval arg2 ;
  floatval arg3 ;
  floatval arg4 ;
  floatval arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Image_AddCollisionNode",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_AddCollisionNode" "', argument " "1"" of type '" "opi2d::Image *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Image * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Image_AddCollisionNode" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Image_AddCollisionNode" "', argument " "3"" of type '" "floatval""'");
  } 
  arg3 = static_cast< floatval >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Image_AddCollisionNode" "', argument " "4"" of type '" "floatval""'");
  } 
  arg4 = static_cast< floatval >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Image_AddCollisionNode" "', argument " "5"" of type '" "floatval""'");
  } 
  arg5 = static_cast< floatval >(val5);
  (arg1)->AddCollisionNode(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_ClearCollisionNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Image *arg1 = (opi2d::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Image_ClearCollisionNodes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_ClearCollisionNodes" "', argument " "1"" of type '" "opi2d::Image *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Image * >(argp1);
  (arg1)->ClearCollisionNodes();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_texid_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Image *arg1 = (opi2d::Image *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Image_texid_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_texid_set" "', argument " "1"" of type '" "opi2d::Image *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Image * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Image_texid_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->texid = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_texid_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Image *arg1 = (opi2d::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Image_texid_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_texid_get" "', argument " "1"" of type '" "opi2d::Image *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Image * >(argp1);
  result = (int) ((arg1)->texid);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_w_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Image *arg1 = (opi2d::Image *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Image_w_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_w_set" "', argument " "1"" of type '" "opi2d::Image *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Image * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Image_w_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->w = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_w_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Image *arg1 = (opi2d::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Image_w_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_w_get" "', argument " "1"" of type '" "opi2d::Image *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Image * >(argp1);
  result = (int) ((arg1)->w);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_h_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Image *arg1 = (opi2d::Image *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Image_h_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_h_set" "', argument " "1"" of type '" "opi2d::Image *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Image * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Image_h_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->h = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_h_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Image *arg1 = (opi2d::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Image_h_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_h_get" "', argument " "1"" of type '" "opi2d::Image *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Image * >(argp1);
  result = (int) ((arg1)->h);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_tx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Image *arg1 = (opi2d::Image *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Image_tx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_tx_set" "', argument " "1"" of type '" "opi2d::Image *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Image * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Image_tx_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->tx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_tx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Image *arg1 = (opi2d::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Image_tx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_tx_get" "', argument " "1"" of type '" "opi2d::Image *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Image * >(argp1);
  result = (float) ((arg1)->tx);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_ty_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Image *arg1 = (opi2d::Image *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Image_ty_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_ty_set" "', argument " "1"" of type '" "opi2d::Image *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Image * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Image_ty_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->ty = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_ty_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Image *arg1 = (opi2d::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Image_ty_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_ty_get" "', argument " "1"" of type '" "opi2d::Image *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Image * >(argp1);
  result = (float) ((arg1)->ty);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_txx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Image *arg1 = (opi2d::Image *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Image_txx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_txx_set" "', argument " "1"" of type '" "opi2d::Image *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Image * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Image_txx_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->txx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_txx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Image *arg1 = (opi2d::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Image_txx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_txx_get" "', argument " "1"" of type '" "opi2d::Image *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Image * >(argp1);
  result = (float) ((arg1)->txx);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_tyy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Image *arg1 = (opi2d::Image *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Image_tyy_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_tyy_set" "', argument " "1"" of type '" "opi2d::Image *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Image * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Image_tyy_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->tyy = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_tyy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Image *arg1 = (opi2d::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Image_tyy_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_tyy_get" "', argument " "1"" of type '" "opi2d::Image *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Image * >(argp1);
  result = (float) ((arg1)->tyy);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_hotspot_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Image *arg1 = (opi2d::Image *) 0 ;
  opi2d::Vec2 *arg2 = (opi2d::Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Image_hotspot_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_hotspot_set" "', argument " "1"" of type '" "opi2d::Image *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Image_hotspot_set" "', argument " "2"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  if (arg1) (arg1)->hotspot = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_hotspot_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Image *arg1 = (opi2d::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Image_hotspot_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_hotspot_get" "', argument " "1"" of type '" "opi2d::Image *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Image * >(argp1);
  result = (opi2d::Vec2 *)& ((arg1)->hotspot);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Image_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Image, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GridImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::GridImage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_GridImage",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GridImage" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GridImage" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (opi2d::GridImage *)new opi2d::GridImage(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__GridImage, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GridImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::GridImage *arg1 = (opi2d::GridImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GridImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__GridImage, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GridImage" "', argument " "1"" of type '" "opi2d::GridImage *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::GridImage * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridImage_AppendImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::GridImage *arg1 = (opi2d::GridImage *) 0 ;
  opi2d::Image *arg2 = (opi2d::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridImage_AppendImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__GridImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridImage_AppendImage" "', argument " "1"" of type '" "opi2d::GridImage *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::GridImage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GridImage_AppendImage" "', argument " "2"" of type '" "opi2d::Image *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Image * >(argp2);
  (arg1)->AppendImage(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridImage_SetSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::GridImage *arg1 = (opi2d::GridImage *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GridImage_SetSize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__GridImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridImage_SetSize" "', argument " "1"" of type '" "opi2d::GridImage *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::GridImage * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GridImage_SetSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GridImage_SetSize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->SetSize(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GridImage_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__GridImage, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ActionCallbacks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  opi2d::ActionCallbacks *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ActionCallbacks",&obj0)) SWIG_fail;
  arg1 = obj0;
  if ( arg1 != Py_None ) {
    /* subclassed */
    result = (opi2d::ActionCallbacks *)new SwigDirector_ActionCallbacks(arg1); 
  } else {
    SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
    SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__ActionCallbacks, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ActionCallbacks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ActionCallbacks *arg1 = (opi2d::ActionCallbacks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ActionCallbacks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ActionCallbacks, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ActionCallbacks" "', argument " "1"" of type '" "opi2d::ActionCallbacks *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ActionCallbacks * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ActionCallbacks_End(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ActionCallbacks *arg1 = (opi2d::ActionCallbacks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ActionCallbacks_End",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ActionCallbacks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ActionCallbacks_End" "', argument " "1"" of type '" "opi2d::ActionCallbacks *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ActionCallbacks * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      Swig::DirectorPureVirtualException::raise("opi2d::ActionCallbacks::End");
    } else {
      (arg1)->End();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ActionCallbacks_Wake(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ActionCallbacks *arg1 = (opi2d::ActionCallbacks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ActionCallbacks_Wake",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ActionCallbacks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ActionCallbacks_Wake" "', argument " "1"" of type '" "opi2d::ActionCallbacks *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ActionCallbacks * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      Swig::DirectorPureVirtualException::raise("opi2d::ActionCallbacks::Wake");
    } else {
      (arg1)->Wake();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_ActionCallbacks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ActionCallbacks *arg1 = (opi2d::ActionCallbacks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:disown_ActionCallbacks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ActionCallbacks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_ActionCallbacks" "', argument " "1"" of type '" "opi2d::ActionCallbacks *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ActionCallbacks * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ActionCallbacks_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__ActionCallbacks, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Action(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Action *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Action")) SWIG_fail;
  result = (opi2d::Action *)new opi2d::Action();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Action, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Action(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Action *arg1 = (opi2d::Action *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Action",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Action, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Action" "', argument " "1"" of type '" "opi2d::Action *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Action * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Action_Setup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Action *arg1 = (opi2d::Action *) 0 ;
  opi2d::Node *arg2 = (opi2d::Node *) 0 ;
  opi2d::ActionCallbacks *arg3 = (opi2d::ActionCallbacks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Action_Setup",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Action, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Action_Setup" "', argument " "1"" of type '" "opi2d::Action *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Action * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Action_Setup" "', argument " "2"" of type '" "opi2d::Node *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Node * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_opi2d__ActionCallbacks, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Action_Setup" "', argument " "3"" of type '" "opi2d::ActionCallbacks *""'"); 
  }
  arg3 = reinterpret_cast< opi2d::ActionCallbacks * >(argp3);
  (arg1)->Setup(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Action_SetTimeLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Action *arg1 = (opi2d::Action *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Action_SetTimeLimit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Action, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Action_SetTimeLimit" "', argument " "1"" of type '" "opi2d::Action *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Action * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Action_SetTimeLimit" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetTimeLimit(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Action_Start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Action *arg1 = (opi2d::Action *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Action_Start",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Action, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Action_Start" "', argument " "1"" of type '" "opi2d::Action *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Action * >(argp1);
  (arg1)->Start();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Action_End(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Action *arg1 = (opi2d::Action *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Action_End",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Action, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Action_End" "', argument " "1"" of type '" "opi2d::Action *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Action * >(argp1);
  (arg1)->End();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Action_Tick(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Action *arg1 = (opi2d::Action *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Action_Tick",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Action, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Action_Tick" "', argument " "1"" of type '" "opi2d::Action *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Action * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Action_Tick" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->Tick(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Action_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Action, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Physics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Physics *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Physics")) SWIG_fail;
  result = (opi2d::Physics *)new opi2d::Physics();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Physics, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Physics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Physics *arg1 = (opi2d::Physics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Physics",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Physics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Physics" "', argument " "1"" of type '" "opi2d::Physics *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Physics * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Physics_velocity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Physics *arg1 = (opi2d::Physics *) 0 ;
  opi2d::Vec2 *arg2 = (opi2d::Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Physics_velocity_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Physics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Physics_velocity_set" "', argument " "1"" of type '" "opi2d::Physics *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Physics * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Physics_velocity_set" "', argument " "2"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  if (arg1) (arg1)->velocity = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Physics_velocity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Physics *arg1 = (opi2d::Physics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Physics_velocity_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Physics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Physics_velocity_get" "', argument " "1"" of type '" "opi2d::Physics *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Physics * >(argp1);
  result = (opi2d::Vec2 *)& ((arg1)->velocity);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Physics_acceleration_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Physics *arg1 = (opi2d::Physics *) 0 ;
  opi2d::Vec2 *arg2 = (opi2d::Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Physics_acceleration_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Physics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Physics_acceleration_set" "', argument " "1"" of type '" "opi2d::Physics *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Physics * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Physics_acceleration_set" "', argument " "2"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  if (arg1) (arg1)->acceleration = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Physics_acceleration_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Physics *arg1 = (opi2d::Physics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Physics_acceleration_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Physics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Physics_acceleration_get" "', argument " "1"" of type '" "opi2d::Physics *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Physics * >(argp1);
  result = (opi2d::Vec2 *)& ((arg1)->acceleration);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Physics_friction_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Physics *arg1 = (opi2d::Physics *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Physics_friction_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Physics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Physics_friction_set" "', argument " "1"" of type '" "opi2d::Physics *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Physics * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Physics_friction_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->friction = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Physics_friction_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Physics *arg1 = (opi2d::Physics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Physics_friction_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Physics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Physics_friction_get" "', argument " "1"" of type '" "opi2d::Physics *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Physics * >(argp1);
  result = (floatval) ((arg1)->friction);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Physics_rotation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Physics *arg1 = (opi2d::Physics *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Physics_rotation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Physics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Physics_rotation_set" "', argument " "1"" of type '" "opi2d::Physics *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Physics * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Physics_rotation_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->rotation = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Physics_rotation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Physics *arg1 = (opi2d::Physics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Physics_rotation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Physics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Physics_rotation_get" "', argument " "1"" of type '" "opi2d::Physics *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Physics * >(argp1);
  result = (floatval) ((arg1)->rotation);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Physics_SetRadialVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Physics *arg1 = (opi2d::Physics *) 0 ;
  floatval arg2 ;
  floatval arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Physics_SetRadialVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Physics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Physics_SetRadialVelocity" "', argument " "1"" of type '" "opi2d::Physics *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Physics * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Physics_SetRadialVelocity" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Physics_SetRadialVelocity" "', argument " "3"" of type '" "floatval""'");
  } 
  arg3 = static_cast< floatval >(val3);
  (arg1)->SetRadialVelocity(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Physics_SetVelocityAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Physics *arg1 = (opi2d::Physics *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Physics_SetVelocityAngle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Physics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Physics_SetVelocityAngle" "', argument " "1"" of type '" "opi2d::Physics *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Physics * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Physics_SetVelocityAngle" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  (arg1)->SetVelocityAngle(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Physics_SetVelocitySpeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Physics *arg1 = (opi2d::Physics *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Physics_SetVelocitySpeed",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Physics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Physics_SetVelocitySpeed" "', argument " "1"" of type '" "opi2d::Physics *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Physics * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Physics_SetVelocitySpeed" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  (arg1)->SetVelocitySpeed(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Physics_GetRadialVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Physics *arg1 = (opi2d::Physics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Physics_GetRadialVelocity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Physics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Physics_GetRadialVelocity" "', argument " "1"" of type '" "opi2d::Physics const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Physics * >(argp1);
  result = ((opi2d::Physics const *)arg1)->GetRadialVelocity();
  resultobj = SWIG_NewPointerObj((new opi2d::Vec2(static_cast< const opi2d::Vec2& >(result))), SWIGTYPE_p_opi2d__Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Physics_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Physics, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IntervalAction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::IntervalAction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IntervalAction")) SWIG_fail;
  result = (opi2d::IntervalAction *)new opi2d::IntervalAction();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__IntervalAction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalAction_SetInterval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::IntervalAction *arg1 = (opi2d::IntervalAction *) 0 ;
  double arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntervalAction_SetInterval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__IntervalAction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalAction_SetInterval" "', argument " "1"" of type '" "opi2d::IntervalAction *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::IntervalAction * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalAction_SetInterval" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntervalAction_SetInterval" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->SetInterval(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalAction_SetSmoothing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::IntervalAction *arg1 = (opi2d::IntervalAction *) 0 ;
  floatval arg2 ;
  floatval arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntervalAction_SetSmoothing",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__IntervalAction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalAction_SetSmoothing" "', argument " "1"" of type '" "opi2d::IntervalAction *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::IntervalAction * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalAction_SetSmoothing" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntervalAction_SetSmoothing" "', argument " "3"" of type '" "floatval""'");
  } 
  arg3 = static_cast< floatval >(val3);
  (arg1)->SetSmoothing(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalAction_interval_time_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::IntervalAction *arg1 = (opi2d::IntervalAction *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalAction_interval_time_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__IntervalAction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalAction_interval_time_set" "', argument " "1"" of type '" "opi2d::IntervalAction *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::IntervalAction * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalAction_interval_time_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->interval_time = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalAction_interval_time_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::IntervalAction *arg1 = (opi2d::IntervalAction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalAction_interval_time_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__IntervalAction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalAction_interval_time_get" "', argument " "1"" of type '" "opi2d::IntervalAction *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::IntervalAction * >(argp1);
  result = (double) ((arg1)->interval_time);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalAction_repeat_mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::IntervalAction *arg1 = (opi2d::IntervalAction *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalAction_repeat_mode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__IntervalAction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalAction_repeat_mode_set" "', argument " "1"" of type '" "opi2d::IntervalAction *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::IntervalAction * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalAction_repeat_mode_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->repeat_mode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalAction_repeat_mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::IntervalAction *arg1 = (opi2d::IntervalAction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalAction_repeat_mode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__IntervalAction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalAction_repeat_mode_get" "', argument " "1"" of type '" "opi2d::IntervalAction *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::IntervalAction * >(argp1);
  result = (int) ((arg1)->repeat_mode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntervalAction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::IntervalAction *arg1 = (opi2d::IntervalAction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IntervalAction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__IntervalAction, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntervalAction" "', argument " "1"" of type '" "opi2d::IntervalAction *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::IntervalAction * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntervalAction_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__IntervalAction, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MoveDelta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::MoveDelta *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MoveDelta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MoveDelta" "', argument " "1"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MoveDelta" "', argument " "1"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  result = (opi2d::MoveDelta *)new opi2d::MoveDelta((opi2d::Vec2 const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__MoveDelta, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MoveDelta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::MoveDelta *arg1 = (opi2d::MoveDelta *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MoveDelta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__MoveDelta, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MoveDelta" "', argument " "1"" of type '" "opi2d::MoveDelta *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::MoveDelta * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MoveDelta_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__MoveDelta, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MoveTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::MoveTo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MoveTo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MoveTo" "', argument " "1"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MoveTo" "', argument " "1"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  result = (opi2d::MoveTo *)new opi2d::MoveTo((opi2d::Vec2 const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__MoveTo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MoveTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::MoveTo *arg1 = (opi2d::MoveTo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MoveTo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__MoveTo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MoveTo" "', argument " "1"" of type '" "opi2d::MoveTo *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::MoveTo * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MoveTo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__MoveTo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Move(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Move *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Move",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Move" "', argument " "1"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Move" "', argument " "1"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  result = (opi2d::Move *)new opi2d::Move((opi2d::Vec2 const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Move, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Move(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Move *arg1 = (opi2d::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Move",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Move, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Move" "', argument " "1"" of type '" "opi2d::Move *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Move * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Move_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Move, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Delay *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Delay",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Delay" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (opi2d::Delay *)new opi2d::Delay(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Delay, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Delay *arg1 = (opi2d::Delay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Delay",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Delay, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Delay" "', argument " "1"" of type '" "opi2d::Delay *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Delay * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Delay_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Delay, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AlphaFade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::AlphaFade *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AlphaFade",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AlphaFade" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = (opi2d::AlphaFade *)new opi2d::AlphaFade(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__AlphaFade, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphaFade_Start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::AlphaFade *arg1 = (opi2d::AlphaFade *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AlphaFade_Start",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__AlphaFade, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphaFade_Start" "', argument " "1"" of type '" "opi2d::AlphaFade *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::AlphaFade * >(argp1);
  (arg1)->Start();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AlphaFade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::AlphaFade *arg1 = (opi2d::AlphaFade *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AlphaFade",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__AlphaFade, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AlphaFade" "', argument " "1"" of type '" "opi2d::AlphaFade *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::AlphaFade * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AlphaFade_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__AlphaFade, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ColorFade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Color *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::ColorFade *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ColorFade",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_opi2d__Color,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ColorFade" "', argument " "1"" of type '" "opi2d::Color const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ColorFade" "', argument " "1"" of type '" "opi2d::Color const &""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Color * >(argp1);
  result = (opi2d::ColorFade *)new opi2d::ColorFade((opi2d::Color const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__ColorFade, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorFade_Start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ColorFade *arg1 = (opi2d::ColorFade *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ColorFade_Start",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ColorFade, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorFade_Start" "', argument " "1"" of type '" "opi2d::ColorFade *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ColorFade * >(argp1);
  (arg1)->Start();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ColorFade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ColorFade *arg1 = (opi2d::ColorFade *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ColorFade",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ColorFade, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ColorFade" "', argument " "1"" of type '" "opi2d::ColorFade *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ColorFade * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ColorFade_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__ColorFade, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RotateDelta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  floatval arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::RotateDelta *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RotateDelta",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RotateDelta" "', argument " "1"" of type '" "floatval""'");
  } 
  arg1 = static_cast< floatval >(val1);
  result = (opi2d::RotateDelta *)new opi2d::RotateDelta(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__RotateDelta, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RotateDelta_Start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::RotateDelta *arg1 = (opi2d::RotateDelta *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RotateDelta_Start",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__RotateDelta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotateDelta_Start" "', argument " "1"" of type '" "opi2d::RotateDelta *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::RotateDelta * >(argp1);
  (arg1)->Start();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RotateDelta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::RotateDelta *arg1 = (opi2d::RotateDelta *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RotateDelta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__RotateDelta, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RotateDelta" "', argument " "1"" of type '" "opi2d::RotateDelta *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::RotateDelta * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RotateDelta_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__RotateDelta, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Rotate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  floatval arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Rotate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Rotate",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Rotate" "', argument " "1"" of type '" "floatval""'");
  } 
  arg1 = static_cast< floatval >(val1);
  result = (opi2d::Rotate *)new opi2d::Rotate(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Rotate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rotate_Start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Rotate *arg1 = (opi2d::Rotate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rotate_Start",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Rotate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotate_Start" "', argument " "1"" of type '" "opi2d::Rotate *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Rotate * >(argp1);
  (arg1)->Start();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Rotate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Rotate *arg1 = (opi2d::Rotate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Rotate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Rotate, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Rotate" "', argument " "1"" of type '" "opi2d::Rotate *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Rotate * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Rotate_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Rotate, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Scale__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  floatval arg1 ;
  bool arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Scale *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Scale",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Scale" "', argument " "1"" of type '" "floatval""'");
  } 
  arg1 = static_cast< floatval >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Scale" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (opi2d::Scale *)new opi2d::Scale(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Scale, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Scale__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  floatval arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Scale *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Scale",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Scale" "', argument " "1"" of type '" "floatval""'");
  } 
  arg1 = static_cast< floatval >(val1);
  result = (opi2d::Scale *)new opi2d::Scale(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Scale, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Scale(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Scale__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Scale__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Scale'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    opi2d::Scale(floatval,bool)\n"
    "    opi2d::Scale(floatval)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scale_Tick(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Scale *arg1 = (opi2d::Scale *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scale_Tick",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Scale, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scale_Tick" "', argument " "1"" of type '" "opi2d::Scale *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Scale * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scale_Tick" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->Tick(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Scale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Scale *arg1 = (opi2d::Scale *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Scale",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Scale, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Scale" "', argument " "1"" of type '" "opi2d::Scale *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Scale * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Scale_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Scale, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScaleTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::ScaleTo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScaleTo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScaleTo" "', argument " "1"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScaleTo" "', argument " "1"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  result = (opi2d::ScaleTo *)new opi2d::ScaleTo((opi2d::Vec2 const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__ScaleTo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScaleTo_Start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ScaleTo *arg1 = (opi2d::ScaleTo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScaleTo_Start",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ScaleTo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScaleTo_Start" "', argument " "1"" of type '" "opi2d::ScaleTo *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ScaleTo * >(argp1);
  (arg1)->Start();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScaleTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ScaleTo *arg1 = (opi2d::ScaleTo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScaleTo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ScaleTo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScaleTo" "', argument " "1"" of type '" "opi2d::ScaleTo *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ScaleTo * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScaleTo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__ScaleTo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TickFunc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::TickFunc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TickFunc",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TickFunc" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = (opi2d::TickFunc *)new opi2d::TickFunc(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__TickFunc, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TickFunc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::TickFunc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TickFunc")) SWIG_fail;
  result = (opi2d::TickFunc *)new opi2d::TickFunc();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__TickFunc, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TickFunc(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TickFunc__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_TickFunc__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TickFunc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    opi2d::TickFunc(bool)\n"
    "    opi2d::TickFunc()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TickFunc_Tick(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::TickFunc *arg1 = (opi2d::TickFunc *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TickFunc_Tick",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__TickFunc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TickFunc_Tick" "', argument " "1"" of type '" "opi2d::TickFunc *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::TickFunc * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TickFunc_Tick" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->Tick(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TickFunc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::TickFunc *arg1 = (opi2d::TickFunc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TickFunc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__TickFunc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TickFunc" "', argument " "1"" of type '" "opi2d::TickFunc *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::TickFunc * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TickFunc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__TickFunc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FollowPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  floatval arg2 ;
  bool arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  opi2d::FollowPath *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_FollowPath",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FollowPath" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FollowPath" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FollowPath" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (opi2d::FollowPath *)new opi2d::FollowPath(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__FollowPath, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FollowPath_Start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::FollowPath *arg1 = (opi2d::FollowPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FollowPath_Start",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__FollowPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FollowPath_Start" "', argument " "1"" of type '" "opi2d::FollowPath *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::FollowPath * >(argp1);
  (arg1)->Start();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FollowPath_Tick(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::FollowPath *arg1 = (opi2d::FollowPath *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FollowPath_Tick",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__FollowPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FollowPath_Tick" "', argument " "1"" of type '" "opi2d::FollowPath *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::FollowPath * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FollowPath_Tick" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->Tick(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FollowPath_SetPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::FollowPath *arg1 = (opi2d::FollowPath *) 0 ;
  int arg2 ;
  opi2d::Vec2 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FollowPath_SetPoint",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__FollowPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FollowPath_SetPoint" "', argument " "1"" of type '" "opi2d::FollowPath *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::FollowPath * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FollowPath_SetPoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FollowPath_SetPoint" "', argument " "3"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FollowPath_SetPoint" "', argument " "3"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg3 = reinterpret_cast< opi2d::Vec2 * >(argp3);
  (arg1)->SetPoint(arg2,(opi2d::Vec2 const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FollowPath_SetSpeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::FollowPath *arg1 = (opi2d::FollowPath *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FollowPath_SetSpeed",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__FollowPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FollowPath_SetSpeed" "', argument " "1"" of type '" "opi2d::FollowPath *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::FollowPath * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FollowPath_SetSpeed" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  (arg1)->SetSpeed(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FollowPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::FollowPath *arg1 = (opi2d::FollowPath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FollowPath",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__FollowPath, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FollowPath" "', argument " "1"" of type '" "opi2d::FollowPath *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::FollowPath * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FollowPath_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__FollowPath, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_KeepFacing__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::KeepFacing *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_KeepFacing",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KeepFacing" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_KeepFacing" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (opi2d::KeepFacing *)new opi2d::KeepFacing(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__KeepFacing, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KeepFacing__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::KeepFacing *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_KeepFacing",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KeepFacing" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  result = (opi2d::KeepFacing *)new opi2d::KeepFacing(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__KeepFacing, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KeepFacing(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_KeepFacing__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_KeepFacing__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_KeepFacing'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    opi2d::KeepFacing(opi2d::Node *,int)\n"
    "    opi2d::KeepFacing(opi2d::Node *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeepFacing_Tick(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::KeepFacing *arg1 = (opi2d::KeepFacing *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KeepFacing_Tick",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__KeepFacing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeepFacing_Tick" "', argument " "1"" of type '" "opi2d::KeepFacing *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::KeepFacing * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KeepFacing_Tick" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->Tick(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_KeepFacing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::KeepFacing *arg1 = (opi2d::KeepFacing *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_KeepFacing",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__KeepFacing, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_KeepFacing" "', argument " "1"" of type '" "opi2d::KeepFacing *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::KeepFacing * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *KeepFacing_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__KeepFacing, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Animate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Animate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Animate",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Animate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (opi2d::Animate *)new opi2d::Animate(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Animate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Animate_SetDelay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Animate *arg1 = (opi2d::Animate *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Animate_SetDelay",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Animate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Animate_SetDelay" "', argument " "1"" of type '" "opi2d::Animate *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Animate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Animate_SetDelay" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetDelay(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Animate_Start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Animate *arg1 = (opi2d::Animate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Animate_Start",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Animate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Animate_Start" "', argument " "1"" of type '" "opi2d::Animate *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Animate * >(argp1);
  (arg1)->Start();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Animate_Tick(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Animate *arg1 = (opi2d::Animate *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Animate_Tick",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Animate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Animate_Tick" "', argument " "1"" of type '" "opi2d::Animate *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Animate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Animate_Tick" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->Tick(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Animate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Animate *arg1 = (opi2d::Animate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Animate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Animate, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Animate" "', argument " "1"" of type '" "opi2d::Animate *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Animate * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Animate_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Animate, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_OrbitAround(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  floatval arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  opi2d::OrbitAround *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_OrbitAround",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OrbitAround" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_OrbitAround" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_OrbitAround" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (opi2d::OrbitAround *)new opi2d::OrbitAround(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__OrbitAround, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_OrbitAround(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::OrbitAround *arg1 = (opi2d::OrbitAround *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_OrbitAround",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__OrbitAround, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OrbitAround" "', argument " "1"" of type '" "opi2d::OrbitAround *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::OrbitAround * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OrbitAround_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__OrbitAround, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Node(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Node")) SWIG_fail;
  result = (opi2d::Node *)new opi2d::Node();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Node, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Node(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Node",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Node" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_ReUse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Node_ReUse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_ReUse" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  (arg1)->ReUse();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_Place(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  opi2d::Layer *arg2 = (opi2d::Layer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Node_Place",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_Place" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Node_Place" "', argument " "2"" of type '" "opi2d::Layer *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Layer * >(argp2);
  (arg1)->Place(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_GetLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Layer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Node_GetLayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_GetLayer" "', argument " "1"" of type '" "opi2d::Node const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  result = (opi2d::Layer *)((opi2d::Node const *)arg1)->GetLayer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_GetRootLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Layer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Node_GetRootLayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_GetRootLayer" "', argument " "1"" of type '" "opi2d::Node const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  result = (opi2d::Layer *)((opi2d::Node const *)arg1)->GetRootLayer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_AttachTo__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  opi2d::Node *arg2 = (opi2d::Node *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  opi2d::Node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Node_AttachTo",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_AttachTo" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Node_AttachTo" "', argument " "2"" of type '" "opi2d::Node *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Node * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Node_AttachTo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (opi2d::Node *)(arg1)->AttachTo(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Node, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_AttachTo__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  opi2d::Node *arg2 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Node_AttachTo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_AttachTo" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Node_AttachTo" "', argument " "2"" of type '" "opi2d::Node *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Node * >(argp2);
  result = (opi2d::Node *)(arg1)->AttachTo(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Node, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_AttachTo(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_opi2d__Node, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_AttachTo__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_opi2d__Node, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Node_AttachTo__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Node_AttachTo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AttachTo(opi2d::Node *,opi2d::Node *,bool)\n"
    "    AttachTo(opi2d::Node *,opi2d::Node *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_Detach(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Node_Detach",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_Detach" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  result = (opi2d::Node *)(arg1)->Detach();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Node, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_OnAttach(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  opi2d::Node *arg2 = (opi2d::Node *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Node_OnAttach",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_OnAttach" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Node_OnAttach" "', argument " "2"" of type '" "opi2d::Node *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Node * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Node_OnAttach" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->OnAttach(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_OnDetach(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  opi2d::Node *arg2 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Node_OnDetach",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_OnDetach" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Node_OnDetach" "', argument " "2"" of type '" "opi2d::Node *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Node * >(argp2);
  (arg1)->OnDetach(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_Traverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Node_Traverse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_Traverse" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Node_Traverse" "', argument " "2"" of type '" "int &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Node_Traverse" "', argument " "2"" of type '" "int &""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  (arg1)->Traverse(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_TraverseFree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Node_TraverseFree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_TraverseFree" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  (arg1)->TraverseFree();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_Enter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Node_Enter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_Enter" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  (arg1)->Enter();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_EnterFree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Node_EnterFree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_EnterFree" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  (arg1)->EnterFree();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_Pick(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Sprite *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Node_Pick",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_Pick" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Node_Pick" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Node_Pick" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  result = (opi2d::Sprite *)(arg1)->Pick((opi2d::Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Sprite, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_PickSelf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Sprite *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Node_PickSelf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_PickSelf" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Node_PickSelf" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Node_PickSelf" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  result = (opi2d::Sprite *)(arg1)->PickSelf((opi2d::Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Sprite, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_GetColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Color *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Node_GetColor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_GetColor" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  result = (opi2d::Color *) &(arg1)->GetColor();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Color, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_SetColor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Node_SetColor",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_SetColor" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Node_SetColor" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Node_SetColor" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Node_SetColor" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Node_SetColor" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  (arg1)->SetColor(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_SetColor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Node_SetColor",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_SetColor" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Node_SetColor" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Node_SetColor" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Node_SetColor" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  (arg1)->SetColor(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_SetColor__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Node_SetColor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_SetColor" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Node_SetColor" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Node_SetColor" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  (arg1)->SetColor(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_SetColor__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Node_SetColor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_SetColor" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Node_SetColor" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  (arg1)->SetColor(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_SetColor__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Node_SetColor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_SetColor" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  (arg1)->SetColor();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_SetColor(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Node_SetColor__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Node_SetColor__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Node_SetColor__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Node_SetColor__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Node_SetColor__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Node_SetColor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SetColor(opi2d::Node *,float,float,float,float)\n"
    "    SetColor(opi2d::Node *,float,float,float)\n"
    "    SetColor(opi2d::Node *,float,float)\n"
    "    SetColor(opi2d::Node *,float)\n"
    "    SetColor(opi2d::Node *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_SetColorInheritance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Node_SetColorInheritance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_SetColorInheritance" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Node_SetColorInheritance" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetColorInheritance(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_GetColorInheritance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Node_GetColorInheritance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_GetColorInheritance" "', argument " "1"" of type '" "opi2d::Node const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  result = (bool)((opi2d::Node const *)arg1)->GetColorInheritance();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_ToThisFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Node_ToThisFrame",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_ToThisFrame" "', argument " "1"" of type '" "opi2d::Node const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Node_ToThisFrame" "', argument " "2"" of type '" "opi2d::Vec2 &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Node_ToThisFrame" "', argument " "2"" of type '" "opi2d::Vec2 &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  ((opi2d::Node const *)arg1)->ToThisFrame(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_ToParentFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Node_ToParentFrame",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_ToParentFrame" "', argument " "1"" of type '" "opi2d::Node const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Node_ToParentFrame" "', argument " "2"" of type '" "opi2d::Vec2 &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Node_ToParentFrame" "', argument " "2"" of type '" "opi2d::Vec2 &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  ((opi2d::Node const *)arg1)->ToParentFrame(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_FromThisFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Node_FromThisFrame",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_FromThisFrame" "', argument " "1"" of type '" "opi2d::Node const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Node_FromThisFrame" "', argument " "2"" of type '" "opi2d::Vec2 &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Node_FromThisFrame" "', argument " "2"" of type '" "opi2d::Vec2 &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  ((opi2d::Node const *)arg1)->FromThisFrame(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_FromParentFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Node_FromParentFrame",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_FromParentFrame" "', argument " "1"" of type '" "opi2d::Node const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Node_FromParentFrame" "', argument " "2"" of type '" "opi2d::Vec2 &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Node_FromParentFrame" "', argument " "2"" of type '" "opi2d::Vec2 &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  ((opi2d::Node const *)arg1)->FromParentFrame(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_GetPos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Node_GetPos",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_GetPos" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  result = (opi2d::Vec2 *) &(arg1)->GetPos();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_SetPos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  floatval arg2 ;
  floatval arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Node_SetPos",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_SetPos" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Node_SetPos" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Node_SetPos" "', argument " "3"" of type '" "floatval""'");
  } 
  arg3 = static_cast< floatval >(val3);
  (arg1)->SetPos(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_AddPos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  floatval arg2 ;
  floatval arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Node_AddPos",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_AddPos" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Node_AddPos" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Node_AddPos" "', argument " "3"" of type '" "floatval""'");
  } 
  arg3 = static_cast< floatval >(val3);
  (arg1)->AddPos(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_GetWorldPos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Node_GetWorldPos",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_GetWorldPos" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  result = (opi2d::Vec2 *) &(arg1)->GetWorldPos();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_GetPosDelta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Node_GetPosDelta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_GetPosDelta" "', argument " "1"" of type '" "opi2d::Node const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  result = ((opi2d::Node const *)arg1)->GetPosDelta();
  resultobj = SWIG_NewPointerObj((new opi2d::Vec2(static_cast< const opi2d::Vec2& >(result))), SWIGTYPE_p_opi2d__Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_GetWorldVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Node_GetWorldVelocity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_GetWorldVelocity" "', argument " "1"" of type '" "opi2d::Node const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  result = ((opi2d::Node const *)arg1)->GetWorldVelocity();
  resultobj = SWIG_NewPointerObj((new opi2d::Vec2(static_cast< const opi2d::Vec2& >(result))), SWIGTYPE_p_opi2d__Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_GetScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Node_GetScale",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_GetScale" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  result = (opi2d::Vec2 *) &(arg1)->GetScale();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_SetScale__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Node_SetScale",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_SetScale" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Node_SetScale" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  (arg1)->SetScale(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_SetScale__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Node_SetScale",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_SetScale" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Node_SetScale" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Node_SetScale" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  (arg1)->SetScale((opi2d::Vec2 const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_SetScale(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_opi2d__Vec2, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_SetScale__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Node_SetScale__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Node_SetScale'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SetScale(opi2d::Node *,floatval)\n"
    "    SetScale(opi2d::Node *,opi2d::Vec2 const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_GetOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Node_GetOffset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_GetOffset" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  result = (opi2d::Vec2 *) &(arg1)->GetOffset();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_GetRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Node_GetRotation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_GetRotation" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  result = (floatval)(arg1)->GetRotation();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_SetRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Node_SetRotation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_SetRotation" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Node_SetRotation" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  (arg1)->SetRotation(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_physics_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  opi2d::Physics *arg2 = (opi2d::Physics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Node_physics_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_physics_set" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Physics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Node_physics_set" "', argument " "2"" of type '" "opi2d::Physics *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Physics * >(argp2);
  if (arg1) (arg1)->physics = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_physics_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Node *arg1 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Physics *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Node_physics_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_physics_get" "', argument " "1"" of type '" "opi2d::Node *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Node * >(argp1);
  result = (opi2d::Physics *) ((arg1)->physics);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Physics, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Node_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Node, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Particle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Particle")) SWIG_fail;
  result = (opi2d::Particle *)new opi2d::Particle();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Particle, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Particle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Particle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Particle" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_pos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  opi2d::Vec2 *arg2 = (opi2d::Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Particle_pos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_pos_set" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Particle_pos_set" "', argument " "2"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  if (arg1) (arg1)->pos = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_pos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Particle_pos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_pos_get" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  result = (opi2d::Vec2 *)& ((arg1)->pos);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_velocity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  opi2d::Vec2 *arg2 = (opi2d::Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Particle_velocity_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_velocity_set" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Particle_velocity_set" "', argument " "2"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  if (arg1) (arg1)->velocity = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_velocity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Particle_velocity_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_velocity_get" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  result = (opi2d::Vec2 *)& ((arg1)->velocity);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_acceleration_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  opi2d::Vec2 *arg2 = (opi2d::Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Particle_acceleration_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_acceleration_set" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Particle_acceleration_set" "', argument " "2"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  if (arg1) (arg1)->acceleration = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_acceleration_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Particle_acceleration_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_acceleration_get" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  result = (opi2d::Vec2 *)& ((arg1)->acceleration);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_friction_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Particle_friction_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_friction_set" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Particle_friction_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->friction = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_friction_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Particle_friction_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_friction_get" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  result = (floatval) ((arg1)->friction);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_rotation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Particle_rotation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_rotation_set" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Particle_rotation_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->rotation = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_rotation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Particle_rotation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_rotation_get" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  result = (floatval) ((arg1)->rotation);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_rotation_delta_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Particle_rotation_delta_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_rotation_delta_set" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Particle_rotation_delta_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->rotation_delta = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_rotation_delta_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Particle_rotation_delta_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_rotation_delta_get" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  result = (floatval) ((arg1)->rotation_delta);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_scale_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Particle_scale_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_scale_set" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Particle_scale_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->scale = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_scale_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Particle_scale_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_scale_get" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  result = (floatval) ((arg1)->scale);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_scale_delta_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Particle_scale_delta_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_scale_delta_set" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Particle_scale_delta_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->scale_delta = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_scale_delta_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Particle_scale_delta_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_scale_delta_get" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  result = (floatval) ((arg1)->scale_delta);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_color_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  opi2d::Color *arg2 = (opi2d::Color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Particle_color_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_color_set" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Color, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Particle_color_set" "', argument " "2"" of type '" "opi2d::Color *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Color * >(argp2);
  if (arg1) (arg1)->color = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_color_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Color *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Particle_color_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_color_get" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  result = (opi2d::Color *)& ((arg1)->color);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Color, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_color_delta_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  opi2d::Color *arg2 = (opi2d::Color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Particle_color_delta_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_color_delta_set" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Color, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Particle_color_delta_set" "', argument " "2"" of type '" "opi2d::Color *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Color * >(argp2);
  if (arg1) (arg1)->color_delta = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_color_delta_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Color *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Particle_color_delta_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_color_delta_get" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  result = (opi2d::Color *)& ((arg1)->color_delta);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Color, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_life_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Particle_life_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_life_set" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Particle_life_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->life = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_life_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Particle_life_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_life_get" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  result = (floatval) ((arg1)->life);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_fade_time_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Particle_fade_time_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_fade_time_set" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Particle_fade_time_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->fade_time = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_fade_time_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Particle_fade_time_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_fade_time_get" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  result = (floatval) ((arg1)->fade_time);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_fade_in_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Particle_fade_in_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_fade_in_set" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Particle_fade_in_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->fade_in = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_fade_in_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Particle_fade_in_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_fade_in_get" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  result = (floatval) ((arg1)->fade_in);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_image_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  opi2d::Image *arg2 = (opi2d::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Particle_image_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_image_set" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Image, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Particle_image_set" "', argument " "2"" of type '" "opi2d::Image *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Image * >(argp2);
  if (arg1) (arg1)->image = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_image_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Particle *arg1 = (opi2d::Particle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Image *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Particle_image_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Particle_image_get" "', argument " "1"" of type '" "opi2d::Particle *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Particle * >(argp1);
  result = (opi2d::Image *) ((arg1)->image);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Image, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Particle_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Particle, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ParticleSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleSystem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ParticleSystem")) SWIG_fail;
  result = (opi2d::ParticleSystem *)new opi2d::ParticleSystem();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__ParticleSystem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParticleSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleSystem *arg1 = (opi2d::ParticleSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ParticleSystem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleSystem, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ParticleSystem" "', argument " "1"" of type '" "opi2d::ParticleSystem *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleSystem * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleSystem_AddParticle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleSystem *arg1 = (opi2d::ParticleSystem *) 0 ;
  opi2d::Particle *arg2 = (opi2d::Particle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleSystem_AddParticle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleSystem_AddParticle" "', argument " "1"" of type '" "opi2d::ParticleSystem *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleSystem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Particle, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleSystem_AddParticle" "', argument " "2"" of type '" "opi2d::Particle *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Particle * >(argp2);
  (arg1)->AddParticle(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleSystem_AddMutator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleSystem *arg1 = (opi2d::ParticleSystem *) 0 ;
  opi2d::Mutator *arg2 = (opi2d::Mutator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleSystem_AddMutator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleSystem_AddMutator" "', argument " "1"" of type '" "opi2d::ParticleSystem *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleSystem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Mutator, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleSystem_AddMutator" "', argument " "2"" of type '" "opi2d::Mutator *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Mutator * >(argp2);
  (arg1)->AddMutator(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ParticleSystem_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__ParticleSystem, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_EmitterParameter_Evaluate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::EmitterParameter *arg1 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EmitterParameter_Evaluate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EmitterParameter_Evaluate" "', argument " "1"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::EmitterParameter * >(argp1);
  result = (floatval)(arg1)->Evaluate();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EmitterParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::EmitterParameter *arg1 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_EmitterParameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EmitterParameter" "', argument " "1"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::EmitterParameter * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EmitterParameter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__EmitterParameter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ParticleEmitter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ParticleEmitter")) SWIG_fail;
  result = (opi2d::ParticleEmitter *)new opi2d::ParticleEmitter();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__ParticleEmitter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParticleEmitter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ParticleEmitter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ParticleEmitter" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_Delete(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_Delete",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_Delete" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  (arg1)->Delete();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_AttachTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::Node *arg2 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_AttachTo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_AttachTo" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_AttachTo" "', argument " "2"" of type '" "opi2d::Node *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Node * >(argp2);
  (arg1)->AttachTo(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_SetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_SetPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_SetPosition" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_SetPosition" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParticleEmitter_SetPosition" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  (arg1)->SetPosition((opi2d::Vec2 const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_SetSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::ParticleSystem *arg2 = (opi2d::ParticleSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_SetSystem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_SetSystem" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_SetSystem" "', argument " "2"" of type '" "opi2d::ParticleSystem *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::ParticleSystem * >(argp2);
  (arg1)->SetSystem(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_InitFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::ParticleEmitter *arg2 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_InitFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_InitFrom" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_InitFrom" "', argument " "2"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::ParticleEmitter * >(argp2);
  (arg1)->InitFrom(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_EmitSingle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_EmitSingle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_EmitSingle" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  (arg1)->EmitSingle();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_EmitPulse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_EmitPulse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_EmitPulse" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  (arg1)->EmitPulse();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_Start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_Start",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_Start" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  (arg1)->Start();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_image_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::Image *arg2 = (opi2d::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_image_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_image_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Image, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_image_set" "', argument " "2"" of type '" "opi2d::Image *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Image * >(argp2);
  if (arg1) (arg1)->image = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_image_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Image *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_image_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_image_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::Image *) ((arg1)->image);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Image, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_direction_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_direction_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_direction_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_direction_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->direction = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_direction_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_direction_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_direction_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->direction);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_angle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_angle_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_angle_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_angle_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->angle = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_angle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_angle_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_angle_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->angle);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_speed_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_speed_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_speed_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_speed_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->speed = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_speed_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_speed_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_speed_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->speed);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_acceleration_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_acceleration_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_acceleration_x_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_acceleration_x_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->acceleration_x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_acceleration_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_acceleration_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_acceleration_x_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->acceleration_x);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_acceleration_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_acceleration_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_acceleration_y_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_acceleration_y_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->acceleration_y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_acceleration_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_acceleration_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_acceleration_y_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->acceleration_y);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_friction_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_friction_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_friction_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_friction_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->friction = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_friction_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_friction_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_friction_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->friction);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_rotation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_rotation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_rotation_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_rotation_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->rotation = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_rotation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_rotation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_rotation_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->rotation);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_rotation_delta_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_rotation_delta_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_rotation_delta_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_rotation_delta_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->rotation_delta = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_rotation_delta_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_rotation_delta_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_rotation_delta_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->rotation_delta);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_offset_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_offset_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_offset_x_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_offset_x_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->offset_x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_offset_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_offset_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_offset_x_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->offset_x);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_offset_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_offset_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_offset_y_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_offset_y_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->offset_y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_offset_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_offset_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_offset_y_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->offset_y);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_advance_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_advance_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_advance_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_advance_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->advance = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_advance_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_advance_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_advance_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->advance);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_scale_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_scale_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_scale_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_scale_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->scale = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_scale_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_scale_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_scale_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->scale);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_scale_delta_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_scale_delta_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_scale_delta_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_scale_delta_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->scale_delta = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_scale_delta_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_scale_delta_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_scale_delta_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->scale_delta);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_color_red_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_color_red_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_color_red_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_color_red_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->color_red = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_color_red_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_color_red_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_color_red_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->color_red);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_color_green_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_color_green_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_color_green_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_color_green_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->color_green = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_color_green_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_color_green_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_color_green_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->color_green);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_color_blue_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_color_blue_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_color_blue_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_color_blue_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->color_blue = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_color_blue_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_color_blue_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_color_blue_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->color_blue);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_color_alpha_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_color_alpha_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_color_alpha_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_color_alpha_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->color_alpha = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_color_alpha_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_color_alpha_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_color_alpha_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->color_alpha);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_color_delta_red_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_color_delta_red_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_color_delta_red_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_color_delta_red_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->color_delta_red = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_color_delta_red_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_color_delta_red_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_color_delta_red_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->color_delta_red);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_color_delta_green_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_color_delta_green_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_color_delta_green_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_color_delta_green_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->color_delta_green = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_color_delta_green_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_color_delta_green_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_color_delta_green_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->color_delta_green);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_color_delta_blue_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_color_delta_blue_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_color_delta_blue_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_color_delta_blue_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->color_delta_blue = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_color_delta_blue_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_color_delta_blue_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_color_delta_blue_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->color_delta_blue);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_color_delta_alpha_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_color_delta_alpha_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_color_delta_alpha_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_color_delta_alpha_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->color_delta_alpha = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_color_delta_alpha_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_color_delta_alpha_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_color_delta_alpha_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->color_delta_alpha);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_color_target_red_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_color_target_red_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_color_target_red_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_color_target_red_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->color_target_red = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_color_target_red_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_color_target_red_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_color_target_red_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->color_target_red);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_color_target_green_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_color_target_green_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_color_target_green_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_color_target_green_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->color_target_green = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_color_target_green_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_color_target_green_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_color_target_green_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->color_target_green);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_color_target_blue_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_color_target_blue_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_color_target_blue_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_color_target_blue_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->color_target_blue = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_color_target_blue_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_color_target_blue_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_color_target_blue_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->color_target_blue);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_color_target_alpha_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_color_target_alpha_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_color_target_alpha_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_color_target_alpha_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->color_target_alpha = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_color_target_alpha_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_color_target_alpha_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_color_target_alpha_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->color_target_alpha);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_life_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_life_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_life_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_life_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->life = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_life_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_life_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_life_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->life);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_fade_time_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_fade_time_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_fade_time_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_fade_time_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->fade_time = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_fade_time_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_fade_time_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_fade_time_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->fade_time);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_fade_delay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_fade_delay_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_fade_delay_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_fade_delay_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->fade_delay = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_fade_delay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_fade_delay_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_fade_delay_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->fade_delay);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_fade_in_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_fade_in_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_fade_in_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_fade_in_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->fade_in = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_fade_in_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_fade_in_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_fade_in_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->fade_in);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_num_emits_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_num_emits_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_num_emits_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_num_emits_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->num_emits = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_num_emits_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_num_emits_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_num_emits_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->num_emits);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_num_particles_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_num_particles_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_num_particles_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_num_particles_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->num_particles = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_num_particles_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_num_particles_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_num_particles_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->num_particles);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_emit_delay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_emit_delay_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_emit_delay_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_emit_delay_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->emit_delay = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_emit_delay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_emit_delay_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_emit_delay_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->emit_delay);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_emits_per_sec_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_emits_per_sec_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_emits_per_sec_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_emits_per_sec_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->emits_per_sec = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_emits_per_sec_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_emits_per_sec_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_emits_per_sec_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->emits_per_sec);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_duration_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_duration_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_duration_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_duration_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->duration = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_duration_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_duration_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_duration_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->duration);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_node_velocity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  opi2d::EmitterParameter *arg2 = (opi2d::EmitterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_node_velocity_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_node_velocity_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__EmitterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleEmitter_node_velocity_set" "', argument " "2"" of type '" "opi2d::EmitterParameter *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::EmitterParameter * >(argp2);
  if (arg1) (arg1)->node_velocity = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_node_velocity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::EmitterParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_node_velocity_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_node_velocity_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (opi2d::EmitterParameter *) ((arg1)->node_velocity);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__EmitterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_align_to_direction_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_align_to_direction_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_align_to_direction_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleEmitter_align_to_direction_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->align_to_direction = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_align_to_direction_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_align_to_direction_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_align_to_direction_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (bool) ((arg1)->align_to_direction);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_align_to_node_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_align_to_node_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_align_to_node_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleEmitter_align_to_node_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->align_to_node = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_align_to_node_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_align_to_node_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_align_to_node_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (bool) ((arg1)->align_to_node);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_rotate_to_node_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleEmitter_rotate_to_node_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_rotate_to_node_set" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleEmitter_rotate_to_node_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->rotate_to_node = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleEmitter_rotate_to_node_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ParticleEmitter *arg1 = (opi2d::ParticleEmitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleEmitter_rotate_to_node_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ParticleEmitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleEmitter_rotate_to_node_get" "', argument " "1"" of type '" "opi2d::ParticleEmitter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ParticleEmitter * >(argp1);
  result = (bool) ((arg1)->rotate_to_node);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ParticleEmitter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__ParticleEmitter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ConstParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  floatval arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::ConstParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ConstParameter",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ConstParameter" "', argument " "1"" of type '" "floatval""'");
  } 
  arg1 = static_cast< floatval >(val1);
  result = (opi2d::ConstParameter *)new opi2d::ConstParameter(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__ConstParameter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstParameter_Evaluate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ConstParameter *arg1 = (opi2d::ConstParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ConstParameter_Evaluate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ConstParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstParameter_Evaluate" "', argument " "1"" of type '" "opi2d::ConstParameter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ConstParameter * >(argp1);
  result = (floatval)(arg1)->Evaluate();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ConstParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ConstParameter *arg1 = (opi2d::ConstParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ConstParameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ConstParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConstParameter" "', argument " "1"" of type '" "opi2d::ConstParameter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ConstParameter * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ConstParameter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__ConstParameter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RandomParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  floatval arg1 ;
  floatval arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::RandomParameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_RandomParameter",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RandomParameter" "', argument " "1"" of type '" "floatval""'");
  } 
  arg1 = static_cast< floatval >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RandomParameter" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  result = (opi2d::RandomParameter *)new opi2d::RandomParameter(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__RandomParameter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomParameter_Evaluate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::RandomParameter *arg1 = (opi2d::RandomParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RandomParameter_Evaluate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__RandomParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomParameter_Evaluate" "', argument " "1"" of type '" "opi2d::RandomParameter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::RandomParameter * >(argp1);
  result = (floatval)(arg1)->Evaluate();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RandomParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::RandomParameter *arg1 = (opi2d::RandomParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RandomParameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__RandomParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RandomParameter" "', argument " "1"" of type '" "opi2d::RandomParameter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::RandomParameter * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RandomParameter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__RandomParameter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LinearParameter_Evaluate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::LinearParameter *arg1 = (opi2d::LinearParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LinearParameter_Evaluate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__LinearParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearParameter_Evaluate" "', argument " "1"" of type '" "opi2d::LinearParameter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::LinearParameter * >(argp1);
  result = (floatval)(arg1)->Evaluate();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LinearParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::LinearParameter *arg1 = (opi2d::LinearParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LinearParameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__LinearParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinearParameter" "', argument " "1"" of type '" "opi2d::LinearParameter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::LinearParameter * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LinearParameter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__LinearParameter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SineParameter_Evaluate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::SineParameter *arg1 = (opi2d::SineParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SineParameter_Evaluate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__SineParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SineParameter_Evaluate" "', argument " "1"" of type '" "opi2d::SineParameter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::SineParameter * >(argp1);
  result = (floatval)(arg1)->Evaluate();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SineParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::SineParameter *arg1 = (opi2d::SineParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SineParameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__SineParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SineParameter" "', argument " "1"" of type '" "opi2d::SineParameter *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::SineParameter * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SineParameter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__SineParameter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SceneCallbacks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  opi2d::SceneCallbacks *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SceneCallbacks",&obj0)) SWIG_fail;
  arg1 = obj0;
  if ( arg1 != Py_None ) {
    /* subclassed */
    result = (opi2d::SceneCallbacks *)new SwigDirector_SceneCallbacks(arg1); 
  } else {
    result = (opi2d::SceneCallbacks *)new opi2d::SceneCallbacks(); 
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__SceneCallbacks, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SceneCallbacks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::SceneCallbacks *arg1 = (opi2d::SceneCallbacks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SceneCallbacks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__SceneCallbacks, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SceneCallbacks" "', argument " "1"" of type '" "opi2d::SceneCallbacks *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::SceneCallbacks * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SceneCallbacks_OnCollision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::SceneCallbacks *arg1 = (opi2d::SceneCallbacks *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  opi2d::Sprite *arg4 = (opi2d::Sprite *) 0 ;
  opi2d::Sprite *arg5 = (opi2d::Sprite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:SceneCallbacks_OnCollision",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__SceneCallbacks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SceneCallbacks_OnCollision" "', argument " "1"" of type '" "opi2d::SceneCallbacks *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::SceneCallbacks * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SceneCallbacks_OnCollision" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SceneCallbacks_OnCollision" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SceneCallbacks_OnCollision" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SceneCallbacks_OnCollision" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_opi2d__Sprite, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SceneCallbacks_OnCollision" "', argument " "4"" of type '" "opi2d::Sprite *""'"); 
  }
  arg4 = reinterpret_cast< opi2d::Sprite * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_opi2d__Sprite, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "SceneCallbacks_OnCollision" "', argument " "5"" of type '" "opi2d::Sprite *""'"); 
  }
  arg5 = reinterpret_cast< opi2d::Sprite * >(argp5);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      (arg1)->opi2d::SceneCallbacks::OnCollision((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
    } else {
      (arg1)->OnCollision((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_SceneCallbacks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::SceneCallbacks *arg1 = (opi2d::SceneCallbacks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:disown_SceneCallbacks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__SceneCallbacks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_SceneCallbacks" "', argument " "1"" of type '" "opi2d::SceneCallbacks *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::SceneCallbacks * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SceneCallbacks_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__SceneCallbacks, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Camera_ScreenToWorld__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Camera *arg1 = (opi2d::Camera *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Camera_ScreenToWorld",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Camera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Camera_ScreenToWorld" "', argument " "1"" of type '" "opi2d::Camera const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Camera * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Camera_ScreenToWorld" "', argument " "2"" of type '" "opi2d::Vec2 &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Camera_ScreenToWorld" "', argument " "2"" of type '" "opi2d::Vec2 &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  ((opi2d::Camera const *)arg1)->ScreenToWorld(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Camera_ScreenToWorld__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Camera *arg1 = (opi2d::Camera *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  opi2d::Layer *arg3 = (opi2d::Layer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Camera_ScreenToWorld",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Camera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Camera_ScreenToWorld" "', argument " "1"" of type '" "opi2d::Camera const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Camera * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Camera_ScreenToWorld" "', argument " "2"" of type '" "opi2d::Vec2 &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Camera_ScreenToWorld" "', argument " "2"" of type '" "opi2d::Vec2 &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Camera_ScreenToWorld" "', argument " "3"" of type '" "opi2d::Layer *""'"); 
  }
  arg3 = reinterpret_cast< opi2d::Layer * >(argp3);
  ((opi2d::Camera const *)arg1)->ScreenToWorld(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Camera_ScreenToWorld(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Camera, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_opi2d__Vec2, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Camera_ScreenToWorld__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Camera, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_opi2d__Vec2, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_opi2d__Layer, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Camera_ScreenToWorld__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Camera_ScreenToWorld'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ScreenToWorld(opi2d::Camera const *,opi2d::Vec2 &)\n"
    "    ScreenToWorld(opi2d::Camera const *,opi2d::Vec2 &,opi2d::Layer *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Camera_SetAlign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Camera *arg1 = (opi2d::Camera *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Camera_SetAlign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Camera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Camera_SetAlign" "', argument " "1"" of type '" "opi2d::Camera *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Camera * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Camera_SetAlign" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetAlign(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Camera_GetAlign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Camera *arg1 = (opi2d::Camera *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Camera_GetAlign",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Camera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Camera_GetAlign" "', argument " "1"" of type '" "opi2d::Camera const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Camera * >(argp1);
  result = (bool)((opi2d::Camera const *)arg1)->GetAlign();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Camera(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Camera *arg1 = (opi2d::Camera *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Camera",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Camera, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Camera" "', argument " "1"" of type '" "opi2d::Camera *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Camera * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Camera_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Camera, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Light(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Light *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Light")) SWIG_fail;
  result = (opi2d::Light *)new opi2d::Light();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Light, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_color_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Light *arg1 = (opi2d::Light *) 0 ;
  opi2d::Color *arg2 = (opi2d::Color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Light_color_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_color_set" "', argument " "1"" of type '" "opi2d::Light *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Light * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Color, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Light_color_set" "', argument " "2"" of type '" "opi2d::Color *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Color * >(argp2);
  if (arg1) (arg1)->color = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_color_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Light *arg1 = (opi2d::Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Color *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Light_color_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_color_get" "', argument " "1"" of type '" "opi2d::Light *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Light * >(argp1);
  result = (opi2d::Color *)& ((arg1)->color);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Color, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_intensity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Light *arg1 = (opi2d::Light *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Light_intensity_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_intensity_set" "', argument " "1"" of type '" "opi2d::Light *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Light * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Light_intensity_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->intensity = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_intensity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Light *arg1 = (opi2d::Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Light_intensity_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_intensity_get" "', argument " "1"" of type '" "opi2d::Light *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Light * >(argp1);
  result = (floatval) ((arg1)->intensity);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_cutoff_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Light *arg1 = (opi2d::Light *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Light_cutoff_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_cutoff_set" "', argument " "1"" of type '" "opi2d::Light *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Light * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Light_cutoff_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->cutoff = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_cutoff_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Light *arg1 = (opi2d::Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Light_cutoff_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_cutoff_get" "', argument " "1"" of type '" "opi2d::Light *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Light * >(argp1);
  result = (floatval) ((arg1)->cutoff);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_pos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Light *arg1 = (opi2d::Light *) 0 ;
  opi2d::Vec2 *arg2 = (opi2d::Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Light_pos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_pos_set" "', argument " "1"" of type '" "opi2d::Light *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Light * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Light_pos_set" "', argument " "2"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  if (arg1) (arg1)->pos = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_pos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Light *arg1 = (opi2d::Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Light_pos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_pos_get" "', argument " "1"" of type '" "opi2d::Light *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Light * >(argp1);
  result = (opi2d::Vec2 *)& ((arg1)->pos);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_node_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Light *arg1 = (opi2d::Light *) 0 ;
  opi2d::Node *arg2 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Light_node_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_node_set" "', argument " "1"" of type '" "opi2d::Light *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Light * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Light_node_set" "', argument " "2"" of type '" "opi2d::Node *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Node * >(argp2);
  if (arg1) (arg1)->node = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_node_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Light *arg1 = (opi2d::Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Light_node_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_node_get" "', argument " "1"" of type '" "opi2d::Light *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Light * >(argp1);
  result = (opi2d::Node *) ((arg1)->node);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Node, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_worldpos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Light *arg1 = (opi2d::Light *) 0 ;
  opi2d::Vec2 *arg2 = (opi2d::Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Light_worldpos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_worldpos_set" "', argument " "1"" of type '" "opi2d::Light *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Light * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Light_worldpos_set" "', argument " "2"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  if (arg1) (arg1)->worldpos = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_worldpos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Light *arg1 = (opi2d::Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Light_worldpos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_worldpos_get" "', argument " "1"" of type '" "opi2d::Light *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Light * >(argp1);
  result = (opi2d::Vec2 *)& ((arg1)->worldpos);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_pos_update_tick_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Light *arg1 = (opi2d::Light *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Light_pos_update_tick_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_pos_update_tick_set" "', argument " "1"" of type '" "opi2d::Light *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Light * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Light_pos_update_tick_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->pos_update_tick = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_pos_update_tick_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Light *arg1 = (opi2d::Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Light_pos_update_tick_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_pos_update_tick_get" "', argument " "1"" of type '" "opi2d::Light *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Light * >(argp1);
  result = (int) ((arg1)->pos_update_tick);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Light(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Light *arg1 = (opi2d::Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Light",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Light, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Light" "', argument " "1"" of type '" "opi2d::Light *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Light * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Light_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Light, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RenderingPass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::RenderingPass *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RenderingPass")) SWIG_fail;
  result = (opi2d::RenderingPass *)new opi2d::RenderingPass();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__RenderingPass, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RenderingPass_SetSrcFunc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::RenderingPass *arg1 = (opi2d::RenderingPass *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RenderingPass_SetSrcFunc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__RenderingPass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RenderingPass_SetSrcFunc" "', argument " "1"" of type '" "opi2d::RenderingPass *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::RenderingPass * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RenderingPass_SetSrcFunc" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetSrcFunc(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RenderingPass_SetDstFunc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::RenderingPass *arg1 = (opi2d::RenderingPass *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RenderingPass_SetDstFunc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__RenderingPass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RenderingPass_SetDstFunc" "', argument " "1"" of type '" "opi2d::RenderingPass *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::RenderingPass * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RenderingPass_SetDstFunc" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetDstFunc(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RenderingPass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::RenderingPass *arg1 = (opi2d::RenderingPass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RenderingPass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__RenderingPass, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RenderingPass" "', argument " "1"" of type '" "opi2d::RenderingPass *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::RenderingPass * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RenderingPass_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__RenderingPass, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Layer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  opi2d::Layer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Layer",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Layer" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Layer" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (opi2d::Layer *)new opi2d::Layer((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Layer, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Layer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Layer *arg1 = (opi2d::Layer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Layer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Layer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Layer" "', argument " "1"" of type '" "opi2d::Layer *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Layer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Layer_GetName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Layer *arg1 = (opi2d::Layer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Layer_GetName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Layer_GetName" "', argument " "1"" of type '" "opi2d::Layer const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Layer * >(argp1);
  result = (std::string *) &((opi2d::Layer const *)arg1)->GetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Layer_Render(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Layer *arg1 = (opi2d::Layer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Layer_Render",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Layer_Render" "', argument " "1"" of type '" "opi2d::Layer *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Layer * >(argp1);
  (arg1)->Render();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Layer_SetFreeForm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Layer *arg1 = (opi2d::Layer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Layer_SetFreeForm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Layer_SetFreeForm" "', argument " "1"" of type '" "opi2d::Layer *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Layer * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Layer_SetFreeForm" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetFreeForm(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Layer_AddNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Layer *arg1 = (opi2d::Layer *) 0 ;
  opi2d::Node *arg2 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Layer_AddNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Layer_AddNode" "', argument " "1"" of type '" "opi2d::Layer *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Layer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Layer_AddNode" "', argument " "2"" of type '" "opi2d::Node *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Node * >(argp2);
  (arg1)->AddNode(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Layer_RemoveNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Layer *arg1 = (opi2d::Layer *) 0 ;
  opi2d::Node *arg2 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Layer_RemoveNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Layer_RemoveNode" "', argument " "1"" of type '" "opi2d::Layer *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Layer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Layer_RemoveNode" "', argument " "2"" of type '" "opi2d::Node *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Node * >(argp2);
  (arg1)->RemoveNode(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Layer_Pick(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Layer *arg1 = (opi2d::Layer *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Sprite *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Layer_Pick",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Layer_Pick" "', argument " "1"" of type '" "opi2d::Layer *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Layer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Layer_Pick" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Layer_Pick" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  result = (opi2d::Sprite *)(arg1)->Pick((opi2d::Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Sprite, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Layer_AddRenderingPass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Layer *arg1 = (opi2d::Layer *) 0 ;
  opi2d::RenderingPass *arg2 = (opi2d::RenderingPass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Layer_AddRenderingPass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Layer_AddRenderingPass" "', argument " "1"" of type '" "opi2d::Layer *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Layer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__RenderingPass, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Layer_AddRenderingPass" "', argument " "2"" of type '" "opi2d::RenderingPass *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::RenderingPass * >(argp2);
  (arg1)->AddRenderingPass(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Layer_ResetRenderingPasses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Layer *arg1 = (opi2d::Layer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Layer_ResetRenderingPasses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Layer_ResetRenderingPasses" "', argument " "1"" of type '" "opi2d::Layer *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Layer * >(argp1);
  (arg1)->ResetRenderingPasses();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Layer_SendNodeToTop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Layer *arg1 = (opi2d::Layer *) 0 ;
  opi2d::Node *arg2 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Layer_SendNodeToTop",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Layer_SendNodeToTop" "', argument " "1"" of type '" "opi2d::Layer *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Layer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Layer_SendNodeToTop" "', argument " "2"" of type '" "opi2d::Node *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Node * >(argp2);
  (arg1)->SendNodeToTop(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Layer_SendNodeToBottom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Layer *arg1 = (opi2d::Layer *) 0 ;
  opi2d::Node *arg2 = (opi2d::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Layer_SendNodeToBottom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Layer_SendNodeToBottom" "', argument " "1"" of type '" "opi2d::Layer *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Layer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Layer_SendNodeToBottom" "', argument " "2"" of type '" "opi2d::Node *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Node * >(argp2);
  (arg1)->SendNodeToBottom(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Layer_GetNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Layer *arg1 = (opi2d::Layer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Nodes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Layer_GetNodes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Layer_GetNodes" "', argument " "1"" of type '" "opi2d::Layer *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Layer * >(argp1);
  result = (arg1)->GetNodes();
  resultobj = swig::from(static_cast< std::list<opi2d::Node*,std::allocator< opi2d::Node * > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Layer_SetNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Layer *arg1 = (opi2d::Layer *) 0 ;
  opi2d::Nodes arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Layer_SetNodes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Layer_SetNodes" "', argument " "1"" of type '" "opi2d::Layer *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Layer * >(argp1);
  {
    std::list<opi2d::Node*,std::allocator< opi2d::Node * > > *ptr = (std::list<opi2d::Node*,std::allocator< opi2d::Node * > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Layer_SetNodes" "', argument " "2"" of type '" "opi2d::Nodes""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->SetNodes(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Layer_camera_offset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Layer *arg1 = (opi2d::Layer *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Layer_camera_offset_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Layer_camera_offset_set" "', argument " "1"" of type '" "opi2d::Layer *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Layer * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Layer_camera_offset_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->camera_offset = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Layer_camera_offset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Layer *arg1 = (opi2d::Layer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Layer_camera_offset_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Layer_camera_offset_get" "', argument " "1"" of type '" "opi2d::Layer *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Layer * >(argp1);
  result = (floatval) ((arg1)->camera_offset);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Layer_camera_rotation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Layer *arg1 = (opi2d::Layer *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Layer_camera_rotation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Layer_camera_rotation_set" "', argument " "1"" of type '" "opi2d::Layer *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Layer * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Layer_camera_rotation_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->camera_rotation = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Layer_camera_rotation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Layer *arg1 = (opi2d::Layer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Layer_camera_rotation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Layer_camera_rotation_get" "', argument " "1"" of type '" "opi2d::Layer *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Layer * >(argp1);
  result = (floatval) ((arg1)->camera_rotation);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Layer_camera_zoom_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Layer *arg1 = (opi2d::Layer *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Layer_camera_zoom_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Layer_camera_zoom_set" "', argument " "1"" of type '" "opi2d::Layer *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Layer * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Layer_camera_zoom_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->camera_zoom = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Layer_camera_zoom_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Layer *arg1 = (opi2d::Layer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Layer_camera_zoom_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Layer_camera_zoom_get" "', argument " "1"" of type '" "opi2d::Layer *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Layer * >(argp1);
  result = (floatval) ((arg1)->camera_zoom);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Layer_ignore_camera_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Layer *arg1 = (opi2d::Layer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Layer_ignore_camera_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Layer_ignore_camera_set" "', argument " "1"" of type '" "opi2d::Layer *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Layer * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Layer_ignore_camera_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->ignore_camera = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Layer_ignore_camera_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Layer *arg1 = (opi2d::Layer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Layer_ignore_camera_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Layer_ignore_camera_get" "', argument " "1"" of type '" "opi2d::Layer *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Layer * >(argp1);
  result = (bool) ((arg1)->ignore_camera);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Layer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Layer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Scene(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Scene *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Scene")) SWIG_fail;
  result = (opi2d::Scene *)new opi2d::Scene();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Scene, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Scene(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Scene *arg1 = (opi2d::Scene *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Scene",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Scene, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Scene" "', argument " "1"" of type '" "opi2d::Scene *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Scene * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scene_SetCallbacks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Scene *arg1 = (opi2d::Scene *) 0 ;
  opi2d::SceneCallbacks *arg2 = (opi2d::SceneCallbacks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scene_SetCallbacks",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Scene, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scene_SetCallbacks" "', argument " "1"" of type '" "opi2d::Scene *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Scene * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__SceneCallbacks, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scene_SetCallbacks" "', argument " "2"" of type '" "opi2d::SceneCallbacks *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::SceneCallbacks * >(argp2);
  (arg1)->SetCallbacks(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scene_GetCallbacks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Scene *arg1 = (opi2d::Scene *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  opi2d::SceneCallbacks *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scene_GetCallbacks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Scene, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scene_GetCallbacks" "', argument " "1"" of type '" "opi2d::Scene *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Scene * >(argp1);
  result = (opi2d::SceneCallbacks *)(arg1)->GetCallbacks();
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__SceneCallbacks, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scene_GetGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Scene *arg1 = (opi2d::Scene *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::SpriteGroup *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scene_GetGroup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Scene, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scene_GetGroup" "', argument " "1"" of type '" "opi2d::Scene *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Scene * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scene_GetGroup" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scene_GetGroup" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (opi2d::SpriteGroup *)(arg1)->GetGroup((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__SpriteGroup, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scene_CreateGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Scene *arg1 = (opi2d::Scene *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::SpriteGroup *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scene_CreateGroup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Scene, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scene_CreateGroup" "', argument " "1"" of type '" "opi2d::Scene *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Scene * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scene_CreateGroup" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scene_CreateGroup" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (opi2d::SpriteGroup *)(arg1)->CreateGroup((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__SpriteGroup, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scene_EnableCollisions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Scene *arg1 = (opi2d::Scene *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Scene_EnableCollisions",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Scene, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scene_EnableCollisions" "', argument " "1"" of type '" "opi2d::Scene *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Scene * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scene_EnableCollisions" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scene_EnableCollisions" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Scene_EnableCollisions" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scene_EnableCollisions" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->EnableCollisions((std::string const &)*arg2,(std::string const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scene_Tick(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Scene *arg1 = (opi2d::Scene *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scene_Tick",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Scene, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scene_Tick" "', argument " "1"" of type '" "opi2d::Scene *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Scene * >(argp1);
  (arg1)->Tick();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scene_RealTick(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Scene *arg1 = (opi2d::Scene *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scene_RealTick",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Scene, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scene_RealTick" "', argument " "1"" of type '" "opi2d::Scene *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Scene * >(argp1);
  (arg1)->RealTick();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scene_Render(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Scene *arg1 = (opi2d::Scene *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scene_Render",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Scene, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scene_Render" "', argument " "1"" of type '" "opi2d::Scene *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Scene * >(argp1);
  (arg1)->Render();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scene_AddLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Scene *arg1 = (opi2d::Scene *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scene_AddLayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Scene, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scene_AddLayer" "', argument " "1"" of type '" "opi2d::Scene *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Scene * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Scene_AddLayer" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->AddLayer(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scene_DeleteLayer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Scene *arg1 = (opi2d::Scene *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scene_DeleteLayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Scene, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scene_DeleteLayer" "', argument " "1"" of type '" "opi2d::Scene *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Scene * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scene_DeleteLayer" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scene_DeleteLayer" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->DeleteLayer((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scene_DeleteLayer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Scene *arg1 = (opi2d::Scene *) 0 ;
  opi2d::Layer *arg2 = (opi2d::Layer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scene_DeleteLayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Scene, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scene_DeleteLayer" "', argument " "1"" of type '" "opi2d::Scene *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Scene * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scene_DeleteLayer" "', argument " "2"" of type '" "opi2d::Layer *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Layer * >(argp2);
  (arg1)->DeleteLayer(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scene_DeleteLayer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Scene, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_opi2d__Layer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Scene_DeleteLayer__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Scene, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Scene_DeleteLayer__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scene_DeleteLayer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DeleteLayer(opi2d::Scene *,std::string const &)\n"
    "    DeleteLayer(opi2d::Scene *,opi2d::Layer *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scene_GetLayers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Scene *arg1 = (opi2d::Scene *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Layers result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scene_GetLayers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Scene, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scene_GetLayers" "', argument " "1"" of type '" "opi2d::Scene *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Scene * >(argp1);
  result = (arg1)->GetLayers();
  resultobj = swig::from(static_cast< std::list<opi2d::Layer*,std::allocator< opi2d::Layer * > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scene_SetLayers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Scene *arg1 = (opi2d::Scene *) 0 ;
  opi2d::Layers arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scene_SetLayers",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Scene, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scene_SetLayers" "', argument " "1"" of type '" "opi2d::Scene *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Scene * >(argp1);
  {
    std::list<opi2d::Layer*,std::allocator< opi2d::Layer * > > *ptr = (std::list<opi2d::Layer*,std::allocator< opi2d::Layer * > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Scene_SetLayers" "', argument " "2"" of type '" "opi2d::Layers""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->SetLayers(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scene_GetLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Scene *arg1 = (opi2d::Scene *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Layer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scene_GetLayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Scene, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scene_GetLayer" "', argument " "1"" of type '" "opi2d::Scene *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Scene * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Scene_GetLayer" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (opi2d::Layer *)(arg1)->GetLayer(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Layer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scene_GetCamera(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Scene *arg1 = (opi2d::Scene *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Camera *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scene_GetCamera",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Scene, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scene_GetCamera" "', argument " "1"" of type '" "opi2d::Scene *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Scene * >(argp1);
  result = (opi2d::Camera *)(arg1)->GetCamera();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Camera, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scene_AddLight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Scene *arg1 = (opi2d::Scene *) 0 ;
  opi2d::Light *arg2 = (opi2d::Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scene_AddLight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Scene, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scene_AddLight" "', argument " "1"" of type '" "opi2d::Scene *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Scene * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Light, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scene_AddLight" "', argument " "2"" of type '" "opi2d::Light *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Light * >(argp2);
  (arg1)->AddLight(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scene_RemoveLight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Scene *arg1 = (opi2d::Scene *) 0 ;
  opi2d::Light *arg2 = (opi2d::Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scene_RemoveLight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Scene, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scene_RemoveLight" "', argument " "1"" of type '" "opi2d::Scene *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Scene * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Light, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scene_RemoveLight" "', argument " "2"" of type '" "opi2d::Light *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Light * >(argp2);
  (arg1)->RemoveLight(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scene_SetAmbientLight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Scene *arg1 = (opi2d::Scene *) 0 ;
  opi2d::Color *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scene_SetAmbientLight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Scene, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scene_SetAmbientLight" "', argument " "1"" of type '" "opi2d::Scene *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Scene * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Color,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scene_SetAmbientLight" "', argument " "2"" of type '" "opi2d::Color const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scene_SetAmbientLight" "', argument " "2"" of type '" "opi2d::Color const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Color * >(argp2);
  (arg1)->SetAmbientLight((opi2d::Color const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Scene_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Scene, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SpriteGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  opi2d::SpriteGroup *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SpriteGroup",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpriteGroup" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpriteGroup" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (opi2d::SpriteGroup *)new opi2d::SpriteGroup((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__SpriteGroup, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SpriteGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::SpriteGroup *arg1 = (opi2d::SpriteGroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SpriteGroup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__SpriteGroup, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpriteGroup" "', argument " "1"" of type '" "opi2d::SpriteGroup *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::SpriteGroup * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteGroup_AddMutator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::SpriteGroup *arg1 = (opi2d::SpriteGroup *) 0 ;
  opi2d::Mutator *arg2 = (opi2d::Mutator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SpriteGroup_AddMutator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__SpriteGroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteGroup_AddMutator" "', argument " "1"" of type '" "opi2d::SpriteGroup *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::SpriteGroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Mutator, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpriteGroup_AddMutator" "', argument " "2"" of type '" "opi2d::Mutator *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Mutator * >(argp2);
  (arg1)->AddMutator(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteGroup_Pick(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::SpriteGroup *arg1 = (opi2d::SpriteGroup *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Sprite *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SpriteGroup_Pick",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__SpriteGroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteGroup_Pick" "', argument " "1"" of type '" "opi2d::SpriteGroup const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::SpriteGroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpriteGroup_Pick" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpriteGroup_Pick" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  result = (opi2d::Sprite *)((opi2d::SpriteGroup const *)arg1)->Pick((opi2d::Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Sprite, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteGroup_GetSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::SpriteGroup *arg1 = (opi2d::SpriteGroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpriteGroup_GetSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__SpriteGroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteGroup_GetSize" "', argument " "1"" of type '" "opi2d::SpriteGroup const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::SpriteGroup * >(argp1);
  result = (int)((opi2d::SpriteGroup const *)arg1)->GetSize();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteGroup_ListSprites(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::SpriteGroup *arg1 = (opi2d::SpriteGroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< opi2d::Sprite *,std::allocator< opi2d::Sprite * > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpriteGroup_ListSprites",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__SpriteGroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpriteGroup_ListSprites" "', argument " "1"" of type '" "opi2d::SpriteGroup const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::SpriteGroup * >(argp1);
  result = ((opi2d::SpriteGroup const *)arg1)->ListSprites();
  resultobj = swig::from(static_cast< std::vector<opi2d::Sprite*,std::allocator< opi2d::Sprite * > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SpriteGroup_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__SpriteGroup, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Sprite__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Image *arg1 = (opi2d::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Sprite *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Sprite",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Sprite" "', argument " "1"" of type '" "opi2d::Image const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Image * >(argp1);
  result = (opi2d::Sprite *)new opi2d::Sprite((opi2d::Image const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Sprite, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Sprite__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Sprite *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Sprite")) SWIG_fail;
  result = (opi2d::Sprite *)new opi2d::Sprite();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Sprite, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Sprite(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Sprite__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_opi2d__Image, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Sprite__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Sprite'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    opi2d::Sprite(opi2d::Image const *)\n"
    "    opi2d::Sprite()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Sprite(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Sprite *arg1 = (opi2d::Sprite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Sprite",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Sprite, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Sprite" "', argument " "1"" of type '" "opi2d::Sprite *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Sprite * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sprite_ReUse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Sprite *arg1 = (opi2d::Sprite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Sprite_ReUse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Sprite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sprite_ReUse" "', argument " "1"" of type '" "opi2d::Sprite *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Sprite * >(argp1);
  (arg1)->ReUse();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sprite_JoinGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Sprite *arg1 = (opi2d::Sprite *) 0 ;
  opi2d::SpriteGroup *arg2 = (opi2d::SpriteGroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Sprite_JoinGroup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Sprite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sprite_JoinGroup" "', argument " "1"" of type '" "opi2d::Sprite *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Sprite * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__SpriteGroup, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sprite_JoinGroup" "', argument " "2"" of type '" "opi2d::SpriteGroup *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::SpriteGroup * >(argp2);
  (arg1)->JoinGroup(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sprite_LeaveGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Sprite *arg1 = (opi2d::Sprite *) 0 ;
  opi2d::SpriteGroup *arg2 = (opi2d::SpriteGroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Sprite_LeaveGroup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Sprite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sprite_LeaveGroup" "', argument " "1"" of type '" "opi2d::Sprite *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Sprite * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__SpriteGroup, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sprite_LeaveGroup" "', argument " "2"" of type '" "opi2d::SpriteGroup *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::SpriteGroup * >(argp2);
  (arg1)->LeaveGroup(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sprite_SetImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Sprite *arg1 = (opi2d::Sprite *) 0 ;
  opi2d::Image *arg2 = (opi2d::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Sprite_SetImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Sprite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sprite_SetImage" "', argument " "1"" of type '" "opi2d::Sprite *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Sprite * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sprite_SetImage" "', argument " "2"" of type '" "opi2d::Image const *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Image * >(argp2);
  (arg1)->SetImage((opi2d::Image const *)arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sprite_EnableLighting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Sprite *arg1 = (opi2d::Sprite *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Sprite_EnableLighting",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Sprite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sprite_EnableLighting" "', argument " "1"" of type '" "opi2d::Sprite *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Sprite * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sprite_EnableLighting" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->EnableLighting(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sprite_PickSelf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Sprite *arg1 = (opi2d::Sprite *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  opi2d::Sprite *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Sprite_PickSelf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Sprite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sprite_PickSelf" "', argument " "1"" of type '" "opi2d::Sprite *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Sprite * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sprite_PickSelf" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sprite_PickSelf" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  result = (opi2d::Sprite *)(arg1)->PickSelf((opi2d::Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Sprite, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Sprite_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Sprite, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Area_contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Area *arg1 = (opi2d::Area *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Area_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Area, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Area_contains" "', argument " "1"" of type '" "opi2d::Area const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Area * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Area_contains" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Area_contains" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  result = (bool)((opi2d::Area const *)arg1)->contains((opi2d::Vec2 const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Area *arg1 = (opi2d::Area *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Area, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Area" "', argument " "1"" of type '" "opi2d::Area *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Area * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Area_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Area, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_RectArea_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::RectArea *arg1 = (opi2d::RectArea *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RectArea_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__RectArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectArea_x_set" "', argument " "1"" of type '" "opi2d::RectArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::RectArea * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RectArea_x_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RectArea_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::RectArea *arg1 = (opi2d::RectArea *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RectArea_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__RectArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectArea_x_get" "', argument " "1"" of type '" "opi2d::RectArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::RectArea * >(argp1);
  result = (floatval) ((arg1)->x);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RectArea_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::RectArea *arg1 = (opi2d::RectArea *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RectArea_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__RectArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectArea_y_set" "', argument " "1"" of type '" "opi2d::RectArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::RectArea * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RectArea_y_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RectArea_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::RectArea *arg1 = (opi2d::RectArea *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RectArea_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__RectArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectArea_y_get" "', argument " "1"" of type '" "opi2d::RectArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::RectArea * >(argp1);
  result = (floatval) ((arg1)->y);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RectArea_xx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::RectArea *arg1 = (opi2d::RectArea *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RectArea_xx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__RectArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectArea_xx_set" "', argument " "1"" of type '" "opi2d::RectArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::RectArea * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RectArea_xx_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->xx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RectArea_xx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::RectArea *arg1 = (opi2d::RectArea *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RectArea_xx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__RectArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectArea_xx_get" "', argument " "1"" of type '" "opi2d::RectArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::RectArea * >(argp1);
  result = (floatval) ((arg1)->xx);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RectArea_yy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::RectArea *arg1 = (opi2d::RectArea *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RectArea_yy_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__RectArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectArea_yy_set" "', argument " "1"" of type '" "opi2d::RectArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::RectArea * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RectArea_yy_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->yy = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RectArea_yy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::RectArea *arg1 = (opi2d::RectArea *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RectArea_yy_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__RectArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectArea_yy_get" "', argument " "1"" of type '" "opi2d::RectArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::RectArea * >(argp1);
  result = (floatval) ((arg1)->yy);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RectArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  floatval arg1 ;
  floatval arg2 ;
  floatval arg3 ;
  floatval arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  opi2d::RectArea *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_RectArea",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RectArea" "', argument " "1"" of type '" "floatval""'");
  } 
  arg1 = static_cast< floatval >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RectArea" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RectArea" "', argument " "3"" of type '" "floatval""'");
  } 
  arg3 = static_cast< floatval >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RectArea" "', argument " "4"" of type '" "floatval""'");
  } 
  arg4 = static_cast< floatval >(val4);
  result = (opi2d::RectArea *)new opi2d::RectArea(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__RectArea, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RectArea_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::RectArea *arg1 = (opi2d::RectArea *) 0 ;
  floatval arg2 ;
  floatval arg3 ;
  floatval arg4 ;
  floatval arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:RectArea_set",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__RectArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectArea_set" "', argument " "1"" of type '" "opi2d::RectArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::RectArea * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RectArea_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RectArea_set" "', argument " "3"" of type '" "floatval""'");
  } 
  arg3 = static_cast< floatval >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RectArea_set" "', argument " "4"" of type '" "floatval""'");
  } 
  arg4 = static_cast< floatval >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RectArea_set" "', argument " "5"" of type '" "floatval""'");
  } 
  arg5 = static_cast< floatval >(val5);
  (arg1)->set(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RectArea_contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::RectArea *arg1 = (opi2d::RectArea *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RectArea_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__RectArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectArea_contains" "', argument " "1"" of type '" "opi2d::RectArea const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::RectArea * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RectArea_contains" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RectArea_contains" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  result = (bool)((opi2d::RectArea const *)arg1)->contains((opi2d::Vec2 const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RectArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::RectArea *arg1 = (opi2d::RectArea *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RectArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__RectArea, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RectArea" "', argument " "1"" of type '" "opi2d::RectArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::RectArea * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RectArea_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__RectArea, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CircleArea_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CircleArea *arg1 = (opi2d::CircleArea *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CircleArea_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CircleArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CircleArea_x_set" "', argument " "1"" of type '" "opi2d::CircleArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CircleArea * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CircleArea_x_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CircleArea_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CircleArea *arg1 = (opi2d::CircleArea *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CircleArea_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CircleArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CircleArea_x_get" "', argument " "1"" of type '" "opi2d::CircleArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CircleArea * >(argp1);
  result = (floatval) ((arg1)->x);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CircleArea_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CircleArea *arg1 = (opi2d::CircleArea *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CircleArea_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CircleArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CircleArea_y_set" "', argument " "1"" of type '" "opi2d::CircleArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CircleArea * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CircleArea_y_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CircleArea_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CircleArea *arg1 = (opi2d::CircleArea *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CircleArea_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CircleArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CircleArea_y_get" "', argument " "1"" of type '" "opi2d::CircleArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CircleArea * >(argp1);
  result = (floatval) ((arg1)->y);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CircleArea_radius_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CircleArea *arg1 = (opi2d::CircleArea *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CircleArea_radius_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CircleArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CircleArea_radius_set" "', argument " "1"" of type '" "opi2d::CircleArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CircleArea * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CircleArea_radius_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->radius = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CircleArea_radius_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CircleArea *arg1 = (opi2d::CircleArea *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CircleArea_radius_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CircleArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CircleArea_radius_get" "', argument " "1"" of type '" "opi2d::CircleArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CircleArea * >(argp1);
  result = (floatval) ((arg1)->radius);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CircleArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  floatval arg1 ;
  floatval arg2 ;
  floatval arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  opi2d::CircleArea *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_CircleArea",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CircleArea" "', argument " "1"" of type '" "floatval""'");
  } 
  arg1 = static_cast< floatval >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CircleArea" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CircleArea" "', argument " "3"" of type '" "floatval""'");
  } 
  arg3 = static_cast< floatval >(val3);
  result = (opi2d::CircleArea *)new opi2d::CircleArea(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__CircleArea, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CircleArea_contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CircleArea *arg1 = (opi2d::CircleArea *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CircleArea_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CircleArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CircleArea_contains" "', argument " "1"" of type '" "opi2d::CircleArea const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CircleArea * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CircleArea_contains" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CircleArea_contains" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  result = (bool)((opi2d::CircleArea const *)arg1)->contains((opi2d::Vec2 const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CircleArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CircleArea *arg1 = (opi2d::CircleArea *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CircleArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CircleArea, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CircleArea" "', argument " "1"" of type '" "opi2d::CircleArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CircleArea * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CircleArea_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__CircleArea, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ArcArea_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ArcArea *arg1 = (opi2d::ArcArea *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ArcArea_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ArcArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArcArea_x_set" "', argument " "1"" of type '" "opi2d::ArcArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ArcArea * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ArcArea_x_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArcArea_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ArcArea *arg1 = (opi2d::ArcArea *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ArcArea_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ArcArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArcArea_x_get" "', argument " "1"" of type '" "opi2d::ArcArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ArcArea * >(argp1);
  result = (floatval) ((arg1)->x);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArcArea_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ArcArea *arg1 = (opi2d::ArcArea *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ArcArea_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ArcArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArcArea_y_set" "', argument " "1"" of type '" "opi2d::ArcArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ArcArea * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ArcArea_y_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArcArea_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ArcArea *arg1 = (opi2d::ArcArea *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ArcArea_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ArcArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArcArea_y_get" "', argument " "1"" of type '" "opi2d::ArcArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ArcArea * >(argp1);
  result = (floatval) ((arg1)->y);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArcArea_radius_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ArcArea *arg1 = (opi2d::ArcArea *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ArcArea_radius_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ArcArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArcArea_radius_set" "', argument " "1"" of type '" "opi2d::ArcArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ArcArea * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ArcArea_radius_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->radius = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArcArea_radius_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ArcArea *arg1 = (opi2d::ArcArea *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ArcArea_radius_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ArcArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArcArea_radius_get" "', argument " "1"" of type '" "opi2d::ArcArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ArcArea * >(argp1);
  result = (floatval) ((arg1)->radius);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArcArea_direction_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ArcArea *arg1 = (opi2d::ArcArea *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ArcArea_direction_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ArcArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArcArea_direction_set" "', argument " "1"" of type '" "opi2d::ArcArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ArcArea * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ArcArea_direction_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->direction = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArcArea_direction_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ArcArea *arg1 = (opi2d::ArcArea *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ArcArea_direction_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ArcArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArcArea_direction_get" "', argument " "1"" of type '" "opi2d::ArcArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ArcArea * >(argp1);
  result = (floatval) ((arg1)->direction);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArcArea_arc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ArcArea *arg1 = (opi2d::ArcArea *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ArcArea_arc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ArcArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArcArea_arc_set" "', argument " "1"" of type '" "opi2d::ArcArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ArcArea * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ArcArea_arc_set" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  if (arg1) (arg1)->arc = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArcArea_arc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ArcArea *arg1 = (opi2d::ArcArea *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ArcArea_arc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ArcArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArcArea_arc_get" "', argument " "1"" of type '" "opi2d::ArcArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ArcArea * >(argp1);
  result = (floatval) ((arg1)->arc);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArcArea_contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ArcArea *arg1 = (opi2d::ArcArea *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ArcArea_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ArcArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArcArea_contains" "', argument " "1"" of type '" "opi2d::ArcArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ArcArea * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArcArea_contains" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArcArea_contains" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  result = (bool)(arg1)->contains((opi2d::Vec2 const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ArcArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ArcArea *arg1 = (opi2d::ArcArea *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ArcArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ArcArea, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ArcArea" "', argument " "1"" of type '" "opi2d::ArcArea *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ArcArea * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ArcArea_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__ArcArea, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Mutator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Mutator *arg1 = (opi2d::Mutator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Mutator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Mutator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Mutator" "', argument " "1"" of type '" "opi2d::Mutator *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Mutator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Mutator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Mutator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LinearForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Vec2 *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::LinearForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LinearForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinearForce" "', argument " "1"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinearForce" "', argument " "1"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Vec2 * >(argp1);
  result = (opi2d::LinearForce *)new opi2d::LinearForce((opi2d::Vec2 const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__LinearForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LinearForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::LinearForce *arg1 = (opi2d::LinearForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LinearForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__LinearForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinearForce" "', argument " "1"" of type '" "opi2d::LinearForce *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::LinearForce * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LinearForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__LinearForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BounceBox__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  opi2d::BounceBox *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_BounceBox",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BounceBox" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BounceBox" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BounceBox" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_BounceBox" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_BounceBox" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (opi2d::BounceBox *)new opi2d::BounceBox(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__BounceBox, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BounceBox__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  opi2d::BounceBox *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_BounceBox",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BounceBox" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BounceBox" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BounceBox" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_BounceBox" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (opi2d::BounceBox *)new opi2d::BounceBox(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__BounceBox, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BounceBox(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_BounceBox__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_BounceBox__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_BounceBox'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    opi2d::BounceBox(int,int,int,int,bool)\n"
    "    opi2d::BounceBox(int,int,int,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_BounceBox_SetMultipliers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::BounceBox *arg1 = (opi2d::BounceBox *) 0 ;
  floatval arg2 ;
  floatval arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BounceBox_SetMultipliers",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__BounceBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BounceBox_SetMultipliers" "', argument " "1"" of type '" "opi2d::BounceBox *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::BounceBox * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BounceBox_SetMultipliers" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BounceBox_SetMultipliers" "', argument " "3"" of type '" "floatval""'");
  } 
  arg3 = static_cast< floatval >(val3);
  (arg1)->SetMultipliers(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BounceBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::BounceBox *arg1 = (opi2d::BounceBox *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BounceBox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__BounceBox, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BounceBox" "', argument " "1"" of type '" "opi2d::BounceBox *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::BounceBox * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BounceBox_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__BounceBox, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Zone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Area *arg1 = (opi2d::Area *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Zone *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Zone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Area, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Zone" "', argument " "1"" of type '" "opi2d::Area *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Area * >(argp1);
  result = (opi2d::Zone *)new opi2d::Zone(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Zone, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Zone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Zone *arg1 = (opi2d::Zone *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Zone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Zone, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Zone" "', argument " "1"" of type '" "opi2d::Zone *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Zone * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Zone_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Zone, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LifeZone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Area *arg1 = (opi2d::Area *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::LifeZone *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LifeZone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Area, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LifeZone" "', argument " "1"" of type '" "opi2d::Area *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Area * >(argp1);
  result = (opi2d::LifeZone *)new opi2d::LifeZone(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__LifeZone, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LifeZone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::LifeZone *arg1 = (opi2d::LifeZone *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LifeZone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__LifeZone, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LifeZone" "', argument " "1"" of type '" "opi2d::LifeZone *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::LifeZone * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LifeZone_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__LifeZone, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_KillZone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Area *arg1 = (opi2d::Area *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::KillZone *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_KillZone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Area, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KillZone" "', argument " "1"" of type '" "opi2d::Area *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Area * >(argp1);
  result = (opi2d::KillZone *)new opi2d::KillZone(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__KillZone, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_KillZone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::KillZone *arg1 = (opi2d::KillZone *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_KillZone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__KillZone, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_KillZone" "', argument " "1"" of type '" "opi2d::KillZone *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::KillZone * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *KillZone_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__KillZone, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DirectorSingleton_GetInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Director *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":DirectorSingleton_GetInstance")) SWIG_fail;
  result = (opi2d::Director *)opi2d::Singleton< opi2d::Director >::SWIGTEMPLATEDISAMBIGUATOR GetInstance();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Director, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectorSingleton_Init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DirectorSingleton_Init")) SWIG_fail;
  opi2d::Singleton< opi2d::Director >::SWIGTEMPLATEDISAMBIGUATOR Init();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectorSingleton_Destroy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DirectorSingleton_Destroy")) SWIG_fail;
  opi2d::Singleton< opi2d::Director >::SWIGTEMPLATEDISAMBIGUATOR Destroy();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DirectorSingleton(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Singleton< opi2d::Director > *arg1 = (opi2d::Singleton< opi2d::Director > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DirectorSingleton",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__SingletonT_opi2d__Director_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DirectorSingleton" "', argument " "1"" of type '" "opi2d::Singleton< opi2d::Director > *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Singleton< opi2d::Director > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DirectorSingleton_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__SingletonT_opi2d__Director_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DisplaySingleton_GetInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Display *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":DisplaySingleton_GetInstance")) SWIG_fail;
  result = (opi2d::Display *)opi2d::Singleton< opi2d::Display >::SWIGTEMPLATEDISAMBIGUATOR GetInstance();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Display, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DisplaySingleton_Init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DisplaySingleton_Init")) SWIG_fail;
  opi2d::Singleton< opi2d::Display >::SWIGTEMPLATEDISAMBIGUATOR Init();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DisplaySingleton_Destroy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DisplaySingleton_Destroy")) SWIG_fail;
  opi2d::Singleton< opi2d::Display >::SWIGTEMPLATEDISAMBIGUATOR Destroy();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DisplaySingleton(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Singleton< opi2d::Display > *arg1 = (opi2d::Singleton< opi2d::Display > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DisplaySingleton",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__SingletonT_opi2d__Display_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DisplaySingleton" "', argument " "1"" of type '" "opi2d::Singleton< opi2d::Display > *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Singleton< opi2d::Display > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DisplaySingleton_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__SingletonT_opi2d__Display_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SpriteMapperSingleton_GetInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::SpriteMapper *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":SpriteMapperSingleton_GetInstance")) SWIG_fail;
  result = (opi2d::SpriteMapper *)opi2d::Singleton< opi2d::SpriteMapper >::SWIGTEMPLATEDISAMBIGUATOR GetInstance();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__SpriteMapper, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteMapperSingleton_Init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SpriteMapperSingleton_Init")) SWIG_fail;
  opi2d::Singleton< opi2d::SpriteMapper >::SWIGTEMPLATEDISAMBIGUATOR Init();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpriteMapperSingleton_Destroy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SpriteMapperSingleton_Destroy")) SWIG_fail;
  opi2d::Singleton< opi2d::SpriteMapper >::SWIGTEMPLATEDISAMBIGUATOR Destroy();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SpriteMapperSingleton(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Singleton< opi2d::SpriteMapper > *arg1 = (opi2d::Singleton< opi2d::SpriteMapper > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SpriteMapperSingleton",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__SingletonT_opi2d__SpriteMapper_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpriteMapperSingleton" "', argument " "1"" of type '" "opi2d::Singleton< opi2d::SpriteMapper > *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Singleton< opi2d::SpriteMapper > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SpriteMapperSingleton_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__SingletonT_opi2d__SpriteMapper_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_SpriteMapper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::SpriteMapper *arg1 = (opi2d::SpriteMapper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SpriteMapper",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__SpriteMapper, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpriteMapper" "', argument " "1"" of type '" "opi2d::SpriteMapper *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::SpriteMapper * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SpriteMapper_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__SpriteMapper, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Director(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Director *arg1 = (opi2d::Director *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Director",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Director, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Director" "', argument " "1"" of type '" "opi2d::Director *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Director * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Director_Start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Director *arg1 = (opi2d::Director *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Director_Start",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Director, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Director_Start" "', argument " "1"" of type '" "opi2d::Director *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Director * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Director_Start" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->Start(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Director_Iterate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Director *arg1 = (opi2d::Director *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Director_Iterate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Director, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Director_Iterate" "', argument " "1"" of type '" "opi2d::Director *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Director * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Director_Iterate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->Iterate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Director_RenderFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Director *arg1 = (opi2d::Director *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Director_RenderFrame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Director, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Director_RenderFrame" "', argument " "1"" of type '" "opi2d::Director *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Director * >(argp1);
  (arg1)->RenderFrame();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Director_GetTicker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Director *arg1 = (opi2d::Director *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Ticker *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Director_GetTicker",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Director, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Director_GetTicker" "', argument " "1"" of type '" "opi2d::Director const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Director * >(argp1);
  result = (opi2d::Ticker *) &((opi2d::Director const *)arg1)->GetTicker();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Ticker, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Director_SetScene(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Director *arg1 = (opi2d::Director *) 0 ;
  opi2d::Scene *arg2 = (opi2d::Scene *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Director_SetScene",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Director, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Director_SetScene" "', argument " "1"" of type '" "opi2d::Director *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Director * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Scene, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Director_SetScene" "', argument " "2"" of type '" "opi2d::Scene *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Scene * >(argp2);
  (arg1)->SetScene(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Director_GetScene(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Director *arg1 = (opi2d::Director *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Scene *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Director_GetScene",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Director, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Director_GetScene" "', argument " "1"" of type '" "opi2d::Director *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Director * >(argp1);
  result = (opi2d::Scene *)(arg1)->GetScene();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Scene, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Director_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Director, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Display_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Display *arg1 = (opi2d::Display *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Display_Clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Display, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Display_Clear" "', argument " "1"" of type '" "opi2d::Display *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Display * >(argp1);
  (arg1)->Clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Display_SetClearColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Display *arg1 = (opi2d::Display *) 0 ;
  opi2d::Color *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Display_SetClearColor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Display, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Display_SetClearColor" "', argument " "1"" of type '" "opi2d::Display *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Display * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Color,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Display_SetClearColor" "', argument " "2"" of type '" "opi2d::Color const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Display_SetClearColor" "', argument " "2"" of type '" "opi2d::Color const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Color * >(argp2);
  (arg1)->SetClearColor((opi2d::Color const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Display_EnableClearing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Display *arg1 = (opi2d::Display *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Display_EnableClearing",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Display, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Display_EnableClearing" "', argument " "1"" of type '" "opi2d::Display *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Display * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Display_EnableClearing" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->EnableClearing(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Display_InitView(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Display *arg1 = (opi2d::Display *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Display_InitView",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Display, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Display_InitView" "', argument " "1"" of type '" "opi2d::Display *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Display * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Display_InitView" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Display_InitView" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Display_InitView" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Display_InitView" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  (arg1)->InitView(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Display(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::Display *arg1 = (opi2d::Display *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Display",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__Display, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Display" "', argument " "1"" of type '" "opi2d::Display *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::Display * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Display_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__Display, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_get_int_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":get_int_size")) SWIG_fail;
  result = (int)opi2d::get_int_size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_float_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":get_float_size")) SWIG_fail;
  result = (int)opi2d::get_float_size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_ptr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":get_ptr_size")) SWIG_fail;
  result = (int)opi2d::get_ptr_size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CodeObj(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CodeObj")) SWIG_fail;
  result = (opi2d::CodeObj *)new opi2d::CodeObj();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__CodeObj, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CodeObj(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CodeObj",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CodeObj" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_code_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CodeObj_code_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_code_set" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CodeObj_code_set" "', argument " "2"" of type '" "unsigned char const *""'"); 
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  if (arg1) (arg1)->code = (unsigned char const *)arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_code_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CodeObj_code_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_code_get" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  result = (unsigned char *) ((arg1)->code);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_concount_f_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CodeObj_concount_f_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_concount_f_set" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CodeObj_concount_f_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->concount_f = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_concount_f_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CodeObj_concount_f_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_concount_f_get" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  result = (int) ((arg1)->concount_f);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_concount_i_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CodeObj_concount_i_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_concount_i_set" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CodeObj_concount_i_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->concount_i = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_concount_i_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CodeObj_concount_i_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_concount_i_get" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  result = (int) ((arg1)->concount_i);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_concount_v_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CodeObj_concount_v_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_concount_v_set" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CodeObj_concount_v_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->concount_v = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_concount_v_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CodeObj_concount_v_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_concount_v_get" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  result = (int) ((arg1)->concount_v);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_concount_p_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CodeObj_concount_p_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_concount_p_set" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CodeObj_concount_p_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->concount_p = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_concount_p_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CodeObj_concount_p_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_concount_p_get" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  result = (int) ((arg1)->concount_p);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_conarray_f_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  floatval *arg2 = (floatval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CodeObj_conarray_f_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_conarray_f_set" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CodeObj_conarray_f_set" "', argument " "2"" of type '" "floatval *""'"); 
  }
  arg2 = reinterpret_cast< floatval * >(argp2);
  if (arg1) (arg1)->conarray_f = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_conarray_f_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CodeObj_conarray_f_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_conarray_f_get" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  result = (floatval *) ((arg1)->conarray_f);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_conarray_i_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CodeObj_conarray_i_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_conarray_i_set" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_int, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CodeObj_conarray_i_set" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  if (arg1) (arg1)->conarray_i = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_conarray_i_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CodeObj_conarray_i_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_conarray_i_get" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  result = (int *) ((arg1)->conarray_i);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_conarray_v_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  opi2d::Vec2 *arg2 = (opi2d::Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CodeObj_conarray_v_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_conarray_v_set" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Vec2, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CodeObj_conarray_v_set" "', argument " "2"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  if (arg1) (arg1)->conarray_v = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_conarray_v_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CodeObj_conarray_v_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_conarray_v_get" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  result = (opi2d::Vec2 *) ((arg1)->conarray_v);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_conarray_p_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  void **arg2 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CodeObj_conarray_p_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_conarray_p_set" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CodeObj_conarray_p_set" "', argument " "2"" of type '" "void **""'"); 
  }
  arg2 = reinterpret_cast< void ** >(argp2);
  if (arg1) (arg1)->conarray_p = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_conarray_p_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  void **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CodeObj_conarray_p_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_conarray_p_get" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  result = (void **) ((arg1)->conarray_p);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_varcount_f_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CodeObj_varcount_f_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_varcount_f_set" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CodeObj_varcount_f_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->varcount_f = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_varcount_f_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CodeObj_varcount_f_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_varcount_f_get" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  result = (int) ((arg1)->varcount_f);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_varcount_i_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CodeObj_varcount_i_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_varcount_i_set" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CodeObj_varcount_i_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->varcount_i = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_varcount_i_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CodeObj_varcount_i_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_varcount_i_get" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  result = (int) ((arg1)->varcount_i);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_varcount_v_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CodeObj_varcount_v_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_varcount_v_set" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CodeObj_varcount_v_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->varcount_v = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_varcount_v_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CodeObj_varcount_v_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_varcount_v_get" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  result = (int) ((arg1)->varcount_v);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_varcount_p_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CodeObj_varcount_p_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_varcount_p_set" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CodeObj_varcount_p_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->varcount_p = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_varcount_p_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CodeObj_varcount_p_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_varcount_p_get" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  result = (int) ((arg1)->varcount_p);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_max_stack_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CodeObj_max_stack_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_max_stack_set" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CodeObj_max_stack_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->max_stack = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_max_stack_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CodeObj_max_stack_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_max_stack_get" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  result = (int) ((arg1)->max_stack);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_init_code(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CodeObj_init_code",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_init_code" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CodeObj_init_code" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->init_code((char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_init_const_f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CodeObj_init_const_f",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_init_const_f" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CodeObj_init_const_f" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->init_const_f(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_init_const_i(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CodeObj_init_const_i",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_init_const_i" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CodeObj_init_const_i" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->init_const_i(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_init_const_v(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CodeObj_init_const_v",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_init_const_v" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CodeObj_init_const_v" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->init_const_v(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_init_const_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CodeObj_init_const_p",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_init_const_p" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CodeObj_init_const_p" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->init_const_p(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_set_const_f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  int arg2 ;
  floatval arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CodeObj_set_const_f",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_set_const_f" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CodeObj_set_const_f" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CodeObj_set_const_f" "', argument " "3"" of type '" "floatval""'");
  } 
  arg3 = static_cast< floatval >(val3);
  (arg1)->set_const_f(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_set_const_i(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CodeObj_set_const_i",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_set_const_i" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CodeObj_set_const_i" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CodeObj_set_const_i" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->set_const_i(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_set_const_v(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  int arg2 ;
  opi2d::Vec2 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CodeObj_set_const_v",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_set_const_v" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CodeObj_set_const_v" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CodeObj_set_const_v" "', argument " "3"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CodeObj_set_const_v" "', argument " "3"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg3 = reinterpret_cast< opi2d::Vec2 * >(argp3);
  (arg1)->set_const_v(arg2,(opi2d::Vec2 const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodeObj_set_const_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CodeObj_set_const_p",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodeObj_set_const_p" "', argument " "1"" of type '" "opi2d::CodeObj *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CodeObj_set_const_p" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CodeObj_set_const_p" "', argument " "3"" of type '" "void *""'"); 
  }
  (arg1)->set_const_p(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CodeObj_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__CodeObj, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ExecFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::CodeObj *arg1 = (opi2d::CodeObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::ExecFrame *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ExecFrame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ExecFrame" "', argument " "1"" of type '" "opi2d::CodeObj const *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::CodeObj * >(argp1);
  result = (opi2d::ExecFrame *)new opi2d::ExecFrame((opi2d::CodeObj const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__ExecFrame, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ExecFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ExecFrame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExecFrame" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_code_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  opi2d::CodeObj *arg2 = (opi2d::CodeObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ExecFrame_code_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_code_set" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__CodeObj, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExecFrame_code_set" "', argument " "2"" of type '" "opi2d::CodeObj const *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::CodeObj * >(argp2);
  if (arg1) (arg1)->code = (opi2d::CodeObj const *)arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_code_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::CodeObj *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExecFrame_code_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_code_get" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  result = (opi2d::CodeObj *) ((arg1)->code);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__CodeObj, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_stack_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ExecFrame_stack_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_stack_set" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExecFrame_stack_set" "', argument " "2"" of type '" "unsigned char *""'"); 
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  if (arg1) (arg1)->stack = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_stack_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExecFrame_stack_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_stack_get" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  result = (unsigned char *) ((arg1)->stack);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_top_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ExecFrame_top_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_top_set" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExecFrame_top_set" "', argument " "2"" of type '" "unsigned char *""'"); 
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  if (arg1) (arg1)->top = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_top_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExecFrame_top_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_top_get" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  result = (unsigned char *) ((arg1)->top);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_iptr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ExecFrame_iptr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_iptr_set" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExecFrame_iptr_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->iptr = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_iptr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExecFrame_iptr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_iptr_get" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  result = (int) ((arg1)->iptr);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_vararray_f_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  float *arg2 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ExecFrame_vararray_f_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_vararray_f_set" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExecFrame_vararray_f_set" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  if (arg1) (arg1)->vararray_f = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_vararray_f_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExecFrame_vararray_f_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_vararray_f_get" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  result = (float *) ((arg1)->vararray_f);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_vararray_i_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ExecFrame_vararray_i_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_vararray_i_set" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_int, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExecFrame_vararray_i_set" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  if (arg1) (arg1)->vararray_i = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_vararray_i_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExecFrame_vararray_i_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_vararray_i_get" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  result = (int *) ((arg1)->vararray_i);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_vararray_v_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  opi2d::Vec2 *arg2 = (opi2d::Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ExecFrame_vararray_v_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_vararray_v_set" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Vec2, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExecFrame_vararray_v_set" "', argument " "2"" of type '" "opi2d::Vec2 *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  if (arg1) (arg1)->vararray_v = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_vararray_v_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExecFrame_vararray_v_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_vararray_v_get" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  result = (opi2d::Vec2 *) ((arg1)->vararray_v);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_vararray_p_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  void **arg2 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ExecFrame_vararray_p_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_vararray_p_set" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExecFrame_vararray_p_set" "', argument " "2"" of type '" "void **""'"); 
  }
  arg2 = reinterpret_cast< void ** >(argp2);
  if (arg1) (arg1)->vararray_p = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_vararray_p_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  void **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExecFrame_vararray_p_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_vararray_p_get" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  result = (void **) ((arg1)->vararray_p);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_vectemp_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  opi2d::Vec2 *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ExecFrame_vectemp_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_vectemp_set" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExecFrame_vectemp_set" "', argument " "2"" of type '" "opi2d::Vec2 [5]""'"); 
  } 
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)5; ++ii) arg1->vectemp[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""vectemp""' of type '""opi2d::Vec2 [5]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_vectemp_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExecFrame_vectemp_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_vectemp_get" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  result = (opi2d::Vec2 *)(opi2d::Vec2 *) ((arg1)->vectemp);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_vecidx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ExecFrame_vecidx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_vecidx_set" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExecFrame_vecidx_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->vecidx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_vecidx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExecFrame_vecidx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_vecidx_get" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  result = (int) ((arg1)->vecidx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_prev_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  opi2d::ExecFrame *arg2 = (opi2d::ExecFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ExecFrame_prev_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_prev_set" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_opi2d__ExecFrame, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExecFrame_prev_set" "', argument " "2"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg2 = reinterpret_cast< opi2d::ExecFrame * >(argp2);
  if (arg1) (arg1)->prev = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_prev_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::ExecFrame *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExecFrame_prev_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_prev_get" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  result = (opi2d::ExecFrame *) ((arg1)->prev);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_restart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExecFrame_restart",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_restart" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  (arg1)->restart();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_execute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExecFrame_execute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_execute" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  (arg1)->execute();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_popSprite(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Sprite *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExecFrame_popSprite",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_popSprite" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  result = (opi2d::Sprite *)(arg1)->popSprite();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Sprite, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_pushf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  floatval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ExecFrame_pushf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_pushf" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExecFrame_pushf" "', argument " "2"" of type '" "floatval""'");
  } 
  arg2 = static_cast< floatval >(val2);
  (arg1)->pushf(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_pushi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ExecFrame_pushi",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_pushi" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExecFrame_pushi" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->pushi(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_pushv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  opi2d::Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ExecFrame_pushv",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_pushv" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_opi2d__Vec2,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExecFrame_pushv" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExecFrame_pushv" "', argument " "2"" of type '" "opi2d::Vec2 const &""'"); 
  }
  arg2 = reinterpret_cast< opi2d::Vec2 * >(argp2);
  (arg1)->pushv((opi2d::Vec2 const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_pushp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ExecFrame_pushp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_pushp" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExecFrame_pushp" "', argument " "2"" of type '" "void *""'"); 
  }
  (arg1)->pushp(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_popf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  floatval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExecFrame_popf",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_popf" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  result = (floatval)(arg1)->popf();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_popi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExecFrame_popi",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_popi" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  result = (int)(arg1)->popi();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_popp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExecFrame_popp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_popp" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  result = (void *)(arg1)->popp();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecFrame_popv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  opi2d::ExecFrame *arg1 = (opi2d::ExecFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  opi2d::Vec2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExecFrame_popv",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_opi2d__ExecFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecFrame_popv" "', argument " "1"" of type '" "opi2d::ExecFrame *""'"); 
  }
  arg1 = reinterpret_cast< opi2d::ExecFrame * >(argp1);
  result = (opi2d::Vec2 *)(arg1)->popv();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_opi2d__Vec2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ExecFrame_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_opi2d__ExecFrame, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"LayerList_iterator", _wrap_LayerList_iterator, METH_VARARGS, NULL},
	 { (char *)"LayerList___nonzero__", _wrap_LayerList___nonzero__, METH_VARARGS, NULL},
	 { (char *)"LayerList___bool__", _wrap_LayerList___bool__, METH_VARARGS, NULL},
	 { (char *)"LayerList___len__", _wrap_LayerList___len__, METH_VARARGS, NULL},
	 { (char *)"LayerList_pop", _wrap_LayerList_pop, METH_VARARGS, NULL},
	 { (char *)"LayerList___getslice__", _wrap_LayerList___getslice__, METH_VARARGS, NULL},
	 { (char *)"LayerList___setslice__", _wrap_LayerList___setslice__, METH_VARARGS, NULL},
	 { (char *)"LayerList___delslice__", _wrap_LayerList___delslice__, METH_VARARGS, NULL},
	 { (char *)"LayerList___delitem__", _wrap_LayerList___delitem__, METH_VARARGS, NULL},
	 { (char *)"LayerList___getitem__", _wrap_LayerList___getitem__, METH_VARARGS, NULL},
	 { (char *)"LayerList___setitem__", _wrap_LayerList___setitem__, METH_VARARGS, NULL},
	 { (char *)"LayerList_append", _wrap_LayerList_append, METH_VARARGS, NULL},
	 { (char *)"LayerList_empty", _wrap_LayerList_empty, METH_VARARGS, NULL},
	 { (char *)"LayerList_size", _wrap_LayerList_size, METH_VARARGS, NULL},
	 { (char *)"LayerList_clear", _wrap_LayerList_clear, METH_VARARGS, NULL},
	 { (char *)"LayerList_swap", _wrap_LayerList_swap, METH_VARARGS, NULL},
	 { (char *)"LayerList_get_allocator", _wrap_LayerList_get_allocator, METH_VARARGS, NULL},
	 { (char *)"LayerList_begin", _wrap_LayerList_begin, METH_VARARGS, NULL},
	 { (char *)"LayerList_end", _wrap_LayerList_end, METH_VARARGS, NULL},
	 { (char *)"LayerList_rbegin", _wrap_LayerList_rbegin, METH_VARARGS, NULL},
	 { (char *)"LayerList_rend", _wrap_LayerList_rend, METH_VARARGS, NULL},
	 { (char *)"LayerList_pop_back", _wrap_LayerList_pop_back, METH_VARARGS, NULL},
	 { (char *)"LayerList_erase", _wrap_LayerList_erase, METH_VARARGS, NULL},
	 { (char *)"new_LayerList", _wrap_new_LayerList, METH_VARARGS, NULL},
	 { (char *)"LayerList_push_back", _wrap_LayerList_push_back, METH_VARARGS, NULL},
	 { (char *)"LayerList_front", _wrap_LayerList_front, METH_VARARGS, NULL},
	 { (char *)"LayerList_back", _wrap_LayerList_back, METH_VARARGS, NULL},
	 { (char *)"LayerList_assign", _wrap_LayerList_assign, METH_VARARGS, NULL},
	 { (char *)"LayerList_resize", _wrap_LayerList_resize, METH_VARARGS, NULL},
	 { (char *)"LayerList_insert", _wrap_LayerList_insert, METH_VARARGS, NULL},
	 { (char *)"LayerList_pop_front", _wrap_LayerList_pop_front, METH_VARARGS, NULL},
	 { (char *)"LayerList_push_front", _wrap_LayerList_push_front, METH_VARARGS, NULL},
	 { (char *)"LayerList_remove", _wrap_LayerList_remove, METH_VARARGS, NULL},
	 { (char *)"LayerList_unique", _wrap_LayerList_unique, METH_VARARGS, NULL},
	 { (char *)"LayerList_reverse", _wrap_LayerList_reverse, METH_VARARGS, NULL},
	 { (char *)"LayerList_sort", _wrap_LayerList_sort, METH_VARARGS, NULL},
	 { (char *)"LayerList_merge", _wrap_LayerList_merge, METH_VARARGS, NULL},
	 { (char *)"delete_LayerList", _wrap_delete_LayerList, METH_VARARGS, NULL},
	 { (char *)"LayerList_swigregister", LayerList_swigregister, METH_VARARGS, NULL},
	 { (char *)"NodeList_iterator", _wrap_NodeList_iterator, METH_VARARGS, NULL},
	 { (char *)"NodeList___nonzero__", _wrap_NodeList___nonzero__, METH_VARARGS, NULL},
	 { (char *)"NodeList___bool__", _wrap_NodeList___bool__, METH_VARARGS, NULL},
	 { (char *)"NodeList___len__", _wrap_NodeList___len__, METH_VARARGS, NULL},
	 { (char *)"NodeList_pop", _wrap_NodeList_pop, METH_VARARGS, NULL},
	 { (char *)"NodeList___getslice__", _wrap_NodeList___getslice__, METH_VARARGS, NULL},
	 { (char *)"NodeList___setslice__", _wrap_NodeList___setslice__, METH_VARARGS, NULL},
	 { (char *)"NodeList___delslice__", _wrap_NodeList___delslice__, METH_VARARGS, NULL},
	 { (char *)"NodeList___delitem__", _wrap_NodeList___delitem__, METH_VARARGS, NULL},
	 { (char *)"NodeList___getitem__", _wrap_NodeList___getitem__, METH_VARARGS, NULL},
	 { (char *)"NodeList___setitem__", _wrap_NodeList___setitem__, METH_VARARGS, NULL},
	 { (char *)"NodeList_append", _wrap_NodeList_append, METH_VARARGS, NULL},
	 { (char *)"NodeList_empty", _wrap_NodeList_empty, METH_VARARGS, NULL},
	 { (char *)"NodeList_size", _wrap_NodeList_size, METH_VARARGS, NULL},
	 { (char *)"NodeList_clear", _wrap_NodeList_clear, METH_VARARGS, NULL},
	 { (char *)"NodeList_swap", _wrap_NodeList_swap, METH_VARARGS, NULL},
	 { (char *)"NodeList_get_allocator", _wrap_NodeList_get_allocator, METH_VARARGS, NULL},
	 { (char *)"NodeList_begin", _wrap_NodeList_begin, METH_VARARGS, NULL},
	 { (char *)"NodeList_end", _wrap_NodeList_end, METH_VARARGS, NULL},
	 { (char *)"NodeList_rbegin", _wrap_NodeList_rbegin, METH_VARARGS, NULL},
	 { (char *)"NodeList_rend", _wrap_NodeList_rend, METH_VARARGS, NULL},
	 { (char *)"NodeList_pop_back", _wrap_NodeList_pop_back, METH_VARARGS, NULL},
	 { (char *)"NodeList_erase", _wrap_NodeList_erase, METH_VARARGS, NULL},
	 { (char *)"new_NodeList", _wrap_new_NodeList, METH_VARARGS, NULL},
	 { (char *)"NodeList_push_back", _wrap_NodeList_push_back, METH_VARARGS, NULL},
	 { (char *)"NodeList_front", _wrap_NodeList_front, METH_VARARGS, NULL},
	 { (char *)"NodeList_back", _wrap_NodeList_back, METH_VARARGS, NULL},
	 { (char *)"NodeList_assign", _wrap_NodeList_assign, METH_VARARGS, NULL},
	 { (char *)"NodeList_resize", _wrap_NodeList_resize, METH_VARARGS, NULL},
	 { (char *)"NodeList_insert", _wrap_NodeList_insert, METH_VARARGS, NULL},
	 { (char *)"NodeList_pop_front", _wrap_NodeList_pop_front, METH_VARARGS, NULL},
	 { (char *)"NodeList_push_front", _wrap_NodeList_push_front, METH_VARARGS, NULL},
	 { (char *)"NodeList_remove", _wrap_NodeList_remove, METH_VARARGS, NULL},
	 { (char *)"NodeList_unique", _wrap_NodeList_unique, METH_VARARGS, NULL},
	 { (char *)"NodeList_reverse", _wrap_NodeList_reverse, METH_VARARGS, NULL},
	 { (char *)"NodeList_sort", _wrap_NodeList_sort, METH_VARARGS, NULL},
	 { (char *)"NodeList_merge", _wrap_NodeList_merge, METH_VARARGS, NULL},
	 { (char *)"delete_NodeList", _wrap_delete_NodeList, METH_VARARGS, NULL},
	 { (char *)"NodeList_swigregister", NodeList_swigregister, METH_VARARGS, NULL},
	 { (char *)"SpriteList_iterator", _wrap_SpriteList_iterator, METH_VARARGS, NULL},
	 { (char *)"SpriteList___nonzero__", _wrap_SpriteList___nonzero__, METH_VARARGS, NULL},
	 { (char *)"SpriteList___bool__", _wrap_SpriteList___bool__, METH_VARARGS, NULL},
	 { (char *)"SpriteList___len__", _wrap_SpriteList___len__, METH_VARARGS, NULL},
	 { (char *)"SpriteList_pop", _wrap_SpriteList_pop, METH_VARARGS, NULL},
	 { (char *)"SpriteList___getslice__", _wrap_SpriteList___getslice__, METH_VARARGS, NULL},
	 { (char *)"SpriteList___setslice__", _wrap_SpriteList___setslice__, METH_VARARGS, NULL},
	 { (char *)"SpriteList___delslice__", _wrap_SpriteList___delslice__, METH_VARARGS, NULL},
	 { (char *)"SpriteList___delitem__", _wrap_SpriteList___delitem__, METH_VARARGS, NULL},
	 { (char *)"SpriteList___getitem__", _wrap_SpriteList___getitem__, METH_VARARGS, NULL},
	 { (char *)"SpriteList___setitem__", _wrap_SpriteList___setitem__, METH_VARARGS, NULL},
	 { (char *)"SpriteList_append", _wrap_SpriteList_append, METH_VARARGS, NULL},
	 { (char *)"SpriteList_empty", _wrap_SpriteList_empty, METH_VARARGS, NULL},
	 { (char *)"SpriteList_size", _wrap_SpriteList_size, METH_VARARGS, NULL},
	 { (char *)"SpriteList_clear", _wrap_SpriteList_clear, METH_VARARGS, NULL},
	 { (char *)"SpriteList_swap", _wrap_SpriteList_swap, METH_VARARGS, NULL},
	 { (char *)"SpriteList_get_allocator", _wrap_SpriteList_get_allocator, METH_VARARGS, NULL},
	 { (char *)"SpriteList_begin", _wrap_SpriteList_begin, METH_VARARGS, NULL},
	 { (char *)"SpriteList_end", _wrap_SpriteList_end, METH_VARARGS, NULL},
	 { (char *)"SpriteList_rbegin", _wrap_SpriteList_rbegin, METH_VARARGS, NULL},
	 { (char *)"SpriteList_rend", _wrap_SpriteList_rend, METH_VARARGS, NULL},
	 { (char *)"SpriteList_pop_back", _wrap_SpriteList_pop_back, METH_VARARGS, NULL},
	 { (char *)"SpriteList_erase", _wrap_SpriteList_erase, METH_VARARGS, NULL},
	 { (char *)"new_SpriteList", _wrap_new_SpriteList, METH_VARARGS, NULL},
	 { (char *)"SpriteList_push_back", _wrap_SpriteList_push_back, METH_VARARGS, NULL},
	 { (char *)"SpriteList_front", _wrap_SpriteList_front, METH_VARARGS, NULL},
	 { (char *)"SpriteList_back", _wrap_SpriteList_back, METH_VARARGS, NULL},
	 { (char *)"SpriteList_assign", _wrap_SpriteList_assign, METH_VARARGS, NULL},
	 { (char *)"SpriteList_resize", _wrap_SpriteList_resize, METH_VARARGS, NULL},
	 { (char *)"SpriteList_insert", _wrap_SpriteList_insert, METH_VARARGS, NULL},
	 { (char *)"SpriteList_reserve", _wrap_SpriteList_reserve, METH_VARARGS, NULL},
	 { (char *)"SpriteList_capacity", _wrap_SpriteList_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_SpriteList", _wrap_delete_SpriteList, METH_VARARGS, NULL},
	 { (char *)"SpriteList_swigregister", SpriteList_swigregister, METH_VARARGS, NULL},
	 { (char *)"InitOpioid2D", _wrap_InitOpioid2D, METH_VARARGS, NULL},
	 { (char *)"QuitOpioid2D", _wrap_QuitOpioid2D, METH_VARARGS, NULL},
	 { (char *)"new_DeleteCallback", _wrap_new_DeleteCallback, METH_VARARGS, NULL},
	 { (char *)"delete_DeleteCallback", _wrap_delete_DeleteCallback, METH_VARARGS, NULL},
	 { (char *)"DeleteCallback_OnDelete", _wrap_DeleteCallback_OnDelete, METH_VARARGS, NULL},
	 { (char *)"disown_DeleteCallback", _wrap_disown_DeleteCallback, METH_VARARGS, NULL},
	 { (char *)"DeleteCallback_swigregister", DeleteCallback_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Identified", _wrap_new_Identified, METH_VARARGS, NULL},
	 { (char *)"delete_Identified", _wrap_delete_Identified, METH_VARARGS, NULL},
	 { (char *)"Identified_GetID", _wrap_Identified_GetID, METH_VARARGS, NULL},
	 { (char *)"Identified_ReUse", _wrap_Identified_ReUse, METH_VARARGS, NULL},
	 { (char *)"Identified_SetManaged", _wrap_Identified_SetManaged, METH_VARARGS, NULL},
	 { (char *)"Identified_Delete", _wrap_Identified_Delete, METH_VARARGS, NULL},
	 { (char *)"Identified_IsDeleted", _wrap_Identified_IsDeleted, METH_VARARGS, NULL},
	 { (char *)"Identified_SetDeleteCallback", _wrap_Identified_SetDeleteCallback, METH_VARARGS, NULL},
	 { (char *)"Identified_swigregister", Identified_swigregister, METH_VARARGS, NULL},
	 { (char *)"Vec2_x_set", _wrap_Vec2_x_set, METH_VARARGS, NULL},
	 { (char *)"Vec2_x_get", _wrap_Vec2_x_get, METH_VARARGS, NULL},
	 { (char *)"Vec2_y_set", _wrap_Vec2_y_set, METH_VARARGS, NULL},
	 { (char *)"Vec2_y_get", _wrap_Vec2_y_get, METH_VARARGS, NULL},
	 { (char *)"new_Vec2", _wrap_new_Vec2, METH_VARARGS, NULL},
	 { (char *)"Vec2_set", _wrap_Vec2_set, METH_VARARGS, NULL},
	 { (char *)"Vec2_add", _wrap_Vec2_add, METH_VARARGS, NULL},
	 { (char *)"Vec2_mul", _wrap_Vec2_mul, METH_VARARGS, NULL},
	 { (char *)"Vec2___iadd__", _wrap_Vec2___iadd__, METH_VARARGS, NULL},
	 { (char *)"Vec2___isub__", _wrap_Vec2___isub__, METH_VARARGS, NULL},
	 { (char *)"Vec2___imul__", _wrap_Vec2___imul__, METH_VARARGS, NULL},
	 { (char *)"Vec2___add__", _wrap_Vec2___add__, METH_VARARGS, NULL},
	 { (char *)"Vec2___sub__", _wrap_Vec2___sub__, METH_VARARGS, NULL},
	 { (char *)"Vec2___mul__", _wrap_Vec2___mul__, METH_VARARGS, NULL},
	 { (char *)"Vec2_dot", _wrap_Vec2_dot, METH_VARARGS, NULL},
	 { (char *)"Vec2_rad2xy", _wrap_Vec2_rad2xy, METH_VARARGS, NULL},
	 { (char *)"Vec2_xy2rad", _wrap_Vec2_xy2rad, METH_VARARGS, NULL},
	 { (char *)"Vec2_set_radial", _wrap_Vec2_set_radial, METH_VARARGS, NULL},
	 { (char *)"Vec2_length", _wrap_Vec2_length, METH_VARARGS, NULL},
	 { (char *)"Vec2_direction", _wrap_Vec2_direction, METH_VARARGS, NULL},
	 { (char *)"Vec2_set_length", _wrap_Vec2_set_length, METH_VARARGS, NULL},
	 { (char *)"Vec2_set_direction", _wrap_Vec2_set_direction, METH_VARARGS, NULL},
	 { (char *)"Vec2_unitvec", _wrap_Vec2_unitvec, METH_VARARGS, NULL},
	 { (char *)"Vec2_ortho", _wrap_Vec2_ortho, METH_VARARGS, NULL},
	 { (char *)"Vec2_orthounit", _wrap_Vec2_orthounit, METH_VARARGS, NULL},
	 { (char *)"Vec2_angle", _wrap_Vec2_angle, METH_VARARGS, NULL},
	 { (char *)"delete_Vec2", _wrap_delete_Vec2, METH_VARARGS, NULL},
	 { (char *)"Vec2_swigregister", Vec2_swigregister, METH_VARARGS, NULL},
	 { (char *)"Mat9_value_set", _wrap_Mat9_value_set, METH_VARARGS, NULL},
	 { (char *)"Mat9_value_get", _wrap_Mat9_value_get, METH_VARARGS, NULL},
	 { (char *)"new_Mat9", _wrap_new_Mat9, METH_VARARGS, NULL},
	 { (char *)"Mat9_get", _wrap_Mat9_get, METH_VARARGS, NULL},
	 { (char *)"Mat9_set", _wrap_Mat9_set, METH_VARARGS, NULL},
	 { (char *)"Mat9_mul", _wrap_Mat9_mul, METH_VARARGS, NULL},
	 { (char *)"Mat9_translate", _wrap_Mat9_translate, METH_VARARGS, NULL},
	 { (char *)"Mat9_scale", _wrap_Mat9_scale, METH_VARARGS, NULL},
	 { (char *)"Mat9_rotate", _wrap_Mat9_rotate, METH_VARARGS, NULL},
	 { (char *)"Mat9_transform", _wrap_Mat9_transform, METH_VARARGS, NULL},
	 { (char *)"Mat9_identity", _wrap_Mat9_identity, METH_VARARGS, NULL},
	 { (char *)"Mat9_inversed", _wrap_Mat9_inversed, METH_VARARGS, NULL},
	 { (char *)"delete_Mat9", _wrap_delete_Mat9, METH_VARARGS, NULL},
	 { (char *)"Mat9_swigregister", Mat9_swigregister, METH_VARARGS, NULL},
	 { (char *)"Rect_topleft_set", _wrap_Rect_topleft_set, METH_VARARGS, NULL},
	 { (char *)"Rect_topleft_get", _wrap_Rect_topleft_get, METH_VARARGS, NULL},
	 { (char *)"Rect_size_set", _wrap_Rect_size_set, METH_VARARGS, NULL},
	 { (char *)"Rect_size_get", _wrap_Rect_size_get, METH_VARARGS, NULL},
	 { (char *)"new_Rect", _wrap_new_Rect, METH_VARARGS, NULL},
	 { (char *)"Rect_contains", _wrap_Rect_contains, METH_VARARGS, NULL},
	 { (char *)"delete_Rect", _wrap_delete_Rect, METH_VARARGS, NULL},
	 { (char *)"Rect_swigregister", Rect_swigregister, METH_VARARGS, NULL},
	 { (char *)"FreeRect_points_set", _wrap_FreeRect_points_set, METH_VARARGS, NULL},
	 { (char *)"FreeRect_points_get", _wrap_FreeRect_points_get, METH_VARARGS, NULL},
	 { (char *)"new_FreeRect", _wrap_new_FreeRect, METH_VARARGS, NULL},
	 { (char *)"FreeRect_contains", _wrap_FreeRect_contains, METH_VARARGS, NULL},
	 { (char *)"delete_FreeRect", _wrap_delete_FreeRect, METH_VARARGS, NULL},
	 { (char *)"FreeRect_swigregister", FreeRect_swigregister, METH_VARARGS, NULL},
	 { (char *)"Color_red_set", _wrap_Color_red_set, METH_VARARGS, NULL},
	 { (char *)"Color_red_get", _wrap_Color_red_get, METH_VARARGS, NULL},
	 { (char *)"Color_green_set", _wrap_Color_green_set, METH_VARARGS, NULL},
	 { (char *)"Color_green_get", _wrap_Color_green_get, METH_VARARGS, NULL},
	 { (char *)"Color_blue_set", _wrap_Color_blue_set, METH_VARARGS, NULL},
	 { (char *)"Color_blue_get", _wrap_Color_blue_get, METH_VARARGS, NULL},
	 { (char *)"Color_alpha_set", _wrap_Color_alpha_set, METH_VARARGS, NULL},
	 { (char *)"Color_alpha_get", _wrap_Color_alpha_get, METH_VARARGS, NULL},
	 { (char *)"new_Color", _wrap_new_Color, METH_VARARGS, NULL},
	 { (char *)"Color_set", _wrap_Color_set, METH_VARARGS, NULL},
	 { (char *)"Color___mul__", _wrap_Color___mul__, METH_VARARGS, NULL},
	 { (char *)"Color___imul__", _wrap_Color___imul__, METH_VARARGS, NULL},
	 { (char *)"Color___add__", _wrap_Color___add__, METH_VARARGS, NULL},
	 { (char *)"Color___sub__", _wrap_Color___sub__, METH_VARARGS, NULL},
	 { (char *)"Color_Apply", _wrap_Color_Apply, METH_VARARGS, NULL},
	 { (char *)"delete_Color", _wrap_delete_Color, METH_VARARGS, NULL},
	 { (char *)"Color_swigregister", Color_swigregister, METH_VARARGS, NULL},
	 { (char *)"Ticker_now_set", _wrap_Ticker_now_set, METH_VARARGS, NULL},
	 { (char *)"Ticker_now_get", _wrap_Ticker_now_get, METH_VARARGS, NULL},
	 { (char *)"Ticker_prevReal_set", _wrap_Ticker_prevReal_set, METH_VARARGS, NULL},
	 { (char *)"Ticker_prevReal_get", _wrap_Ticker_prevReal_get, METH_VARARGS, NULL},
	 { (char *)"Ticker_nextReal_set", _wrap_Ticker_nextReal_set, METH_VARARGS, NULL},
	 { (char *)"Ticker_nextReal_get", _wrap_Ticker_nextReal_get, METH_VARARGS, NULL},
	 { (char *)"Ticker_realSpan_set", _wrap_Ticker_realSpan_set, METH_VARARGS, NULL},
	 { (char *)"Ticker_realSpan_get", _wrap_Ticker_realSpan_get, METH_VARARGS, NULL},
	 { (char *)"Ticker_delta_set", _wrap_Ticker_delta_set, METH_VARARGS, NULL},
	 { (char *)"Ticker_delta_get", _wrap_Ticker_delta_get, METH_VARARGS, NULL},
	 { (char *)"Ticker_sinceReal_set", _wrap_Ticker_sinceReal_set, METH_VARARGS, NULL},
	 { (char *)"Ticker_sinceReal_get", _wrap_Ticker_sinceReal_get, METH_VARARGS, NULL},
	 { (char *)"Ticker_realTick_set", _wrap_Ticker_realTick_set, METH_VARARGS, NULL},
	 { (char *)"Ticker_realTick_get", _wrap_Ticker_realTick_get, METH_VARARGS, NULL},
	 { (char *)"delete_Ticker", _wrap_delete_Ticker, METH_VARARGS, NULL},
	 { (char *)"Ticker_swigregister", Ticker_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Texture", _wrap_new_Texture, METH_VARARGS, NULL},
	 { (char *)"delete_Texture", _wrap_delete_Texture, METH_VARARGS, NULL},
	 { (char *)"Texture_WriteBytes", _wrap_Texture_WriteBytes, METH_VARARGS, NULL},
	 { (char *)"Texture_GetTexID", _wrap_Texture_GetTexID, METH_VARARGS, NULL},
	 { (char *)"Texture_swigregister", Texture_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Image", _wrap_new_Image, METH_VARARGS, NULL},
	 { (char *)"delete_Image", _wrap_delete_Image, METH_VARARGS, NULL},
	 { (char *)"Image_AddCollisionNode", _wrap_Image_AddCollisionNode, METH_VARARGS, NULL},
	 { (char *)"Image_ClearCollisionNodes", _wrap_Image_ClearCollisionNodes, METH_VARARGS, NULL},
	 { (char *)"Image_texid_set", _wrap_Image_texid_set, METH_VARARGS, NULL},
	 { (char *)"Image_texid_get", _wrap_Image_texid_get, METH_VARARGS, NULL},
	 { (char *)"Image_w_set", _wrap_Image_w_set, METH_VARARGS, NULL},
	 { (char *)"Image_w_get", _wrap_Image_w_get, METH_VARARGS, NULL},
	 { (char *)"Image_h_set", _wrap_Image_h_set, METH_VARARGS, NULL},
	 { (char *)"Image_h_get", _wrap_Image_h_get, METH_VARARGS, NULL},
	 { (char *)"Image_tx_set", _wrap_Image_tx_set, METH_VARARGS, NULL},
	 { (char *)"Image_tx_get", _wrap_Image_tx_get, METH_VARARGS, NULL},
	 { (char *)"Image_ty_set", _wrap_Image_ty_set, METH_VARARGS, NULL},
	 { (char *)"Image_ty_get", _wrap_Image_ty_get, METH_VARARGS, NULL},
	 { (char *)"Image_txx_set", _wrap_Image_txx_set, METH_VARARGS, NULL},
	 { (char *)"Image_txx_get", _wrap_Image_txx_get, METH_VARARGS, NULL},
	 { (char *)"Image_tyy_set", _wrap_Image_tyy_set, METH_VARARGS, NULL},
	 { (char *)"Image_tyy_get", _wrap_Image_tyy_get, METH_VARARGS, NULL},
	 { (char *)"Image_hotspot_set", _wrap_Image_hotspot_set, METH_VARARGS, NULL},
	 { (char *)"Image_hotspot_get", _wrap_Image_hotspot_get, METH_VARARGS, NULL},
	 { (char *)"Image_swigregister", Image_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GridImage", _wrap_new_GridImage, METH_VARARGS, NULL},
	 { (char *)"delete_GridImage", _wrap_delete_GridImage, METH_VARARGS, NULL},
	 { (char *)"GridImage_AppendImage", _wrap_GridImage_AppendImage, METH_VARARGS, NULL},
	 { (char *)"GridImage_SetSize", _wrap_GridImage_SetSize, METH_VARARGS, NULL},
	 { (char *)"GridImage_swigregister", GridImage_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ActionCallbacks", _wrap_new_ActionCallbacks, METH_VARARGS, NULL},
	 { (char *)"delete_ActionCallbacks", _wrap_delete_ActionCallbacks, METH_VARARGS, NULL},
	 { (char *)"ActionCallbacks_End", _wrap_ActionCallbacks_End, METH_VARARGS, NULL},
	 { (char *)"ActionCallbacks_Wake", _wrap_ActionCallbacks_Wake, METH_VARARGS, NULL},
	 { (char *)"disown_ActionCallbacks", _wrap_disown_ActionCallbacks, METH_VARARGS, NULL},
	 { (char *)"ActionCallbacks_swigregister", ActionCallbacks_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Action", _wrap_new_Action, METH_VARARGS, NULL},
	 { (char *)"delete_Action", _wrap_delete_Action, METH_VARARGS, NULL},
	 { (char *)"Action_Setup", _wrap_Action_Setup, METH_VARARGS, NULL},
	 { (char *)"Action_SetTimeLimit", _wrap_Action_SetTimeLimit, METH_VARARGS, NULL},
	 { (char *)"Action_Start", _wrap_Action_Start, METH_VARARGS, NULL},
	 { (char *)"Action_End", _wrap_Action_End, METH_VARARGS, NULL},
	 { (char *)"Action_Tick", _wrap_Action_Tick, METH_VARARGS, NULL},
	 { (char *)"Action_swigregister", Action_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Physics", _wrap_new_Physics, METH_VARARGS, NULL},
	 { (char *)"delete_Physics", _wrap_delete_Physics, METH_VARARGS, NULL},
	 { (char *)"Physics_velocity_set", _wrap_Physics_velocity_set, METH_VARARGS, NULL},
	 { (char *)"Physics_velocity_get", _wrap_Physics_velocity_get, METH_VARARGS, NULL},
	 { (char *)"Physics_acceleration_set", _wrap_Physics_acceleration_set, METH_VARARGS, NULL},
	 { (char *)"Physics_acceleration_get", _wrap_Physics_acceleration_get, METH_VARARGS, NULL},
	 { (char *)"Physics_friction_set", _wrap_Physics_friction_set, METH_VARARGS, NULL},
	 { (char *)"Physics_friction_get", _wrap_Physics_friction_get, METH_VARARGS, NULL},
	 { (char *)"Physics_rotation_set", _wrap_Physics_rotation_set, METH_VARARGS, NULL},
	 { (char *)"Physics_rotation_get", _wrap_Physics_rotation_get, METH_VARARGS, NULL},
	 { (char *)"Physics_SetRadialVelocity", _wrap_Physics_SetRadialVelocity, METH_VARARGS, NULL},
	 { (char *)"Physics_SetVelocityAngle", _wrap_Physics_SetVelocityAngle, METH_VARARGS, NULL},
	 { (char *)"Physics_SetVelocitySpeed", _wrap_Physics_SetVelocitySpeed, METH_VARARGS, NULL},
	 { (char *)"Physics_GetRadialVelocity", _wrap_Physics_GetRadialVelocity, METH_VARARGS, NULL},
	 { (char *)"Physics_swigregister", Physics_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IntervalAction", _wrap_new_IntervalAction, METH_VARARGS, NULL},
	 { (char *)"IntervalAction_SetInterval", _wrap_IntervalAction_SetInterval, METH_VARARGS, NULL},
	 { (char *)"IntervalAction_SetSmoothing", _wrap_IntervalAction_SetSmoothing, METH_VARARGS, NULL},
	 { (char *)"IntervalAction_interval_time_set", _wrap_IntervalAction_interval_time_set, METH_VARARGS, NULL},
	 { (char *)"IntervalAction_interval_time_get", _wrap_IntervalAction_interval_time_get, METH_VARARGS, NULL},
	 { (char *)"IntervalAction_repeat_mode_set", _wrap_IntervalAction_repeat_mode_set, METH_VARARGS, NULL},
	 { (char *)"IntervalAction_repeat_mode_get", _wrap_IntervalAction_repeat_mode_get, METH_VARARGS, NULL},
	 { (char *)"delete_IntervalAction", _wrap_delete_IntervalAction, METH_VARARGS, NULL},
	 { (char *)"IntervalAction_swigregister", IntervalAction_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MoveDelta", _wrap_new_MoveDelta, METH_VARARGS, NULL},
	 { (char *)"delete_MoveDelta", _wrap_delete_MoveDelta, METH_VARARGS, NULL},
	 { (char *)"MoveDelta_swigregister", MoveDelta_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MoveTo", _wrap_new_MoveTo, METH_VARARGS, NULL},
	 { (char *)"delete_MoveTo", _wrap_delete_MoveTo, METH_VARARGS, NULL},
	 { (char *)"MoveTo_swigregister", MoveTo_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Move", _wrap_new_Move, METH_VARARGS, NULL},
	 { (char *)"delete_Move", _wrap_delete_Move, METH_VARARGS, NULL},
	 { (char *)"Move_swigregister", Move_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Delay", _wrap_new_Delay, METH_VARARGS, NULL},
	 { (char *)"delete_Delay", _wrap_delete_Delay, METH_VARARGS, NULL},
	 { (char *)"Delay_swigregister", Delay_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AlphaFade", _wrap_new_AlphaFade, METH_VARARGS, NULL},
	 { (char *)"AlphaFade_Start", _wrap_AlphaFade_Start, METH_VARARGS, NULL},
	 { (char *)"delete_AlphaFade", _wrap_delete_AlphaFade, METH_VARARGS, NULL},
	 { (char *)"AlphaFade_swigregister", AlphaFade_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ColorFade", _wrap_new_ColorFade, METH_VARARGS, NULL},
	 { (char *)"ColorFade_Start", _wrap_ColorFade_Start, METH_VARARGS, NULL},
	 { (char *)"delete_ColorFade", _wrap_delete_ColorFade, METH_VARARGS, NULL},
	 { (char *)"ColorFade_swigregister", ColorFade_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RotateDelta", _wrap_new_RotateDelta, METH_VARARGS, NULL},
	 { (char *)"RotateDelta_Start", _wrap_RotateDelta_Start, METH_VARARGS, NULL},
	 { (char *)"delete_RotateDelta", _wrap_delete_RotateDelta, METH_VARARGS, NULL},
	 { (char *)"RotateDelta_swigregister", RotateDelta_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Rotate", _wrap_new_Rotate, METH_VARARGS, NULL},
	 { (char *)"Rotate_Start", _wrap_Rotate_Start, METH_VARARGS, NULL},
	 { (char *)"delete_Rotate", _wrap_delete_Rotate, METH_VARARGS, NULL},
	 { (char *)"Rotate_swigregister", Rotate_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Scale", _wrap_new_Scale, METH_VARARGS, NULL},
	 { (char *)"Scale_Tick", _wrap_Scale_Tick, METH_VARARGS, NULL},
	 { (char *)"delete_Scale", _wrap_delete_Scale, METH_VARARGS, NULL},
	 { (char *)"Scale_swigregister", Scale_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScaleTo", _wrap_new_ScaleTo, METH_VARARGS, NULL},
	 { (char *)"ScaleTo_Start", _wrap_ScaleTo_Start, METH_VARARGS, NULL},
	 { (char *)"delete_ScaleTo", _wrap_delete_ScaleTo, METH_VARARGS, NULL},
	 { (char *)"ScaleTo_swigregister", ScaleTo_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TickFunc", _wrap_new_TickFunc, METH_VARARGS, NULL},
	 { (char *)"TickFunc_Tick", _wrap_TickFunc_Tick, METH_VARARGS, NULL},
	 { (char *)"delete_TickFunc", _wrap_delete_TickFunc, METH_VARARGS, NULL},
	 { (char *)"TickFunc_swigregister", TickFunc_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FollowPath", _wrap_new_FollowPath, METH_VARARGS, NULL},
	 { (char *)"FollowPath_Start", _wrap_FollowPath_Start, METH_VARARGS, NULL},
	 { (char *)"FollowPath_Tick", _wrap_FollowPath_Tick, METH_VARARGS, NULL},
	 { (char *)"FollowPath_SetPoint", _wrap_FollowPath_SetPoint, METH_VARARGS, NULL},
	 { (char *)"FollowPath_SetSpeed", _wrap_FollowPath_SetSpeed, METH_VARARGS, NULL},
	 { (char *)"delete_FollowPath", _wrap_delete_FollowPath, METH_VARARGS, NULL},
	 { (char *)"FollowPath_swigregister", FollowPath_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KeepFacing", _wrap_new_KeepFacing, METH_VARARGS, NULL},
	 { (char *)"KeepFacing_Tick", _wrap_KeepFacing_Tick, METH_VARARGS, NULL},
	 { (char *)"delete_KeepFacing", _wrap_delete_KeepFacing, METH_VARARGS, NULL},
	 { (char *)"KeepFacing_swigregister", KeepFacing_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Animate", _wrap_new_Animate, METH_VARARGS, NULL},
	 { (char *)"Animate_SetDelay", _wrap_Animate_SetDelay, METH_VARARGS, NULL},
	 { (char *)"Animate_Start", _wrap_Animate_Start, METH_VARARGS, NULL},
	 { (char *)"Animate_Tick", _wrap_Animate_Tick, METH_VARARGS, NULL},
	 { (char *)"delete_Animate", _wrap_delete_Animate, METH_VARARGS, NULL},
	 { (char *)"Animate_swigregister", Animate_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OrbitAround", _wrap_new_OrbitAround, METH_VARARGS, NULL},
	 { (char *)"delete_OrbitAround", _wrap_delete_OrbitAround, METH_VARARGS, NULL},
	 { (char *)"OrbitAround_swigregister", OrbitAround_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Node", _wrap_new_Node, METH_VARARGS, NULL},
	 { (char *)"delete_Node", _wrap_delete_Node, METH_VARARGS, NULL},
	 { (char *)"Node_ReUse", _wrap_Node_ReUse, METH_VARARGS, NULL},
	 { (char *)"Node_Place", _wrap_Node_Place, METH_VARARGS, NULL},
	 { (char *)"Node_GetLayer", _wrap_Node_GetLayer, METH_VARARGS, NULL},
	 { (char *)"Node_GetRootLayer", _wrap_Node_GetRootLayer, METH_VARARGS, NULL},
	 { (char *)"Node_AttachTo", _wrap_Node_AttachTo, METH_VARARGS, NULL},
	 { (char *)"Node_Detach", _wrap_Node_Detach, METH_VARARGS, NULL},
	 { (char *)"Node_OnAttach", _wrap_Node_OnAttach, METH_VARARGS, NULL},
	 { (char *)"Node_OnDetach", _wrap_Node_OnDetach, METH_VARARGS, NULL},
	 { (char *)"Node_Traverse", _wrap_Node_Traverse, METH_VARARGS, NULL},
	 { (char *)"Node_TraverseFree", _wrap_Node_TraverseFree, METH_VARARGS, NULL},
	 { (char *)"Node_Enter", _wrap_Node_Enter, METH_VARARGS, NULL},
	 { (char *)"Node_EnterFree", _wrap_Node_EnterFree, METH_VARARGS, NULL},
	 { (char *)"Node_Pick", _wrap_Node_Pick, METH_VARARGS, NULL},
	 { (char *)"Node_PickSelf", _wrap_Node_PickSelf, METH_VARARGS, NULL},
	 { (char *)"Node_GetColor", _wrap_Node_GetColor, METH_VARARGS, NULL},
	 { (char *)"Node_SetColor", _wrap_Node_SetColor, METH_VARARGS, NULL},
	 { (char *)"Node_SetColorInheritance", _wrap_Node_SetColorInheritance, METH_VARARGS, NULL},
	 { (char *)"Node_GetColorInheritance", _wrap_Node_GetColorInheritance, METH_VARARGS, NULL},
	 { (char *)"Node_ToThisFrame", _wrap_Node_ToThisFrame, METH_VARARGS, NULL},
	 { (char *)"Node_ToParentFrame", _wrap_Node_ToParentFrame, METH_VARARGS, NULL},
	 { (char *)"Node_FromThisFrame", _wrap_Node_FromThisFrame, METH_VARARGS, NULL},
	 { (char *)"Node_FromParentFrame", _wrap_Node_FromParentFrame, METH_VARARGS, NULL},
	 { (char *)"Node_GetPos", _wrap_Node_GetPos, METH_VARARGS, NULL},
	 { (char *)"Node_SetPos", _wrap_Node_SetPos, METH_VARARGS, NULL},
	 { (char *)"Node_AddPos", _wrap_Node_AddPos, METH_VARARGS, NULL},
	 { (char *)"Node_GetWorldPos", _wrap_Node_GetWorldPos, METH_VARARGS, NULL},
	 { (char *)"Node_GetPosDelta", _wrap_Node_GetPosDelta, METH_VARARGS, NULL},
	 { (char *)"Node_GetWorldVelocity", _wrap_Node_GetWorldVelocity, METH_VARARGS, NULL},
	 { (char *)"Node_GetScale", _wrap_Node_GetScale, METH_VARARGS, NULL},
	 { (char *)"Node_SetScale", _wrap_Node_SetScale, METH_VARARGS, NULL},
	 { (char *)"Node_GetOffset", _wrap_Node_GetOffset, METH_VARARGS, NULL},
	 { (char *)"Node_GetRotation", _wrap_Node_GetRotation, METH_VARARGS, NULL},
	 { (char *)"Node_SetRotation", _wrap_Node_SetRotation, METH_VARARGS, NULL},
	 { (char *)"Node_physics_set", _wrap_Node_physics_set, METH_VARARGS, NULL},
	 { (char *)"Node_physics_get", _wrap_Node_physics_get, METH_VARARGS, NULL},
	 { (char *)"Node_swigregister", Node_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Particle", _wrap_new_Particle, METH_VARARGS, NULL},
	 { (char *)"delete_Particle", _wrap_delete_Particle, METH_VARARGS, NULL},
	 { (char *)"Particle_pos_set", _wrap_Particle_pos_set, METH_VARARGS, NULL},
	 { (char *)"Particle_pos_get", _wrap_Particle_pos_get, METH_VARARGS, NULL},
	 { (char *)"Particle_velocity_set", _wrap_Particle_velocity_set, METH_VARARGS, NULL},
	 { (char *)"Particle_velocity_get", _wrap_Particle_velocity_get, METH_VARARGS, NULL},
	 { (char *)"Particle_acceleration_set", _wrap_Particle_acceleration_set, METH_VARARGS, NULL},
	 { (char *)"Particle_acceleration_get", _wrap_Particle_acceleration_get, METH_VARARGS, NULL},
	 { (char *)"Particle_friction_set", _wrap_Particle_friction_set, METH_VARARGS, NULL},
	 { (char *)"Particle_friction_get", _wrap_Particle_friction_get, METH_VARARGS, NULL},
	 { (char *)"Particle_rotation_set", _wrap_Particle_rotation_set, METH_VARARGS, NULL},
	 { (char *)"Particle_rotation_get", _wrap_Particle_rotation_get, METH_VARARGS, NULL},
	 { (char *)"Particle_rotation_delta_set", _wrap_Particle_rotation_delta_set, METH_VARARGS, NULL},
	 { (char *)"Particle_rotation_delta_get", _wrap_Particle_rotation_delta_get, METH_VARARGS, NULL},
	 { (char *)"Particle_scale_set", _wrap_Particle_scale_set, METH_VARARGS, NULL},
	 { (char *)"Particle_scale_get", _wrap_Particle_scale_get, METH_VARARGS, NULL},
	 { (char *)"Particle_scale_delta_set", _wrap_Particle_scale_delta_set, METH_VARARGS, NULL},
	 { (char *)"Particle_scale_delta_get", _wrap_Particle_scale_delta_get, METH_VARARGS, NULL},
	 { (char *)"Particle_color_set", _wrap_Particle_color_set, METH_VARARGS, NULL},
	 { (char *)"Particle_color_get", _wrap_Particle_color_get, METH_VARARGS, NULL},
	 { (char *)"Particle_color_delta_set", _wrap_Particle_color_delta_set, METH_VARARGS, NULL},
	 { (char *)"Particle_color_delta_get", _wrap_Particle_color_delta_get, METH_VARARGS, NULL},
	 { (char *)"Particle_life_set", _wrap_Particle_life_set, METH_VARARGS, NULL},
	 { (char *)"Particle_life_get", _wrap_Particle_life_get, METH_VARARGS, NULL},
	 { (char *)"Particle_fade_time_set", _wrap_Particle_fade_time_set, METH_VARARGS, NULL},
	 { (char *)"Particle_fade_time_get", _wrap_Particle_fade_time_get, METH_VARARGS, NULL},
	 { (char *)"Particle_fade_in_set", _wrap_Particle_fade_in_set, METH_VARARGS, NULL},
	 { (char *)"Particle_fade_in_get", _wrap_Particle_fade_in_get, METH_VARARGS, NULL},
	 { (char *)"Particle_image_set", _wrap_Particle_image_set, METH_VARARGS, NULL},
	 { (char *)"Particle_image_get", _wrap_Particle_image_get, METH_VARARGS, NULL},
	 { (char *)"Particle_swigregister", Particle_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ParticleSystem", _wrap_new_ParticleSystem, METH_VARARGS, NULL},
	 { (char *)"delete_ParticleSystem", _wrap_delete_ParticleSystem, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_AddParticle", _wrap_ParticleSystem_AddParticle, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_AddMutator", _wrap_ParticleSystem_AddMutator, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_swigregister", ParticleSystem_swigregister, METH_VARARGS, NULL},
	 { (char *)"EmitterParameter_Evaluate", _wrap_EmitterParameter_Evaluate, METH_VARARGS, NULL},
	 { (char *)"delete_EmitterParameter", _wrap_delete_EmitterParameter, METH_VARARGS, NULL},
	 { (char *)"EmitterParameter_swigregister", EmitterParameter_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ParticleEmitter", _wrap_new_ParticleEmitter, METH_VARARGS, NULL},
	 { (char *)"delete_ParticleEmitter", _wrap_delete_ParticleEmitter, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_Delete", _wrap_ParticleEmitter_Delete, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_AttachTo", _wrap_ParticleEmitter_AttachTo, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_SetPosition", _wrap_ParticleEmitter_SetPosition, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_SetSystem", _wrap_ParticleEmitter_SetSystem, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_InitFrom", _wrap_ParticleEmitter_InitFrom, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_EmitSingle", _wrap_ParticleEmitter_EmitSingle, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_EmitPulse", _wrap_ParticleEmitter_EmitPulse, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_Start", _wrap_ParticleEmitter_Start, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_image_set", _wrap_ParticleEmitter_image_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_image_get", _wrap_ParticleEmitter_image_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_direction_set", _wrap_ParticleEmitter_direction_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_direction_get", _wrap_ParticleEmitter_direction_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_angle_set", _wrap_ParticleEmitter_angle_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_angle_get", _wrap_ParticleEmitter_angle_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_speed_set", _wrap_ParticleEmitter_speed_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_speed_get", _wrap_ParticleEmitter_speed_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_acceleration_x_set", _wrap_ParticleEmitter_acceleration_x_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_acceleration_x_get", _wrap_ParticleEmitter_acceleration_x_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_acceleration_y_set", _wrap_ParticleEmitter_acceleration_y_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_acceleration_y_get", _wrap_ParticleEmitter_acceleration_y_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_friction_set", _wrap_ParticleEmitter_friction_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_friction_get", _wrap_ParticleEmitter_friction_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_rotation_set", _wrap_ParticleEmitter_rotation_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_rotation_get", _wrap_ParticleEmitter_rotation_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_rotation_delta_set", _wrap_ParticleEmitter_rotation_delta_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_rotation_delta_get", _wrap_ParticleEmitter_rotation_delta_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_offset_x_set", _wrap_ParticleEmitter_offset_x_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_offset_x_get", _wrap_ParticleEmitter_offset_x_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_offset_y_set", _wrap_ParticleEmitter_offset_y_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_offset_y_get", _wrap_ParticleEmitter_offset_y_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_advance_set", _wrap_ParticleEmitter_advance_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_advance_get", _wrap_ParticleEmitter_advance_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_scale_set", _wrap_ParticleEmitter_scale_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_scale_get", _wrap_ParticleEmitter_scale_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_scale_delta_set", _wrap_ParticleEmitter_scale_delta_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_scale_delta_get", _wrap_ParticleEmitter_scale_delta_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_color_red_set", _wrap_ParticleEmitter_color_red_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_color_red_get", _wrap_ParticleEmitter_color_red_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_color_green_set", _wrap_ParticleEmitter_color_green_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_color_green_get", _wrap_ParticleEmitter_color_green_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_color_blue_set", _wrap_ParticleEmitter_color_blue_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_color_blue_get", _wrap_ParticleEmitter_color_blue_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_color_alpha_set", _wrap_ParticleEmitter_color_alpha_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_color_alpha_get", _wrap_ParticleEmitter_color_alpha_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_color_delta_red_set", _wrap_ParticleEmitter_color_delta_red_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_color_delta_red_get", _wrap_ParticleEmitter_color_delta_red_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_color_delta_green_set", _wrap_ParticleEmitter_color_delta_green_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_color_delta_green_get", _wrap_ParticleEmitter_color_delta_green_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_color_delta_blue_set", _wrap_ParticleEmitter_color_delta_blue_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_color_delta_blue_get", _wrap_ParticleEmitter_color_delta_blue_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_color_delta_alpha_set", _wrap_ParticleEmitter_color_delta_alpha_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_color_delta_alpha_get", _wrap_ParticleEmitter_color_delta_alpha_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_color_target_red_set", _wrap_ParticleEmitter_color_target_red_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_color_target_red_get", _wrap_ParticleEmitter_color_target_red_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_color_target_green_set", _wrap_ParticleEmitter_color_target_green_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_color_target_green_get", _wrap_ParticleEmitter_color_target_green_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_color_target_blue_set", _wrap_ParticleEmitter_color_target_blue_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_color_target_blue_get", _wrap_ParticleEmitter_color_target_blue_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_color_target_alpha_set", _wrap_ParticleEmitter_color_target_alpha_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_color_target_alpha_get", _wrap_ParticleEmitter_color_target_alpha_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_life_set", _wrap_ParticleEmitter_life_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_life_get", _wrap_ParticleEmitter_life_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_fade_time_set", _wrap_ParticleEmitter_fade_time_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_fade_time_get", _wrap_ParticleEmitter_fade_time_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_fade_delay_set", _wrap_ParticleEmitter_fade_delay_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_fade_delay_get", _wrap_ParticleEmitter_fade_delay_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_fade_in_set", _wrap_ParticleEmitter_fade_in_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_fade_in_get", _wrap_ParticleEmitter_fade_in_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_num_emits_set", _wrap_ParticleEmitter_num_emits_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_num_emits_get", _wrap_ParticleEmitter_num_emits_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_num_particles_set", _wrap_ParticleEmitter_num_particles_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_num_particles_get", _wrap_ParticleEmitter_num_particles_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_emit_delay_set", _wrap_ParticleEmitter_emit_delay_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_emit_delay_get", _wrap_ParticleEmitter_emit_delay_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_emits_per_sec_set", _wrap_ParticleEmitter_emits_per_sec_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_emits_per_sec_get", _wrap_ParticleEmitter_emits_per_sec_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_duration_set", _wrap_ParticleEmitter_duration_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_duration_get", _wrap_ParticleEmitter_duration_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_node_velocity_set", _wrap_ParticleEmitter_node_velocity_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_node_velocity_get", _wrap_ParticleEmitter_node_velocity_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_align_to_direction_set", _wrap_ParticleEmitter_align_to_direction_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_align_to_direction_get", _wrap_ParticleEmitter_align_to_direction_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_align_to_node_set", _wrap_ParticleEmitter_align_to_node_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_align_to_node_get", _wrap_ParticleEmitter_align_to_node_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_rotate_to_node_set", _wrap_ParticleEmitter_rotate_to_node_set, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_rotate_to_node_get", _wrap_ParticleEmitter_rotate_to_node_get, METH_VARARGS, NULL},
	 { (char *)"ParticleEmitter_swigregister", ParticleEmitter_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ConstParameter", _wrap_new_ConstParameter, METH_VARARGS, NULL},
	 { (char *)"ConstParameter_Evaluate", _wrap_ConstParameter_Evaluate, METH_VARARGS, NULL},
	 { (char *)"delete_ConstParameter", _wrap_delete_ConstParameter, METH_VARARGS, NULL},
	 { (char *)"ConstParameter_swigregister", ConstParameter_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RandomParameter", _wrap_new_RandomParameter, METH_VARARGS, NULL},
	 { (char *)"RandomParameter_Evaluate", _wrap_RandomParameter_Evaluate, METH_VARARGS, NULL},
	 { (char *)"delete_RandomParameter", _wrap_delete_RandomParameter, METH_VARARGS, NULL},
	 { (char *)"RandomParameter_swigregister", RandomParameter_swigregister, METH_VARARGS, NULL},
	 { (char *)"LinearParameter_Evaluate", _wrap_LinearParameter_Evaluate, METH_VARARGS, NULL},
	 { (char *)"delete_LinearParameter", _wrap_delete_LinearParameter, METH_VARARGS, NULL},
	 { (char *)"LinearParameter_swigregister", LinearParameter_swigregister, METH_VARARGS, NULL},
	 { (char *)"SineParameter_Evaluate", _wrap_SineParameter_Evaluate, METH_VARARGS, NULL},
	 { (char *)"delete_SineParameter", _wrap_delete_SineParameter, METH_VARARGS, NULL},
	 { (char *)"SineParameter_swigregister", SineParameter_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SceneCallbacks", _wrap_new_SceneCallbacks, METH_VARARGS, NULL},
	 { (char *)"delete_SceneCallbacks", _wrap_delete_SceneCallbacks, METH_VARARGS, NULL},
	 { (char *)"SceneCallbacks_OnCollision", _wrap_SceneCallbacks_OnCollision, METH_VARARGS, NULL},
	 { (char *)"disown_SceneCallbacks", _wrap_disown_SceneCallbacks, METH_VARARGS, NULL},
	 { (char *)"SceneCallbacks_swigregister", SceneCallbacks_swigregister, METH_VARARGS, NULL},
	 { (char *)"Camera_ScreenToWorld", _wrap_Camera_ScreenToWorld, METH_VARARGS, NULL},
	 { (char *)"Camera_SetAlign", _wrap_Camera_SetAlign, METH_VARARGS, NULL},
	 { (char *)"Camera_GetAlign", _wrap_Camera_GetAlign, METH_VARARGS, NULL},
	 { (char *)"delete_Camera", _wrap_delete_Camera, METH_VARARGS, NULL},
	 { (char *)"Camera_swigregister", Camera_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Light", _wrap_new_Light, METH_VARARGS, NULL},
	 { (char *)"Light_color_set", _wrap_Light_color_set, METH_VARARGS, NULL},
	 { (char *)"Light_color_get", _wrap_Light_color_get, METH_VARARGS, NULL},
	 { (char *)"Light_intensity_set", _wrap_Light_intensity_set, METH_VARARGS, NULL},
	 { (char *)"Light_intensity_get", _wrap_Light_intensity_get, METH_VARARGS, NULL},
	 { (char *)"Light_cutoff_set", _wrap_Light_cutoff_set, METH_VARARGS, NULL},
	 { (char *)"Light_cutoff_get", _wrap_Light_cutoff_get, METH_VARARGS, NULL},
	 { (char *)"Light_pos_set", _wrap_Light_pos_set, METH_VARARGS, NULL},
	 { (char *)"Light_pos_get", _wrap_Light_pos_get, METH_VARARGS, NULL},
	 { (char *)"Light_node_set", _wrap_Light_node_set, METH_VARARGS, NULL},
	 { (char *)"Light_node_get", _wrap_Light_node_get, METH_VARARGS, NULL},
	 { (char *)"Light_worldpos_set", _wrap_Light_worldpos_set, METH_VARARGS, NULL},
	 { (char *)"Light_worldpos_get", _wrap_Light_worldpos_get, METH_VARARGS, NULL},
	 { (char *)"Light_pos_update_tick_set", _wrap_Light_pos_update_tick_set, METH_VARARGS, NULL},
	 { (char *)"Light_pos_update_tick_get", _wrap_Light_pos_update_tick_get, METH_VARARGS, NULL},
	 { (char *)"delete_Light", _wrap_delete_Light, METH_VARARGS, NULL},
	 { (char *)"Light_swigregister", Light_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RenderingPass", _wrap_new_RenderingPass, METH_VARARGS, NULL},
	 { (char *)"RenderingPass_SetSrcFunc", _wrap_RenderingPass_SetSrcFunc, METH_VARARGS, NULL},
	 { (char *)"RenderingPass_SetDstFunc", _wrap_RenderingPass_SetDstFunc, METH_VARARGS, NULL},
	 { (char *)"delete_RenderingPass", _wrap_delete_RenderingPass, METH_VARARGS, NULL},
	 { (char *)"RenderingPass_swigregister", RenderingPass_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Layer", _wrap_new_Layer, METH_VARARGS, NULL},
	 { (char *)"delete_Layer", _wrap_delete_Layer, METH_VARARGS, NULL},
	 { (char *)"Layer_GetName", _wrap_Layer_GetName, METH_VARARGS, NULL},
	 { (char *)"Layer_Render", _wrap_Layer_Render, METH_VARARGS, NULL},
	 { (char *)"Layer_SetFreeForm", _wrap_Layer_SetFreeForm, METH_VARARGS, NULL},
	 { (char *)"Layer_AddNode", _wrap_Layer_AddNode, METH_VARARGS, NULL},
	 { (char *)"Layer_RemoveNode", _wrap_Layer_RemoveNode, METH_VARARGS, NULL},
	 { (char *)"Layer_Pick", _wrap_Layer_Pick, METH_VARARGS, NULL},
	 { (char *)"Layer_AddRenderingPass", _wrap_Layer_AddRenderingPass, METH_VARARGS, NULL},
	 { (char *)"Layer_ResetRenderingPasses", _wrap_Layer_ResetRenderingPasses, METH_VARARGS, NULL},
	 { (char *)"Layer_SendNodeToTop", _wrap_Layer_SendNodeToTop, METH_VARARGS, NULL},
	 { (char *)"Layer_SendNodeToBottom", _wrap_Layer_SendNodeToBottom, METH_VARARGS, NULL},
	 { (char *)"Layer_GetNodes", _wrap_Layer_GetNodes, METH_VARARGS, NULL},
	 { (char *)"Layer_SetNodes", _wrap_Layer_SetNodes, METH_VARARGS, NULL},
	 { (char *)"Layer_camera_offset_set", _wrap_Layer_camera_offset_set, METH_VARARGS, NULL},
	 { (char *)"Layer_camera_offset_get", _wrap_Layer_camera_offset_get, METH_VARARGS, NULL},
	 { (char *)"Layer_camera_rotation_set", _wrap_Layer_camera_rotation_set, METH_VARARGS, NULL},
	 { (char *)"Layer_camera_rotation_get", _wrap_Layer_camera_rotation_get, METH_VARARGS, NULL},
	 { (char *)"Layer_camera_zoom_set", _wrap_Layer_camera_zoom_set, METH_VARARGS, NULL},
	 { (char *)"Layer_camera_zoom_get", _wrap_Layer_camera_zoom_get, METH_VARARGS, NULL},
	 { (char *)"Layer_ignore_camera_set", _wrap_Layer_ignore_camera_set, METH_VARARGS, NULL},
	 { (char *)"Layer_ignore_camera_get", _wrap_Layer_ignore_camera_get, METH_VARARGS, NULL},
	 { (char *)"Layer_swigregister", Layer_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Scene", _wrap_new_Scene, METH_VARARGS, NULL},
	 { (char *)"delete_Scene", _wrap_delete_Scene, METH_VARARGS, NULL},
	 { (char *)"Scene_SetCallbacks", _wrap_Scene_SetCallbacks, METH_VARARGS, NULL},
	 { (char *)"Scene_GetCallbacks", _wrap_Scene_GetCallbacks, METH_VARARGS, NULL},
	 { (char *)"Scene_GetGroup", _wrap_Scene_GetGroup, METH_VARARGS, NULL},
	 { (char *)"Scene_CreateGroup", _wrap_Scene_CreateGroup, METH_VARARGS, NULL},
	 { (char *)"Scene_EnableCollisions", _wrap_Scene_EnableCollisions, METH_VARARGS, NULL},
	 { (char *)"Scene_Tick", _wrap_Scene_Tick, METH_VARARGS, NULL},
	 { (char *)"Scene_RealTick", _wrap_Scene_RealTick, METH_VARARGS, NULL},
	 { (char *)"Scene_Render", _wrap_Scene_Render, METH_VARARGS, NULL},
	 { (char *)"Scene_AddLayer", _wrap_Scene_AddLayer, METH_VARARGS, NULL},
	 { (char *)"Scene_DeleteLayer", _wrap_Scene_DeleteLayer, METH_VARARGS, NULL},
	 { (char *)"Scene_GetLayers", _wrap_Scene_GetLayers, METH_VARARGS, NULL},
	 { (char *)"Scene_SetLayers", _wrap_Scene_SetLayers, METH_VARARGS, NULL},
	 { (char *)"Scene_GetLayer", _wrap_Scene_GetLayer, METH_VARARGS, NULL},
	 { (char *)"Scene_GetCamera", _wrap_Scene_GetCamera, METH_VARARGS, NULL},
	 { (char *)"Scene_AddLight", _wrap_Scene_AddLight, METH_VARARGS, NULL},
	 { (char *)"Scene_RemoveLight", _wrap_Scene_RemoveLight, METH_VARARGS, NULL},
	 { (char *)"Scene_SetAmbientLight", _wrap_Scene_SetAmbientLight, METH_VARARGS, NULL},
	 { (char *)"Scene_swigregister", Scene_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SpriteGroup", _wrap_new_SpriteGroup, METH_VARARGS, NULL},
	 { (char *)"delete_SpriteGroup", _wrap_delete_SpriteGroup, METH_VARARGS, NULL},
	 { (char *)"SpriteGroup_AddMutator", _wrap_SpriteGroup_AddMutator, METH_VARARGS, NULL},
	 { (char *)"SpriteGroup_Pick", _wrap_SpriteGroup_Pick, METH_VARARGS, NULL},
	 { (char *)"SpriteGroup_GetSize", _wrap_SpriteGroup_GetSize, METH_VARARGS, NULL},
	 { (char *)"SpriteGroup_ListSprites", _wrap_SpriteGroup_ListSprites, METH_VARARGS, NULL},
	 { (char *)"SpriteGroup_swigregister", SpriteGroup_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Sprite", _wrap_new_Sprite, METH_VARARGS, NULL},
	 { (char *)"delete_Sprite", _wrap_delete_Sprite, METH_VARARGS, NULL},
	 { (char *)"Sprite_ReUse", _wrap_Sprite_ReUse, METH_VARARGS, NULL},
	 { (char *)"Sprite_JoinGroup", _wrap_Sprite_JoinGroup, METH_VARARGS, NULL},
	 { (char *)"Sprite_LeaveGroup", _wrap_Sprite_LeaveGroup, METH_VARARGS, NULL},
	 { (char *)"Sprite_SetImage", _wrap_Sprite_SetImage, METH_VARARGS, NULL},
	 { (char *)"Sprite_EnableLighting", _wrap_Sprite_EnableLighting, METH_VARARGS, NULL},
	 { (char *)"Sprite_PickSelf", _wrap_Sprite_PickSelf, METH_VARARGS, NULL},
	 { (char *)"Sprite_swigregister", Sprite_swigregister, METH_VARARGS, NULL},
	 { (char *)"Area_contains", _wrap_Area_contains, METH_VARARGS, NULL},
	 { (char *)"delete_Area", _wrap_delete_Area, METH_VARARGS, NULL},
	 { (char *)"Area_swigregister", Area_swigregister, METH_VARARGS, NULL},
	 { (char *)"RectArea_x_set", _wrap_RectArea_x_set, METH_VARARGS, NULL},
	 { (char *)"RectArea_x_get", _wrap_RectArea_x_get, METH_VARARGS, NULL},
	 { (char *)"RectArea_y_set", _wrap_RectArea_y_set, METH_VARARGS, NULL},
	 { (char *)"RectArea_y_get", _wrap_RectArea_y_get, METH_VARARGS, NULL},
	 { (char *)"RectArea_xx_set", _wrap_RectArea_xx_set, METH_VARARGS, NULL},
	 { (char *)"RectArea_xx_get", _wrap_RectArea_xx_get, METH_VARARGS, NULL},
	 { (char *)"RectArea_yy_set", _wrap_RectArea_yy_set, METH_VARARGS, NULL},
	 { (char *)"RectArea_yy_get", _wrap_RectArea_yy_get, METH_VARARGS, NULL},
	 { (char *)"new_RectArea", _wrap_new_RectArea, METH_VARARGS, NULL},
	 { (char *)"RectArea_set", _wrap_RectArea_set, METH_VARARGS, NULL},
	 { (char *)"RectArea_contains", _wrap_RectArea_contains, METH_VARARGS, NULL},
	 { (char *)"delete_RectArea", _wrap_delete_RectArea, METH_VARARGS, NULL},
	 { (char *)"RectArea_swigregister", RectArea_swigregister, METH_VARARGS, NULL},
	 { (char *)"CircleArea_x_set", _wrap_CircleArea_x_set, METH_VARARGS, NULL},
	 { (char *)"CircleArea_x_get", _wrap_CircleArea_x_get, METH_VARARGS, NULL},
	 { (char *)"CircleArea_y_set", _wrap_CircleArea_y_set, METH_VARARGS, NULL},
	 { (char *)"CircleArea_y_get", _wrap_CircleArea_y_get, METH_VARARGS, NULL},
	 { (char *)"CircleArea_radius_set", _wrap_CircleArea_radius_set, METH_VARARGS, NULL},
	 { (char *)"CircleArea_radius_get", _wrap_CircleArea_radius_get, METH_VARARGS, NULL},
	 { (char *)"new_CircleArea", _wrap_new_CircleArea, METH_VARARGS, NULL},
	 { (char *)"CircleArea_contains", _wrap_CircleArea_contains, METH_VARARGS, NULL},
	 { (char *)"delete_CircleArea", _wrap_delete_CircleArea, METH_VARARGS, NULL},
	 { (char *)"CircleArea_swigregister", CircleArea_swigregister, METH_VARARGS, NULL},
	 { (char *)"ArcArea_x_set", _wrap_ArcArea_x_set, METH_VARARGS, NULL},
	 { (char *)"ArcArea_x_get", _wrap_ArcArea_x_get, METH_VARARGS, NULL},
	 { (char *)"ArcArea_y_set", _wrap_ArcArea_y_set, METH_VARARGS, NULL},
	 { (char *)"ArcArea_y_get", _wrap_ArcArea_y_get, METH_VARARGS, NULL},
	 { (char *)"ArcArea_radius_set", _wrap_ArcArea_radius_set, METH_VARARGS, NULL},
	 { (char *)"ArcArea_radius_get", _wrap_ArcArea_radius_get, METH_VARARGS, NULL},
	 { (char *)"ArcArea_direction_set", _wrap_ArcArea_direction_set, METH_VARARGS, NULL},
	 { (char *)"ArcArea_direction_get", _wrap_ArcArea_direction_get, METH_VARARGS, NULL},
	 { (char *)"ArcArea_arc_set", _wrap_ArcArea_arc_set, METH_VARARGS, NULL},
	 { (char *)"ArcArea_arc_get", _wrap_ArcArea_arc_get, METH_VARARGS, NULL},
	 { (char *)"ArcArea_contains", _wrap_ArcArea_contains, METH_VARARGS, NULL},
	 { (char *)"delete_ArcArea", _wrap_delete_ArcArea, METH_VARARGS, NULL},
	 { (char *)"ArcArea_swigregister", ArcArea_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Mutator", _wrap_delete_Mutator, METH_VARARGS, NULL},
	 { (char *)"Mutator_swigregister", Mutator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LinearForce", _wrap_new_LinearForce, METH_VARARGS, NULL},
	 { (char *)"delete_LinearForce", _wrap_delete_LinearForce, METH_VARARGS, NULL},
	 { (char *)"LinearForce_swigregister", LinearForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BounceBox", _wrap_new_BounceBox, METH_VARARGS, NULL},
	 { (char *)"BounceBox_SetMultipliers", _wrap_BounceBox_SetMultipliers, METH_VARARGS, NULL},
	 { (char *)"delete_BounceBox", _wrap_delete_BounceBox, METH_VARARGS, NULL},
	 { (char *)"BounceBox_swigregister", BounceBox_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Zone", _wrap_new_Zone, METH_VARARGS, NULL},
	 { (char *)"delete_Zone", _wrap_delete_Zone, METH_VARARGS, NULL},
	 { (char *)"Zone_swigregister", Zone_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LifeZone", _wrap_new_LifeZone, METH_VARARGS, NULL},
	 { (char *)"delete_LifeZone", _wrap_delete_LifeZone, METH_VARARGS, NULL},
	 { (char *)"LifeZone_swigregister", LifeZone_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KillZone", _wrap_new_KillZone, METH_VARARGS, NULL},
	 { (char *)"delete_KillZone", _wrap_delete_KillZone, METH_VARARGS, NULL},
	 { (char *)"KillZone_swigregister", KillZone_swigregister, METH_VARARGS, NULL},
	 { (char *)"DirectorSingleton_GetInstance", _wrap_DirectorSingleton_GetInstance, METH_VARARGS, NULL},
	 { (char *)"DirectorSingleton_Init", _wrap_DirectorSingleton_Init, METH_VARARGS, NULL},
	 { (char *)"DirectorSingleton_Destroy", _wrap_DirectorSingleton_Destroy, METH_VARARGS, NULL},
	 { (char *)"delete_DirectorSingleton", _wrap_delete_DirectorSingleton, METH_VARARGS, NULL},
	 { (char *)"DirectorSingleton_swigregister", DirectorSingleton_swigregister, METH_VARARGS, NULL},
	 { (char *)"DisplaySingleton_GetInstance", _wrap_DisplaySingleton_GetInstance, METH_VARARGS, NULL},
	 { (char *)"DisplaySingleton_Init", _wrap_DisplaySingleton_Init, METH_VARARGS, NULL},
	 { (char *)"DisplaySingleton_Destroy", _wrap_DisplaySingleton_Destroy, METH_VARARGS, NULL},
	 { (char *)"delete_DisplaySingleton", _wrap_delete_DisplaySingleton, METH_VARARGS, NULL},
	 { (char *)"DisplaySingleton_swigregister", DisplaySingleton_swigregister, METH_VARARGS, NULL},
	 { (char *)"SpriteMapperSingleton_GetInstance", _wrap_SpriteMapperSingleton_GetInstance, METH_VARARGS, NULL},
	 { (char *)"SpriteMapperSingleton_Init", _wrap_SpriteMapperSingleton_Init, METH_VARARGS, NULL},
	 { (char *)"SpriteMapperSingleton_Destroy", _wrap_SpriteMapperSingleton_Destroy, METH_VARARGS, NULL},
	 { (char *)"delete_SpriteMapperSingleton", _wrap_delete_SpriteMapperSingleton, METH_VARARGS, NULL},
	 { (char *)"SpriteMapperSingleton_swigregister", SpriteMapperSingleton_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_SpriteMapper", _wrap_delete_SpriteMapper, METH_VARARGS, NULL},
	 { (char *)"SpriteMapper_swigregister", SpriteMapper_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Director", _wrap_delete_Director, METH_VARARGS, NULL},
	 { (char *)"Director_Start", _wrap_Director_Start, METH_VARARGS, NULL},
	 { (char *)"Director_Iterate", _wrap_Director_Iterate, METH_VARARGS, NULL},
	 { (char *)"Director_RenderFrame", _wrap_Director_RenderFrame, METH_VARARGS, NULL},
	 { (char *)"Director_GetTicker", _wrap_Director_GetTicker, METH_VARARGS, NULL},
	 { (char *)"Director_SetScene", _wrap_Director_SetScene, METH_VARARGS, NULL},
	 { (char *)"Director_GetScene", _wrap_Director_GetScene, METH_VARARGS, NULL},
	 { (char *)"Director_swigregister", Director_swigregister, METH_VARARGS, NULL},
	 { (char *)"Display_Clear", _wrap_Display_Clear, METH_VARARGS, NULL},
	 { (char *)"Display_SetClearColor", _wrap_Display_SetClearColor, METH_VARARGS, NULL},
	 { (char *)"Display_EnableClearing", _wrap_Display_EnableClearing, METH_VARARGS, NULL},
	 { (char *)"Display_InitView", _wrap_Display_InitView, METH_VARARGS, NULL},
	 { (char *)"delete_Display", _wrap_delete_Display, METH_VARARGS, NULL},
	 { (char *)"Display_swigregister", Display_swigregister, METH_VARARGS, NULL},
	 { (char *)"get_int_size", _wrap_get_int_size, METH_VARARGS, NULL},
	 { (char *)"get_float_size", _wrap_get_float_size, METH_VARARGS, NULL},
	 { (char *)"get_ptr_size", _wrap_get_ptr_size, METH_VARARGS, NULL},
	 { (char *)"new_CodeObj", _wrap_new_CodeObj, METH_VARARGS, NULL},
	 { (char *)"delete_CodeObj", _wrap_delete_CodeObj, METH_VARARGS, NULL},
	 { (char *)"CodeObj_code_set", _wrap_CodeObj_code_set, METH_VARARGS, NULL},
	 { (char *)"CodeObj_code_get", _wrap_CodeObj_code_get, METH_VARARGS, NULL},
	 { (char *)"CodeObj_concount_f_set", _wrap_CodeObj_concount_f_set, METH_VARARGS, NULL},
	 { (char *)"CodeObj_concount_f_get", _wrap_CodeObj_concount_f_get, METH_VARARGS, NULL},
	 { (char *)"CodeObj_concount_i_set", _wrap_CodeObj_concount_i_set, METH_VARARGS, NULL},
	 { (char *)"CodeObj_concount_i_get", _wrap_CodeObj_concount_i_get, METH_VARARGS, NULL},
	 { (char *)"CodeObj_concount_v_set", _wrap_CodeObj_concount_v_set, METH_VARARGS, NULL},
	 { (char *)"CodeObj_concount_v_get", _wrap_CodeObj_concount_v_get, METH_VARARGS, NULL},
	 { (char *)"CodeObj_concount_p_set", _wrap_CodeObj_concount_p_set, METH_VARARGS, NULL},
	 { (char *)"CodeObj_concount_p_get", _wrap_CodeObj_concount_p_get, METH_VARARGS, NULL},
	 { (char *)"CodeObj_conarray_f_set", _wrap_CodeObj_conarray_f_set, METH_VARARGS, NULL},
	 { (char *)"CodeObj_conarray_f_get", _wrap_CodeObj_conarray_f_get, METH_VARARGS, NULL},
	 { (char *)"CodeObj_conarray_i_set", _wrap_CodeObj_conarray_i_set, METH_VARARGS, NULL},
	 { (char *)"CodeObj_conarray_i_get", _wrap_CodeObj_conarray_i_get, METH_VARARGS, NULL},
	 { (char *)"CodeObj_conarray_v_set", _wrap_CodeObj_conarray_v_set, METH_VARARGS, NULL},
	 { (char *)"CodeObj_conarray_v_get", _wrap_CodeObj_conarray_v_get, METH_VARARGS, NULL},
	 { (char *)"CodeObj_conarray_p_set", _wrap_CodeObj_conarray_p_set, METH_VARARGS, NULL},
	 { (char *)"CodeObj_conarray_p_get", _wrap_CodeObj_conarray_p_get, METH_VARARGS, NULL},
	 { (char *)"CodeObj_varcount_f_set", _wrap_CodeObj_varcount_f_set, METH_VARARGS, NULL},
	 { (char *)"CodeObj_varcount_f_get", _wrap_CodeObj_varcount_f_get, METH_VARARGS, NULL},
	 { (char *)"CodeObj_varcount_i_set", _wrap_CodeObj_varcount_i_set, METH_VARARGS, NULL},
	 { (char *)"CodeObj_varcount_i_get", _wrap_CodeObj_varcount_i_get, METH_VARARGS, NULL},
	 { (char *)"CodeObj_varcount_v_set", _wrap_CodeObj_varcount_v_set, METH_VARARGS, NULL},
	 { (char *)"CodeObj_varcount_v_get", _wrap_CodeObj_varcount_v_get, METH_VARARGS, NULL},
	 { (char *)"CodeObj_varcount_p_set", _wrap_CodeObj_varcount_p_set, METH_VARARGS, NULL},
	 { (char *)"CodeObj_varcount_p_get", _wrap_CodeObj_varcount_p_get, METH_VARARGS, NULL},
	 { (char *)"CodeObj_max_stack_set", _wrap_CodeObj_max_stack_set, METH_VARARGS, NULL},
	 { (char *)"CodeObj_max_stack_get", _wrap_CodeObj_max_stack_get, METH_VARARGS, NULL},
	 { (char *)"CodeObj_init_code", _wrap_CodeObj_init_code, METH_VARARGS, NULL},
	 { (char *)"CodeObj_init_const_f", _wrap_CodeObj_init_const_f, METH_VARARGS, NULL},
	 { (char *)"CodeObj_init_const_i", _wrap_CodeObj_init_const_i, METH_VARARGS, NULL},
	 { (char *)"CodeObj_init_const_v", _wrap_CodeObj_init_const_v, METH_VARARGS, NULL},
	 { (char *)"CodeObj_init_const_p", _wrap_CodeObj_init_const_p, METH_VARARGS, NULL},
	 { (char *)"CodeObj_set_const_f", _wrap_CodeObj_set_const_f, METH_VARARGS, NULL},
	 { (char *)"CodeObj_set_const_i", _wrap_CodeObj_set_const_i, METH_VARARGS, NULL},
	 { (char *)"CodeObj_set_const_v", _wrap_CodeObj_set_const_v, METH_VARARGS, NULL},
	 { (char *)"CodeObj_set_const_p", _wrap_CodeObj_set_const_p, METH_VARARGS, NULL},
	 { (char *)"CodeObj_swigregister", CodeObj_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ExecFrame", _wrap_new_ExecFrame, METH_VARARGS, NULL},
	 { (char *)"delete_ExecFrame", _wrap_delete_ExecFrame, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_code_set", _wrap_ExecFrame_code_set, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_code_get", _wrap_ExecFrame_code_get, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_stack_set", _wrap_ExecFrame_stack_set, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_stack_get", _wrap_ExecFrame_stack_get, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_top_set", _wrap_ExecFrame_top_set, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_top_get", _wrap_ExecFrame_top_get, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_iptr_set", _wrap_ExecFrame_iptr_set, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_iptr_get", _wrap_ExecFrame_iptr_get, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_vararray_f_set", _wrap_ExecFrame_vararray_f_set, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_vararray_f_get", _wrap_ExecFrame_vararray_f_get, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_vararray_i_set", _wrap_ExecFrame_vararray_i_set, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_vararray_i_get", _wrap_ExecFrame_vararray_i_get, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_vararray_v_set", _wrap_ExecFrame_vararray_v_set, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_vararray_v_get", _wrap_ExecFrame_vararray_v_get, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_vararray_p_set", _wrap_ExecFrame_vararray_p_set, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_vararray_p_get", _wrap_ExecFrame_vararray_p_get, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_vectemp_set", _wrap_ExecFrame_vectemp_set, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_vectemp_get", _wrap_ExecFrame_vectemp_get, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_vecidx_set", _wrap_ExecFrame_vecidx_set, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_vecidx_get", _wrap_ExecFrame_vecidx_get, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_prev_set", _wrap_ExecFrame_prev_set, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_prev_get", _wrap_ExecFrame_prev_get, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_restart", _wrap_ExecFrame_restart, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_execute", _wrap_ExecFrame_execute, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_popSprite", _wrap_ExecFrame_popSprite, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_pushf", _wrap_ExecFrame_pushf, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_pushi", _wrap_ExecFrame_pushi, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_pushv", _wrap_ExecFrame_pushv, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_pushp", _wrap_ExecFrame_pushp, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_popf", _wrap_ExecFrame_popf, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_popi", _wrap_ExecFrame_popi, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_popp", _wrap_ExecFrame_popp, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_popv", _wrap_ExecFrame_popv, METH_VARARGS, NULL},
	 { (char *)"ExecFrame_swigregister", ExecFrame_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_opi2d__MoveToTo_p_opi2d__MoveDelta(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::MoveDelta *)  ((opi2d::MoveTo *) x));
}
static void *_p_opi2d__KillZoneTo_p_opi2d__Zone(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Zone *)  ((opi2d::KillZone *) x));
}
static void *_p_opi2d__LifeZoneTo_p_opi2d__Zone(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Zone *)  ((opi2d::LifeZone *) x));
}
static void *_p_opi2d__AlphaFadeTo_p_opi2d__IntervalAction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::IntervalAction *)  ((opi2d::AlphaFade *) x));
}
static void *_p_opi2d__ScaleToTo_p_opi2d__IntervalAction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::IntervalAction *)  ((opi2d::ScaleTo *) x));
}
static void *_p_opi2d__MoveToTo_p_opi2d__IntervalAction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::IntervalAction *) (opi2d::MoveDelta *) ((opi2d::MoveTo *) x));
}
static void *_p_opi2d__MoveDeltaTo_p_opi2d__IntervalAction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::IntervalAction *)  ((opi2d::MoveDelta *) x));
}
static void *_p_opi2d__ColorFadeTo_p_opi2d__IntervalAction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::IntervalAction *)  ((opi2d::ColorFade *) x));
}
static void *_p_opi2d__RotateDeltaTo_p_opi2d__IntervalAction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::IntervalAction *)  ((opi2d::RotateDelta *) x));
}
static void *_p_opi2d__AlphaFadeTo_p_opi2d__Action(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Action *) (opi2d::IntervalAction *) ((opi2d::AlphaFade *) x));
}
static void *_p_opi2d__RotateTo_p_opi2d__Action(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Action *)  ((opi2d::Rotate *) x));
}
static void *_p_opi2d__FollowPathTo_p_opi2d__Action(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Action *)  ((opi2d::FollowPath *) x));
}
static void *_p_opi2d__ScaleToTo_p_opi2d__Action(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Action *) (opi2d::IntervalAction *) ((opi2d::ScaleTo *) x));
}
static void *_p_opi2d__KeepFacingTo_p_opi2d__Action(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Action *)  ((opi2d::KeepFacing *) x));
}
static void *_p_opi2d__RotateDeltaTo_p_opi2d__Action(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Action *) (opi2d::IntervalAction *) ((opi2d::RotateDelta *) x));
}
static void *_p_opi2d__MoveDeltaTo_p_opi2d__Action(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Action *) (opi2d::IntervalAction *) ((opi2d::MoveDelta *) x));
}
static void *_p_opi2d__PhysicsTo_p_opi2d__Action(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Action *)  ((opi2d::Physics *) x));
}
static void *_p_opi2d__AnimateTo_p_opi2d__Action(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Action *)  ((opi2d::Animate *) x));
}
static void *_p_opi2d__MoveTo_p_opi2d__Action(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Action *)  ((opi2d::Move *) x));
}
static void *_p_opi2d__DelayTo_p_opi2d__Action(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Action *)  ((opi2d::Delay *) x));
}
static void *_p_opi2d__ScaleTo_p_opi2d__Action(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Action *)  ((opi2d::Scale *) x));
}
static void *_p_opi2d__TickFuncTo_p_opi2d__Action(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Action *)  ((opi2d::TickFunc *) x));
}
static void *_p_opi2d__OrbitAroundTo_p_opi2d__Action(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Action *)  ((opi2d::OrbitAround *) x));
}
static void *_p_opi2d__IntervalActionTo_p_opi2d__Action(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Action *)  ((opi2d::IntervalAction *) x));
}
static void *_p_opi2d__ColorFadeTo_p_opi2d__Action(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Action *) (opi2d::IntervalAction *) ((opi2d::ColorFade *) x));
}
static void *_p_opi2d__MoveToTo_p_opi2d__Action(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Action *) (opi2d::IntervalAction *)(opi2d::MoveDelta *) ((opi2d::MoveTo *) x));
}
static void *_p_opi2d__DirectorTo_p_opi2d__SingletonT_opi2d__Director_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Singleton< opi2d::Director > *)  ((opi2d::Director *) x));
}
static void *_p_opi2d__SpriteMapperTo_p_opi2d__SingletonT_opi2d__SpriteMapper_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Singleton< opi2d::SpriteMapper > *)  ((opi2d::SpriteMapper *) x));
}
static void *_p_opi2d__DisplayTo_p_opi2d__SingletonT_opi2d__Display_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Singleton< opi2d::Display > *)  ((opi2d::Display *) x));
}
static void *_p_opi2d__GridImageTo_p_opi2d__Image(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Image *)  ((opi2d::GridImage *) x));
}
static void *_p_opi2d__NodeTo_p_opi2d__Identified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Identified *)  ((opi2d::Node *) x));
}
static void *_p_opi2d__SpriteTo_p_opi2d__Identified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Identified *) (opi2d::Node *) ((opi2d::Sprite *) x));
}
static void *_p_opi2d__AlphaFadeTo_p_opi2d__Identified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Identified *) (opi2d::Action *)(opi2d::IntervalAction *) ((opi2d::AlphaFade *) x));
}
static void *_p_opi2d__RotateTo_p_opi2d__Identified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Identified *) (opi2d::Action *) ((opi2d::Rotate *) x));
}
static void *_p_opi2d__FollowPathTo_p_opi2d__Identified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Identified *) (opi2d::Action *) ((opi2d::FollowPath *) x));
}
static void *_p_opi2d__ScaleToTo_p_opi2d__Identified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Identified *) (opi2d::Action *)(opi2d::IntervalAction *) ((opi2d::ScaleTo *) x));
}
static void *_p_opi2d__KeepFacingTo_p_opi2d__Identified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Identified *) (opi2d::Action *) ((opi2d::KeepFacing *) x));
}
static void *_p_opi2d__RotateDeltaTo_p_opi2d__Identified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Identified *) (opi2d::Action *)(opi2d::IntervalAction *) ((opi2d::RotateDelta *) x));
}
static void *_p_opi2d__MoveDeltaTo_p_opi2d__Identified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Identified *) (opi2d::Action *)(opi2d::IntervalAction *) ((opi2d::MoveDelta *) x));
}
static void *_p_opi2d__PhysicsTo_p_opi2d__Identified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Identified *) (opi2d::Action *) ((opi2d::Physics *) x));
}
static void *_p_opi2d__AnimateTo_p_opi2d__Identified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Identified *) (opi2d::Action *) ((opi2d::Animate *) x));
}
static void *_p_opi2d__MoveTo_p_opi2d__Identified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Identified *) (opi2d::Action *) ((opi2d::Move *) x));
}
static void *_p_opi2d__DelayTo_p_opi2d__Identified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Identified *) (opi2d::Action *) ((opi2d::Delay *) x));
}
static void *_p_opi2d__ScaleTo_p_opi2d__Identified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Identified *) (opi2d::Action *) ((opi2d::Scale *) x));
}
static void *_p_opi2d__CameraTo_p_opi2d__Identified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Identified *) (opi2d::Node *) ((opi2d::Camera *) x));
}
static void *_p_opi2d__TickFuncTo_p_opi2d__Identified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Identified *) (opi2d::Action *) ((opi2d::TickFunc *) x));
}
static void *_p_opi2d__ParticleSystemTo_p_opi2d__Identified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Identified *) (opi2d::Node *) ((opi2d::ParticleSystem *) x));
}
static void *_p_opi2d__OrbitAroundTo_p_opi2d__Identified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Identified *) (opi2d::Action *) ((opi2d::OrbitAround *) x));
}
static void *_p_opi2d__LightTo_p_opi2d__Identified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Identified *)  ((opi2d::Light *) x));
}
static void *_p_opi2d__IntervalActionTo_p_opi2d__Identified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Identified *) (opi2d::Action *) ((opi2d::IntervalAction *) x));
}
static void *_p_opi2d__ActionTo_p_opi2d__Identified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Identified *)  ((opi2d::Action *) x));
}
static void *_p_opi2d__ColorFadeTo_p_opi2d__Identified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Identified *) (opi2d::Action *)(opi2d::IntervalAction *) ((opi2d::ColorFade *) x));
}
static void *_p_opi2d__MoveToTo_p_opi2d__Identified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Identified *) (opi2d::Action *)(opi2d::IntervalAction *)(opi2d::MoveDelta *) ((opi2d::MoveTo *) x));
}
static void *_p_opi2d__ParticleEmitterTo_p_opi2d__Identified(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Identified *)  ((opi2d::ParticleEmitter *) x));
}
static void *_p_opi2d__SpriteTo_p_opi2d__Node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Node *)  ((opi2d::Sprite *) x));
}
static void *_p_opi2d__ParticleSystemTo_p_opi2d__Node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Node *)  ((opi2d::ParticleSystem *) x));
}
static void *_p_opi2d__CameraTo_p_opi2d__Node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Node *)  ((opi2d::Camera *) x));
}
static void *_p_opi2d__ArcAreaTo_p_opi2d__Area(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Area *)  ((opi2d::ArcArea *) x));
}
static void *_p_opi2d__RectAreaTo_p_opi2d__Area(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Area *)  ((opi2d::RectArea *) x));
}
static void *_p_opi2d__CircleAreaTo_p_opi2d__Area(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Area *)  ((opi2d::CircleArea *) x));
}
static void *_p_opi2d__KillZoneTo_p_opi2d__Mutator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Mutator *) (opi2d::Zone *) ((opi2d::KillZone *) x));
}
static void *_p_opi2d__LifeZoneTo_p_opi2d__Mutator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Mutator *) (opi2d::Zone *) ((opi2d::LifeZone *) x));
}
static void *_p_opi2d__BounceBoxTo_p_opi2d__Mutator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Mutator *)  ((opi2d::BounceBox *) x));
}
static void *_p_opi2d__LinearForceTo_p_opi2d__Mutator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Mutator *)  ((opi2d::LinearForce *) x));
}
static void *_p_opi2d__ZoneTo_p_opi2d__Mutator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::Mutator *)  ((opi2d::Zone *) x));
}
static void *_p_opi2d__ConstParameterTo_p_opi2d__EmitterParameter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::EmitterParameter *)  ((opi2d::ConstParameter *) x));
}
static void *_p_opi2d__RandomParameterTo_p_opi2d__EmitterParameter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::EmitterParameter *)  ((opi2d::RandomParameter *) x));
}
static void *_p_opi2d__LinearParameterTo_p_opi2d__EmitterParameter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::EmitterParameter *)  ((opi2d::LinearParameter *) x));
}
static void *_p_opi2d__SineParameterTo_p_opi2d__EmitterParameter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opi2d::EmitterParameter *)  ((opi2d::SineParameter *) x));
}
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reference = {"_p_const_reference", "const_reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "floatval *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Action = {"_p_opi2d__Action", "opi2d::Action *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__ActionCallbacks = {"_p_opi2d__ActionCallbacks", "opi2d::ActionCallbacks *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__AlphaFade = {"_p_opi2d__AlphaFade", "opi2d::AlphaFade *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Animate = {"_p_opi2d__Animate", "opi2d::Animate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__ArcArea = {"_p_opi2d__ArcArea", "opi2d::ArcArea *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Area = {"_p_opi2d__Area", "opi2d::Area *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__BounceBox = {"_p_opi2d__BounceBox", "opi2d::BounceBox *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Camera = {"_p_opi2d__Camera", "opi2d::Camera *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__CircleArea = {"_p_opi2d__CircleArea", "opi2d::CircleArea *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__CodeObj = {"_p_opi2d__CodeObj", "opi2d::CodeObj *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Color = {"_p_opi2d__Color", "opi2d::Color *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__ColorFade = {"_p_opi2d__ColorFade", "opi2d::ColorFade *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__ConstParameter = {"_p_opi2d__ConstParameter", "opi2d::ConstParameter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Delay = {"_p_opi2d__Delay", "opi2d::Delay *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__DeleteCallback = {"_p_opi2d__DeleteCallback", "opi2d::DeleteCallback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Director = {"_p_opi2d__Director", "opi2d::Director *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Display = {"_p_opi2d__Display", "opi2d::Display *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__EmitterParameter = {"_p_opi2d__EmitterParameter", "opi2d::EmitterParameter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__ExecFrame = {"_p_opi2d__ExecFrame", "opi2d::ExecFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__FollowPath = {"_p_opi2d__FollowPath", "opi2d::FollowPath *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__FreeRect = {"_p_opi2d__FreeRect", "opi2d::FreeRect *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__GridImage = {"_p_opi2d__GridImage", "opi2d::GridImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Identified = {"_p_opi2d__Identified", "opi2d::Identified *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Image = {"_p_opi2d__Image", "opi2d::Image *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__IntervalAction = {"_p_opi2d__IntervalAction", "opi2d::IntervalAction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__KeepFacing = {"_p_opi2d__KeepFacing", "opi2d::KeepFacing *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__KillZone = {"_p_opi2d__KillZone", "opi2d::KillZone *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Layer = {"_p_opi2d__Layer", "opi2d::Layer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__LifeZone = {"_p_opi2d__LifeZone", "opi2d::LifeZone *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Light = {"_p_opi2d__Light", "opi2d::Light *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__LinearForce = {"_p_opi2d__LinearForce", "opi2d::LinearForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__LinearParameter = {"_p_opi2d__LinearParameter", "opi2d::LinearParameter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Mat9 = {"_p_opi2d__Mat9", "opi2d::Mat9 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Move = {"_p_opi2d__Move", "opi2d::Move *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__MoveDelta = {"_p_opi2d__MoveDelta", "opi2d::MoveDelta *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__MoveTo = {"_p_opi2d__MoveTo", "opi2d::MoveTo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Mutator = {"_p_opi2d__Mutator", "opi2d::Mutator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Node = {"_p_opi2d__Node", "opi2d::Node *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__OrbitAround = {"_p_opi2d__OrbitAround", "opi2d::OrbitAround *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Particle = {"_p_opi2d__Particle", "opi2d::Particle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__ParticleEmitter = {"_p_opi2d__ParticleEmitter", "opi2d::ParticleEmitter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__ParticleSystem = {"_p_opi2d__ParticleSystem", "opi2d::ParticleSystem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Physics = {"_p_opi2d__Physics", "opi2d::Physics *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__RandomParameter = {"_p_opi2d__RandomParameter", "opi2d::RandomParameter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Rect = {"_p_opi2d__Rect", "opi2d::Rect *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__RectArea = {"_p_opi2d__RectArea", "opi2d::RectArea *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__RenderingPass = {"_p_opi2d__RenderingPass", "opi2d::RenderingPass *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Rotate = {"_p_opi2d__Rotate", "opi2d::Rotate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__RotateDelta = {"_p_opi2d__RotateDelta", "opi2d::RotateDelta *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Scale = {"_p_opi2d__Scale", "opi2d::Scale *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__ScaleTo = {"_p_opi2d__ScaleTo", "opi2d::ScaleTo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Scene = {"_p_opi2d__Scene", "opi2d::Scene *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__SceneCallbacks = {"_p_opi2d__SceneCallbacks", "opi2d::SceneCallbacks *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__SineParameter = {"_p_opi2d__SineParameter", "opi2d::SineParameter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__SingletonT_opi2d__Director_t = {"_p_opi2d__SingletonT_opi2d__Director_t", "opi2d::Singleton< opi2d::Director > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__SingletonT_opi2d__Display_t = {"_p_opi2d__SingletonT_opi2d__Display_t", "opi2d::Singleton< opi2d::Display > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__SingletonT_opi2d__SpriteMapper_t = {"_p_opi2d__SingletonT_opi2d__SpriteMapper_t", "opi2d::Singleton< opi2d::SpriteMapper > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Sprite = {"_p_opi2d__Sprite", "opi2d::Sprite *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__SpriteGroup = {"_p_opi2d__SpriteGroup", "opi2d::SpriteGroup *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__SpriteMapper = {"_p_opi2d__SpriteMapper", "opi2d::SpriteMapper *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Texture = {"_p_opi2d__Texture", "opi2d::Texture *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__TickFunc = {"_p_opi2d__TickFunc", "opi2d::TickFunc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Ticker = {"_p_opi2d__Ticker", "opi2d::Ticker *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Vec2 = {"_p_opi2d__Vec2", "opi2d::Vec2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opi2d__Zone = {"_p_opi2d__Zone", "opi2d::Zone *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_reference = {"_p_reference", "reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t = {"_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t", "std::list< opi2d::Layer *,std::allocator< opi2d::Layer * > > *|opi2d::Layers *|std::list< opi2d::Layer * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__allocator_type = {"_p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__allocator_type", "std::list< opi2d::Layer * >::allocator_type *|std::allocator< opi2d::Layer * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t = {"_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t", "opi2d::Nodes *|std::list< opi2d::Node *,std::allocator< opi2d::Node * > > *|std::list< opi2d::Node * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__allocator_type = {"_p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__allocator_type", "std::list< opi2d::Node * >::allocator_type *|std::allocator< opi2d::Node * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t = {"_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t", "std::vector< opi2d::Sprite *,std::allocator< opi2d::Sprite * > > *|std::vector< opi2d::Sprite * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__allocator_type = {"_p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__allocator_type", "std::vector< opi2d::Sprite * >::allocator_type *|std::allocator< opi2d::Sprite * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "Uint8 *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type = {"_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type", "std::list< opi2d::Layer * >::value_type|opi2d::Layer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type = {"_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type", "std::list< opi2d::Node * >::value_type|opi2d::Node *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type = {"_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type", "opi2d::Sprite *|std::vector< opi2d::Sprite * >::value_type", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_const_reference,
  &_swigt__p_difference_type,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_opi2d__Action,
  &_swigt__p_opi2d__ActionCallbacks,
  &_swigt__p_opi2d__AlphaFade,
  &_swigt__p_opi2d__Animate,
  &_swigt__p_opi2d__ArcArea,
  &_swigt__p_opi2d__Area,
  &_swigt__p_opi2d__BounceBox,
  &_swigt__p_opi2d__Camera,
  &_swigt__p_opi2d__CircleArea,
  &_swigt__p_opi2d__CodeObj,
  &_swigt__p_opi2d__Color,
  &_swigt__p_opi2d__ColorFade,
  &_swigt__p_opi2d__ConstParameter,
  &_swigt__p_opi2d__Delay,
  &_swigt__p_opi2d__DeleteCallback,
  &_swigt__p_opi2d__Director,
  &_swigt__p_opi2d__Display,
  &_swigt__p_opi2d__EmitterParameter,
  &_swigt__p_opi2d__ExecFrame,
  &_swigt__p_opi2d__FollowPath,
  &_swigt__p_opi2d__FreeRect,
  &_swigt__p_opi2d__GridImage,
  &_swigt__p_opi2d__Identified,
  &_swigt__p_opi2d__Image,
  &_swigt__p_opi2d__IntervalAction,
  &_swigt__p_opi2d__KeepFacing,
  &_swigt__p_opi2d__KillZone,
  &_swigt__p_opi2d__Layer,
  &_swigt__p_opi2d__LifeZone,
  &_swigt__p_opi2d__Light,
  &_swigt__p_opi2d__LinearForce,
  &_swigt__p_opi2d__LinearParameter,
  &_swigt__p_opi2d__Mat9,
  &_swigt__p_opi2d__Move,
  &_swigt__p_opi2d__MoveDelta,
  &_swigt__p_opi2d__MoveTo,
  &_swigt__p_opi2d__Mutator,
  &_swigt__p_opi2d__Node,
  &_swigt__p_opi2d__OrbitAround,
  &_swigt__p_opi2d__Particle,
  &_swigt__p_opi2d__ParticleEmitter,
  &_swigt__p_opi2d__ParticleSystem,
  &_swigt__p_opi2d__Physics,
  &_swigt__p_opi2d__RandomParameter,
  &_swigt__p_opi2d__Rect,
  &_swigt__p_opi2d__RectArea,
  &_swigt__p_opi2d__RenderingPass,
  &_swigt__p_opi2d__Rotate,
  &_swigt__p_opi2d__RotateDelta,
  &_swigt__p_opi2d__Scale,
  &_swigt__p_opi2d__ScaleTo,
  &_swigt__p_opi2d__Scene,
  &_swigt__p_opi2d__SceneCallbacks,
  &_swigt__p_opi2d__SineParameter,
  &_swigt__p_opi2d__SingletonT_opi2d__Director_t,
  &_swigt__p_opi2d__SingletonT_opi2d__Display_t,
  &_swigt__p_opi2d__SingletonT_opi2d__SpriteMapper_t,
  &_swigt__p_opi2d__Sprite,
  &_swigt__p_opi2d__SpriteGroup,
  &_swigt__p_opi2d__SpriteMapper,
  &_swigt__p_opi2d__Texture,
  &_swigt__p_opi2d__TickFunc,
  &_swigt__p_opi2d__Ticker,
  &_swigt__p_opi2d__Vec2,
  &_swigt__p_opi2d__Zone,
  &_swigt__p_p_PyObject,
  &_swigt__p_p_void,
  &_swigt__p_reference,
  &_swigt__p_size_type,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t,
  &_swigt__p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__allocator_type,
  &_swigt__p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t,
  &_swigt__p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__allocator_type,
  &_swigt__p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t,
  &_swigt__p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__allocator_type,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
  &_swigt__std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type,
  &_swigt__std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type,
  &_swigt__std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type,
};

static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reference[] = {  {&_swigt__p_const_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Action[] = {  {&_swigt__p_opi2d__Move, _p_opi2d__MoveTo_p_opi2d__Action, 0, 0},  {&_swigt__p_opi2d__AlphaFade, _p_opi2d__AlphaFadeTo_p_opi2d__Action, 0, 0},  {&_swigt__p_opi2d__FollowPath, _p_opi2d__FollowPathTo_p_opi2d__Action, 0, 0},  {&_swigt__p_opi2d__KeepFacing, _p_opi2d__KeepFacingTo_p_opi2d__Action, 0, 0},  {&_swigt__p_opi2d__ScaleTo, _p_opi2d__ScaleToTo_p_opi2d__Action, 0, 0},  {&_swigt__p_opi2d__RotateDelta, _p_opi2d__RotateDeltaTo_p_opi2d__Action, 0, 0},  {&_swigt__p_opi2d__MoveDelta, _p_opi2d__MoveDeltaTo_p_opi2d__Action, 0, 0},  {&_swigt__p_opi2d__Physics, _p_opi2d__PhysicsTo_p_opi2d__Action, 0, 0},  {&_swigt__p_opi2d__Animate, _p_opi2d__AnimateTo_p_opi2d__Action, 0, 0},  {&_swigt__p_opi2d__Delay, _p_opi2d__DelayTo_p_opi2d__Action, 0, 0},  {&_swigt__p_opi2d__Scale, _p_opi2d__ScaleTo_p_opi2d__Action, 0, 0},  {&_swigt__p_opi2d__TickFunc, _p_opi2d__TickFuncTo_p_opi2d__Action, 0, 0},  {&_swigt__p_opi2d__Action, 0, 0, 0},  {&_swigt__p_opi2d__MoveTo, _p_opi2d__MoveToTo_p_opi2d__Action, 0, 0},  {&_swigt__p_opi2d__OrbitAround, _p_opi2d__OrbitAroundTo_p_opi2d__Action, 0, 0},  {&_swigt__p_opi2d__IntervalAction, _p_opi2d__IntervalActionTo_p_opi2d__Action, 0, 0},  {&_swigt__p_opi2d__ColorFade, _p_opi2d__ColorFadeTo_p_opi2d__Action, 0, 0},  {&_swigt__p_opi2d__Rotate, _p_opi2d__RotateTo_p_opi2d__Action, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__ActionCallbacks[] = {  {&_swigt__p_opi2d__ActionCallbacks, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__AlphaFade[] = {  {&_swigt__p_opi2d__AlphaFade, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Animate[] = {  {&_swigt__p_opi2d__Animate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__ArcArea[] = {  {&_swigt__p_opi2d__ArcArea, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Area[] = {  {&_swigt__p_opi2d__ArcArea, _p_opi2d__ArcAreaTo_p_opi2d__Area, 0, 0},  {&_swigt__p_opi2d__Area, 0, 0, 0},  {&_swigt__p_opi2d__RectArea, _p_opi2d__RectAreaTo_p_opi2d__Area, 0, 0},  {&_swigt__p_opi2d__CircleArea, _p_opi2d__CircleAreaTo_p_opi2d__Area, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__BounceBox[] = {  {&_swigt__p_opi2d__BounceBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Camera[] = {  {&_swigt__p_opi2d__Camera, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__CircleArea[] = {  {&_swigt__p_opi2d__CircleArea, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__CodeObj[] = {  {&_swigt__p_opi2d__CodeObj, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Color[] = {  {&_swigt__p_opi2d__Color, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__ColorFade[] = {  {&_swigt__p_opi2d__ColorFade, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__ConstParameter[] = {  {&_swigt__p_opi2d__ConstParameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Delay[] = {  {&_swigt__p_opi2d__Delay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__DeleteCallback[] = {  {&_swigt__p_opi2d__DeleteCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Director[] = {  {&_swigt__p_opi2d__Director, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Display[] = {  {&_swigt__p_opi2d__Display, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__EmitterParameter[] = {  {&_swigt__p_opi2d__EmitterParameter, 0, 0, 0},  {&_swigt__p_opi2d__ConstParameter, _p_opi2d__ConstParameterTo_p_opi2d__EmitterParameter, 0, 0},  {&_swigt__p_opi2d__RandomParameter, _p_opi2d__RandomParameterTo_p_opi2d__EmitterParameter, 0, 0},  {&_swigt__p_opi2d__LinearParameter, _p_opi2d__LinearParameterTo_p_opi2d__EmitterParameter, 0, 0},  {&_swigt__p_opi2d__SineParameter, _p_opi2d__SineParameterTo_p_opi2d__EmitterParameter, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__ExecFrame[] = {  {&_swigt__p_opi2d__ExecFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__FollowPath[] = {  {&_swigt__p_opi2d__FollowPath, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__FreeRect[] = {  {&_swigt__p_opi2d__FreeRect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__GridImage[] = {  {&_swigt__p_opi2d__GridImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Identified[] = {  {&_swigt__p_opi2d__Move, _p_opi2d__MoveTo_p_opi2d__Identified, 0, 0},  {&_swigt__p_opi2d__AlphaFade, _p_opi2d__AlphaFadeTo_p_opi2d__Identified, 0, 0},  {&_swigt__p_opi2d__Camera, _p_opi2d__CameraTo_p_opi2d__Identified, 0, 0},  {&_swigt__p_opi2d__FollowPath, _p_opi2d__FollowPathTo_p_opi2d__Identified, 0, 0},  {&_swigt__p_opi2d__KeepFacing, _p_opi2d__KeepFacingTo_p_opi2d__Identified, 0, 0},  {&_swigt__p_opi2d__ScaleTo, _p_opi2d__ScaleToTo_p_opi2d__Identified, 0, 0},  {&_swigt__p_opi2d__RotateDelta, _p_opi2d__RotateDeltaTo_p_opi2d__Identified, 0, 0},  {&_swigt__p_opi2d__MoveDelta, _p_opi2d__MoveDeltaTo_p_opi2d__Identified, 0, 0},  {&_swigt__p_opi2d__Physics, _p_opi2d__PhysicsTo_p_opi2d__Identified, 0, 0},  {&_swigt__p_opi2d__Animate, _p_opi2d__AnimateTo_p_opi2d__Identified, 0, 0},  {&_swigt__std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type, _p_opi2d__SpriteTo_p_opi2d__Identified, 0, 0},  {&_swigt__p_opi2d__Delay, _p_opi2d__DelayTo_p_opi2d__Identified, 0, 0},  {&_swigt__p_opi2d__Scale, _p_opi2d__ScaleTo_p_opi2d__Identified, 0, 0},  {&_swigt__p_opi2d__TickFunc, _p_opi2d__TickFuncTo_p_opi2d__Identified, 0, 0},  {&_swigt__std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type, _p_opi2d__NodeTo_p_opi2d__Identified, 0, 0},  {&_swigt__p_opi2d__ParticleSystem, _p_opi2d__ParticleSystemTo_p_opi2d__Identified, 0, 0},  {&_swigt__p_opi2d__Action, _p_opi2d__ActionTo_p_opi2d__Identified, 0, 0},  {&_swigt__p_opi2d__MoveTo, _p_opi2d__MoveToTo_p_opi2d__Identified, 0, 0},  {&_swigt__p_opi2d__Identified, 0, 0, 0},  {&_swigt__p_opi2d__Node, _p_opi2d__NodeTo_p_opi2d__Identified, 0, 0},  {&_swigt__p_opi2d__OrbitAround, _p_opi2d__OrbitAroundTo_p_opi2d__Identified, 0, 0},  {&_swigt__p_opi2d__Sprite, _p_opi2d__SpriteTo_p_opi2d__Identified, 0, 0},  {&_swigt__p_opi2d__IntervalAction, _p_opi2d__IntervalActionTo_p_opi2d__Identified, 0, 0},  {&_swigt__p_opi2d__Light, _p_opi2d__LightTo_p_opi2d__Identified, 0, 0},  {&_swigt__p_opi2d__ColorFade, _p_opi2d__ColorFadeTo_p_opi2d__Identified, 0, 0},  {&_swigt__p_opi2d__Rotate, _p_opi2d__RotateTo_p_opi2d__Identified, 0, 0},  {&_swigt__p_opi2d__ParticleEmitter, _p_opi2d__ParticleEmitterTo_p_opi2d__Identified, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Image[] = {  {&_swigt__p_opi2d__Image, 0, 0, 0},  {&_swigt__p_opi2d__GridImage, _p_opi2d__GridImageTo_p_opi2d__Image, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__IntervalAction[] = {  {&_swigt__p_opi2d__AlphaFade, _p_opi2d__AlphaFadeTo_p_opi2d__IntervalAction, 0, 0},  {&_swigt__p_opi2d__ScaleTo, _p_opi2d__ScaleToTo_p_opi2d__IntervalAction, 0, 0},  {&_swigt__p_opi2d__IntervalAction, 0, 0, 0},  {&_swigt__p_opi2d__MoveTo, _p_opi2d__MoveToTo_p_opi2d__IntervalAction, 0, 0},  {&_swigt__p_opi2d__MoveDelta, _p_opi2d__MoveDeltaTo_p_opi2d__IntervalAction, 0, 0},  {&_swigt__p_opi2d__ColorFade, _p_opi2d__ColorFadeTo_p_opi2d__IntervalAction, 0, 0},  {&_swigt__p_opi2d__RotateDelta, _p_opi2d__RotateDeltaTo_p_opi2d__IntervalAction, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__KeepFacing[] = {  {&_swigt__p_opi2d__KeepFacing, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__KillZone[] = {  {&_swigt__p_opi2d__KillZone, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Layer[] = {  {&_swigt__std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type, 0, 0, 0},  {&_swigt__p_opi2d__Layer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__LifeZone[] = {  {&_swigt__p_opi2d__LifeZone, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Light[] = {  {&_swigt__p_opi2d__Light, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__LinearForce[] = {  {&_swigt__p_opi2d__LinearForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__LinearParameter[] = {  {&_swigt__p_opi2d__LinearParameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Mat9[] = {  {&_swigt__p_opi2d__Mat9, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Move[] = {  {&_swigt__p_opi2d__Move, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__MoveDelta[] = {  {&_swigt__p_opi2d__MoveDelta, 0, 0, 0},  {&_swigt__p_opi2d__MoveTo, _p_opi2d__MoveToTo_p_opi2d__MoveDelta, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__MoveTo[] = {  {&_swigt__p_opi2d__MoveTo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Mutator[] = {  {&_swigt__p_opi2d__Mutator, 0, 0, 0},  {&_swigt__p_opi2d__KillZone, _p_opi2d__KillZoneTo_p_opi2d__Mutator, 0, 0},  {&_swigt__p_opi2d__Zone, _p_opi2d__ZoneTo_p_opi2d__Mutator, 0, 0},  {&_swigt__p_opi2d__LifeZone, _p_opi2d__LifeZoneTo_p_opi2d__Mutator, 0, 0},  {&_swigt__p_opi2d__BounceBox, _p_opi2d__BounceBoxTo_p_opi2d__Mutator, 0, 0},  {&_swigt__p_opi2d__LinearForce, _p_opi2d__LinearForceTo_p_opi2d__Mutator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Node[] = {  {&_swigt__std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type, _p_opi2d__SpriteTo_p_opi2d__Node, 0, 0},  {&_swigt__std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type, 0, 0, 0},  {&_swigt__p_opi2d__Node, 0, 0, 0},  {&_swigt__p_opi2d__Sprite, _p_opi2d__SpriteTo_p_opi2d__Node, 0, 0},  {&_swigt__p_opi2d__ParticleSystem, _p_opi2d__ParticleSystemTo_p_opi2d__Node, 0, 0},  {&_swigt__p_opi2d__Camera, _p_opi2d__CameraTo_p_opi2d__Node, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__OrbitAround[] = {  {&_swigt__p_opi2d__OrbitAround, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Particle[] = {  {&_swigt__p_opi2d__Particle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__ParticleEmitter[] = {  {&_swigt__p_opi2d__ParticleEmitter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__ParticleSystem[] = {  {&_swigt__p_opi2d__ParticleSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Physics[] = {  {&_swigt__p_opi2d__Physics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__RandomParameter[] = {  {&_swigt__p_opi2d__RandomParameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Rect[] = {  {&_swigt__p_opi2d__Rect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__RectArea[] = {  {&_swigt__p_opi2d__RectArea, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__RenderingPass[] = {  {&_swigt__p_opi2d__RenderingPass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Rotate[] = {  {&_swigt__p_opi2d__Rotate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__RotateDelta[] = {  {&_swigt__p_opi2d__RotateDelta, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Scale[] = {  {&_swigt__p_opi2d__Scale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__ScaleTo[] = {  {&_swigt__p_opi2d__ScaleTo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Scene[] = {  {&_swigt__p_opi2d__Scene, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__SceneCallbacks[] = {  {&_swigt__p_opi2d__SceneCallbacks, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__SineParameter[] = {  {&_swigt__p_opi2d__SineParameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__SingletonT_opi2d__Director_t[] = {  {&_swigt__p_opi2d__SingletonT_opi2d__Director_t, 0, 0, 0},  {&_swigt__p_opi2d__Director, _p_opi2d__DirectorTo_p_opi2d__SingletonT_opi2d__Director_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__SingletonT_opi2d__Display_t[] = {  {&_swigt__p_opi2d__Display, _p_opi2d__DisplayTo_p_opi2d__SingletonT_opi2d__Display_t, 0, 0},  {&_swigt__p_opi2d__SingletonT_opi2d__Display_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__SingletonT_opi2d__SpriteMapper_t[] = {  {&_swigt__p_opi2d__SpriteMapper, _p_opi2d__SpriteMapperTo_p_opi2d__SingletonT_opi2d__SpriteMapper_t, 0, 0},  {&_swigt__p_opi2d__SingletonT_opi2d__SpriteMapper_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Sprite[] = {  {&_swigt__std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type, 0, 0, 0},  {&_swigt__p_opi2d__Sprite, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__SpriteGroup[] = {  {&_swigt__p_opi2d__SpriteGroup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__SpriteMapper[] = {  {&_swigt__p_opi2d__SpriteMapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Texture[] = {  {&_swigt__p_opi2d__Texture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__TickFunc[] = {  {&_swigt__p_opi2d__TickFunc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Ticker[] = {  {&_swigt__p_opi2d__Ticker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Vec2[] = {  {&_swigt__p_opi2d__Vec2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opi2d__Zone[] = {  {&_swigt__p_opi2d__Zone, 0, 0, 0},  {&_swigt__p_opi2d__KillZone, _p_opi2d__KillZoneTo_p_opi2d__Zone, 0, 0},  {&_swigt__p_opi2d__LifeZone, _p_opi2d__LifeZoneTo_p_opi2d__Zone, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reference[] = {  {&_swigt__p_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t[] = {  {&_swigt__p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__allocator_type[] = {  {&_swigt__p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t[] = {  {&_swigt__p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__allocator_type[] = {  {&_swigt__p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t[] = {  {&_swigt__p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type[] = {  {&_swigt__std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type, 0, 0, 0},  {&_swigt__p_opi2d__Layer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type[] = {  {&_swigt__std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type, _p_opi2d__SpriteTo_p_opi2d__Node, 0, 0},  {&_swigt__std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type, 0, 0, 0},  {&_swigt__p_opi2d__Sprite, _p_opi2d__SpriteTo_p_opi2d__Node, 0, 0},  {&_swigt__p_opi2d__Node, 0, 0, 0},  {&_swigt__p_opi2d__ParticleSystem, _p_opi2d__ParticleSystemTo_p_opi2d__Node, 0, 0},  {&_swigt__p_opi2d__Camera, _p_opi2d__CameraTo_p_opi2d__Node, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type[] = {  {&_swigt__std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type, 0, 0, 0},  {&_swigt__p_opi2d__Sprite, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_const_reference,
  _swigc__p_difference_type,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_opi2d__Action,
  _swigc__p_opi2d__ActionCallbacks,
  _swigc__p_opi2d__AlphaFade,
  _swigc__p_opi2d__Animate,
  _swigc__p_opi2d__ArcArea,
  _swigc__p_opi2d__Area,
  _swigc__p_opi2d__BounceBox,
  _swigc__p_opi2d__Camera,
  _swigc__p_opi2d__CircleArea,
  _swigc__p_opi2d__CodeObj,
  _swigc__p_opi2d__Color,
  _swigc__p_opi2d__ColorFade,
  _swigc__p_opi2d__ConstParameter,
  _swigc__p_opi2d__Delay,
  _swigc__p_opi2d__DeleteCallback,
  _swigc__p_opi2d__Director,
  _swigc__p_opi2d__Display,
  _swigc__p_opi2d__EmitterParameter,
  _swigc__p_opi2d__ExecFrame,
  _swigc__p_opi2d__FollowPath,
  _swigc__p_opi2d__FreeRect,
  _swigc__p_opi2d__GridImage,
  _swigc__p_opi2d__Identified,
  _swigc__p_opi2d__Image,
  _swigc__p_opi2d__IntervalAction,
  _swigc__p_opi2d__KeepFacing,
  _swigc__p_opi2d__KillZone,
  _swigc__p_opi2d__Layer,
  _swigc__p_opi2d__LifeZone,
  _swigc__p_opi2d__Light,
  _swigc__p_opi2d__LinearForce,
  _swigc__p_opi2d__LinearParameter,
  _swigc__p_opi2d__Mat9,
  _swigc__p_opi2d__Move,
  _swigc__p_opi2d__MoveDelta,
  _swigc__p_opi2d__MoveTo,
  _swigc__p_opi2d__Mutator,
  _swigc__p_opi2d__Node,
  _swigc__p_opi2d__OrbitAround,
  _swigc__p_opi2d__Particle,
  _swigc__p_opi2d__ParticleEmitter,
  _swigc__p_opi2d__ParticleSystem,
  _swigc__p_opi2d__Physics,
  _swigc__p_opi2d__RandomParameter,
  _swigc__p_opi2d__Rect,
  _swigc__p_opi2d__RectArea,
  _swigc__p_opi2d__RenderingPass,
  _swigc__p_opi2d__Rotate,
  _swigc__p_opi2d__RotateDelta,
  _swigc__p_opi2d__Scale,
  _swigc__p_opi2d__ScaleTo,
  _swigc__p_opi2d__Scene,
  _swigc__p_opi2d__SceneCallbacks,
  _swigc__p_opi2d__SineParameter,
  _swigc__p_opi2d__SingletonT_opi2d__Director_t,
  _swigc__p_opi2d__SingletonT_opi2d__Display_t,
  _swigc__p_opi2d__SingletonT_opi2d__SpriteMapper_t,
  _swigc__p_opi2d__Sprite,
  _swigc__p_opi2d__SpriteGroup,
  _swigc__p_opi2d__SpriteMapper,
  _swigc__p_opi2d__Texture,
  _swigc__p_opi2d__TickFunc,
  _swigc__p_opi2d__Ticker,
  _swigc__p_opi2d__Vec2,
  _swigc__p_opi2d__Zone,
  _swigc__p_p_PyObject,
  _swigc__p_p_void,
  _swigc__p_reference,
  _swigc__p_size_type,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t,
  _swigc__p_std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__allocator_type,
  _swigc__p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t,
  _swigc__p_std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__allocator_type,
  _swigc__p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t,
  _swigc__p_std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__allocator_type,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_short,
  _swigc__p_void,
  _swigc__std__listT_opi2d__Layer_p_std__allocatorT_opi2d__Layer_p_t_t__value_type,
  _swigc__std__listT_opi2d__Node_p_std__allocatorT_opi2d__Node_p_t_t__value_type,
  _swigc__std__vectorT_opi2d__Sprite_p_std__allocatorT_opi2d__Sprite_p_t_t__value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;  
    if (!type_init) {
      const PyTypeObject tmp
      = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* Number of items in variable part (ob_size) */
#endif
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        (destructor) swig_varlink_dealloc,  /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      /* for Python 3 we already assigned ob_type in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
      varlink_type.ob_type = &PyType_Type;
#endif
      type_init = 1;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d;  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  SWIG_InstallConstants(d,swig_const_table);
  
  
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

